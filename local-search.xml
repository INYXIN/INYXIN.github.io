<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>haha</title>
    <link href="/post/90941329cd46/"/>
    <url>/post/90941329cd46/</url>
    
    <content type="html"><![CDATA[<h1 id="qa"><a href="#qa" class="headerlink" title="qa"></a>qa</h1><h1 id="sd"><a href="#sd" class="headerlink" title="sd"></a>sd</h1><h1 id="saf"><a href="#saf" class="headerlink" title="saf"></a>saf</h1>]]></content>
    
    
    <categories>
      
      <category>default</category>
      
    </categories>
    
    
    <tags>
      
      <tag>default</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Typora插件</title>
    <link href="/post/ec4722c1bdc6/"/>
    <url>/post/ec4722c1bdc6/</url>
    
    <content type="html"><![CDATA[<p><strong><a href="https://github.com/obgnail/typora_plugin">obgnail&#x2F;typora_plugin: Typora plugin. Feature enhancement tool | Typora 插件，功能增强工具 (github.com)</a></strong></p><h1 id="Typora-Plugins"><a href="#Typora-Plugins" class="headerlink" title="Typora Plugins"></a>Typora Plugins</h1><p><a href="https://github.com/obgnail/typora_plugin/blob/master/assets/typora_plugin.png"><img src="https://github.com/obgnail/typora_plugin/raw/master/assets/typora_plugin.png" alt="typora_plugin"></a></p><p>目前支持的功能：</p><table><thead><tr><th>序号</th><th>插件</th><th>功能</th></tr></thead><tbody><tr><td>1</td><td>window_tab</td><td>标签页管理</td></tr><tr><td>2</td><td>search_multi</td><td>全局多关键字搜索</td></tr><tr><td>3</td><td>multi_highlighter</td><td>多关键字高亮</td></tr><tr><td>4</td><td>collapse_paragraph</td><td>章节折叠</td></tr><tr><td>5</td><td>collapse_list</td><td>列表折叠</td></tr><tr><td>6</td><td>collapse_table</td><td>表格折叠</td></tr><tr><td>7</td><td>md_padding</td><td>中英文混排优化</td></tr><tr><td>8</td><td>slash_commands</td><td>斜杠命令</td></tr><tr><td>9</td><td>templater</td><td>文件模板</td></tr><tr><td>10</td><td>resourceOperation</td><td>一键清除无用图片</td></tr><tr><td>11</td><td>fence_enhance</td><td>一键复制、折叠、格式化代码</td></tr><tr><td>12</td><td>toc</td><td>在右侧生成大纲目录</td></tr><tr><td>13</td><td>commander</td><td>命令行环境</td></tr><tr><td>14</td><td>mindmap</td><td>根据文档大纲一键生成思维导图</td></tr><tr><td>15</td><td>toolbar</td><td>多功能搜索</td></tr><tr><td>16</td><td>right_click_menu</td><td>右键菜单统一管理、调用插件</td></tr><tr><td>17</td><td>pie_menu</td><td>圆盘菜单</td></tr><tr><td>18</td><td>preferences</td><td>启停插件</td></tr><tr><td>19</td><td>markmap</td><td>提供 markmap 组件支持</td></tr><tr><td>20</td><td>echarts</td><td>提供 echarts 组件支持</td></tr><tr><td>21</td><td>chart</td><td>提供 chartjs 组件支持</td></tr><tr><td>22</td><td>abc</td><td>提供 abcjs 组件支持</td></tr><tr><td>23</td><td>calendar</td><td>提供 tui.calendar 组件支持</td></tr><tr><td>24</td><td>marp</td><td>提供 marp 组件支持</td></tr><tr><td>25</td><td>callouts</td><td>提供 callouts 支持</td></tr><tr><td>26</td><td>text_stylize</td><td>文字风格化</td></tr><tr><td>27</td><td>read_only</td><td>只读模式</td></tr><tr><td>28</td><td>blur</td><td>模糊模式</td></tr><tr><td>29</td><td>kanban</td><td>看板</td></tr><tr><td>30</td><td>timeline</td><td>时间线</td></tr><tr><td>31</td><td>chat</td><td>聊天</td></tr><tr><td>32</td><td>file_counter</td><td>显示目录下的文件数</td></tr><tr><td>33</td><td>outline</td><td>以表格、图片、代码块形式的大纲</td></tr><tr><td>34</td><td>auto_number</td><td>章节、表格、图片、代码块等自动编号</td></tr><tr><td>35</td><td>imageReviewer</td><td>图片查看器</td></tr><tr><td>36</td><td>chineseSymbolAutoPairer</td><td>中文符号自动补全</td></tr><tr><td>37</td><td>datatables</td><td>表格增强（搜索、过滤、分页、排序等）</td></tr><tr><td>38</td><td>resize_table</td><td>调整表格行高列宽</td></tr><tr><td>39</td><td>resize_image</td><td>调整图片显示大小</td></tr><tr><td>40</td><td>export_enhance</td><td>导出 html 时避免图片丢失</td></tr><tr><td>41</td><td>go_top</td><td>一键到文章顶部、底部</td></tr><tr><td>42</td><td>reopenClosedFiles</td><td>打开上次退出 Typora 时尚未关闭的标签页</td></tr><tr><td>43</td><td>truncate_text</td><td>暂时隐藏内容，提高大文件渲染性能</td></tr><tr><td>44</td><td>markdownLint</td><td>markdown 格式规范检测</td></tr><tr><td>45</td><td>darkMode</td><td>夜间模式</td></tr><tr><td>46</td><td>noImageMode</td><td>无图模式</td></tr><tr><td>47</td><td>pluginUpdater</td><td>一键升级插件</td></tr><tr><td>48</td><td>extractRangeToNewFile</td><td>提取选区文字到新文件</td></tr><tr><td>49</td><td>fullPathCopy</td><td>复制标题路径</td></tr><tr><td>50</td><td>autoTrailingWhiteSpace</td><td>为文档添加结尾空格</td></tr><tr><td>51</td><td>redirectLocalRootUrl</td><td>重定向本地资源根目录</td></tr><tr><td>52</td><td>blockSideBySide</td><td>并列显示活动块</td></tr><tr><td>53</td><td>scrollBookmarker</td><td>书签管理器</td></tr><tr><td>54</td><td>openInTotalCommander</td><td>在 total commander 打开</td></tr><tr><td>55</td><td>bingSpeech</td><td>必应朗读</td></tr><tr><td>56</td><td>cipher</td><td>加密文件</td></tr><tr><td>57</td><td>ripgrep</td><td>使用 ripgrep 搜索文件</td></tr><tr><td>58</td><td>help</td><td>用户帮助</td></tr><tr><td>59</td><td>custom</td><td>开放平台，用户自定义插件（高级）</td></tr><tr><td>60</td><td>hotkeyHub</td><td>快捷键注册中心（高级）</td></tr><tr><td>61</td><td>quickButton</td><td>于右下角添加功能按钮（高级）</td></tr><tr><td>62</td><td>json_rpc</td><td>外部操纵 Typora（高级）</td></tr><tr><td>63</td><td>article_uploader</td><td>一键上传博客到支持的所有平台</td></tr><tr><td>64</td><td>old_window_tab</td><td>标签页管理（已废弃）</td></tr></tbody></table><p><strong>尊重用户的一切选择</strong>。本项目的任何插件、任何功能皆可永久启用 &#x2F; 禁用。</p><blockquote><p>如果各位有其他的需求，或发现 BUG，欢迎 <a href="https://github.com/obgnail/typora_plugin/issues/new">提 issue</a>，欢迎 PR。如果能给我颗 star ⭐ 就更好了 :)</p></blockquote><h2 id="如何使用：方法一（自动）"><a href="#如何使用：方法一（自动）" class="headerlink" title="如何使用：方法一（自动）"></a>如何使用：方法一（自动）</h2><blockquote><p>目前此方法仅限 Windows 平台。</p></blockquote><ol><li><p><a href="https://github.com/obgnail/typora_plugin/releases/latest">下载</a> 插件源码的压缩包，并将其解压</p></li><li><p>进入 Typora 安装路径，找到包含 <code>window.html</code> 的文件夹 A（正式版的路径为 <code>Typora/resources/window.html</code>，免费版的路径为 <code>Typora/resources/app/window.html</code>）</p></li><li><p>打开文件夹 A，将解压后的 plugin 文件夹粘贴进该文件夹下（参考方法二的图片）</p></li><li><p>进入文件夹 <code>A/plugin/updater/</code>，双击运行 <code>updater.exe</code>。如果看到下图，说明安装成功</p><p><a href="https://github.com/obgnail/typora_plugin/blob/master/assets/installer.png"><img src="https://github.com/obgnail/typora_plugin/raw/master/assets/installer.png" alt="installer"></a></p></li><li><p>验证：重启 Typora，在正文区域点击鼠标右键，弹出右键菜单栏，如果能看到 <code>常用插件</code> 栏目，说明一切顺利</p></li></ol><blockquote><p>每个插件皆有配置选项。开发者鼓励您修改配置，以符合自身需求。配置文件夹位于 <a href="https://github.com/obgnail/typora_plugin/tree/master/plugin/global/settings">A&#x2F;plugin&#x2F;global&#x2F;settings&#x2F;</a></p></blockquote><h2 id="如何使用：方法二（手动）"><a href="#如何使用：方法二（手动）" class="headerlink" title="如何使用：方法二（手动）"></a>如何使用：方法二（手动）</h2><blockquote><p>此方法支持 Windows、Linux 平台。</p></blockquote><ol><li><p><a href="https://github.com/obgnail/typora_plugin/releases/latest">下载</a> 插件源码的压缩包，并将其解压</p></li><li><p>进入 Typora 安装路径，找到包含 <code>window.html</code> 的文件夹 A（正式版的路径为 <code>Typora/resources/window.html</code>，免费版的路径为 <code>Typora/resources/app/window.html</code>）</p></li><li><p>打开文件夹 A，将解压后的 plugin 文件夹粘贴进该文件夹下</p></li><li><p>根据文件夹 A 下是否含有 <code>appsrc</code> 目录判断 Typora 是否为新版本，有则新版本，无则旧版本</p></li><li><p>打开文件 <code>A/window.html</code></p><ul><li>若是新版本：搜索文件内容 <code>&lt;script src=&quot;./appsrc/window/frame.js&quot; defer=&quot;defer&quot;&gt;&lt;/script&gt;</code></li><li>若是旧版本：搜索文件内容 <code>&lt;script src=&quot;./app/window/frame.js&quot; defer=&quot;defer&quot;&gt;&lt;/script&gt;</code></li></ul><p>在上述搜索内容的 <strong>后面</strong> 加入 <code>&lt;script src=&quot;./plugin/index.js&quot; defer=&quot;defer&quot;&gt;&lt;/script&gt;</code></p></li><li><p>验证：重启 Typora，在正文区域点击鼠标右键，弹出右键菜单栏，如果能看到 <code>常用插件</code> 栏目，说明一切顺利</p></li></ol><blockquote><p>如果您安装失败，大概率是权限问题导致的。请给上述的 plugin 文件夹权限。</p></blockquote><table><thead><tr><th></th><th>新版本</th><th>旧版本</th></tr></thead><tbody><tr><td>步骤 3</td><td><a href="https://github.com/obgnail/typora_plugin/blob/master/assets/new_typora_dir.png"><img src="https://github.com/obgnail/typora_plugin/raw/master/assets/new_typora_dir.png" alt="new_typora_dir"></a></td><td><a href="https://github.com/obgnail/typora_plugin/blob/master/assets/where_is_windowhtml.png"><img src="https://github.com/obgnail/typora_plugin/raw/master/assets/where_is_windowhtml.png" alt="where_is_windowhtml"></a></td></tr><tr><td>步骤 5</td><td><a href="https://github.com/obgnail/typora_plugin/blob/master/assets/new_typora_framejs.png"><img src="https://github.com/obgnail/typora_plugin/raw/master/assets/new_typora_framejs.png" alt="new_typora_framejs"></a></td><td><a href="https://github.com/obgnail/typora_plugin/blob/master/assets/where_is_framejs.png"><img src="https://github.com/obgnail/typora_plugin/raw/master/assets/where_is_framejs.png" alt="where_is_framejs"></a></td></tr></tbody></table><h2 id="如何使用：方法三（自动）"><a href="#如何使用：方法三（自动）" class="headerlink" title="如何使用：方法三（自动）"></a>如何使用：方法三（自动）</h2><blockquote><p>目前此方法仅限 archlinux 平台，aur 见 <a href="https://aur.archlinux.org/packages/typora-plugin">aur&#x2F;typora-plugin</a></p></blockquote><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">yay -S typora-plugin</span><br></code></pre></td></tr></table></figure><h2 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h2><h3 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h3><p><code>window.html</code> 是 Typora 的初始文件，可以写入一个 <code>&lt;script&gt;</code> 标签实现功能，就和 Tampermonkey 脚本一样。</p><h3 id="后端"><a href="#后端" class="headerlink" title="后端"></a>后端</h3><ol><li>因为 Typora 暴露了 <code>reqnode</code> 函数（require 的别名），所以可以使用 CommonJS 的 <code>reqnode(&#39;path&#39;)</code> 导入 Node.js 的 path 库，其他库同理。</li><li>因为 Typora 使用了 electron 不太安全的 <code>executeJavaScript</code> 功能，所以可以用此注入 JS 代码，从而劫持后端关键对象，进而实现 electron 的后端功能注入。理论上劫持了 electron 对象，你甚至可以在 Typora 里斗地主。</li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">// 控制台输入下面命令:</span><br><br><span class="hljs-comment">// 让第二个窗口打印消息</span><br>JSBridge.<span class="hljs-title function_ invoke__">invoke</span>(<span class="hljs-string">&quot;executeJavaScript&quot;</span>, <span class="hljs-number">2</span>, `console.<span class="hljs-title function_ invoke__">log</span>(<span class="hljs-string">&quot;i am logging&quot;</span>)`);<br><br><span class="hljs-comment">// 让所有窗口打印消息</span><br>ClientCommand.<span class="hljs-title function_ invoke__">execForAll</span>(`console.<span class="hljs-title function_ invoke__">log</span>(<span class="hljs-string">&quot;i am logging&quot;</span>)`);<br><br><span class="hljs-comment">// 获取到本窗口的BrowserWindow对象</span><br><span class="hljs-keyword">global</span>.<span class="hljs-title function_ invoke__">reqnode</span>(<span class="hljs-string">&#x27;electron&#x27;</span>).remote.<span class="hljs-keyword">require</span>(<span class="hljs-string">&#x27;electron&#x27;</span>).BrowserWindow;<br><br><span class="hljs-comment">// 获取到所有窗口的BrowserWindow对象</span><br>ClientCommand.<span class="hljs-title function_ invoke__">execForAll</span>(`console.<span class="hljs-title function_ invoke__">log</span>(<span class="hljs-keyword">global</span>.<span class="hljs-title function_ invoke__">reqnode</span>(<span class="hljs-string">&#x27;electron&#x27;</span>).remote.<span class="hljs-keyword">require</span>(<span class="hljs-string">&#x27;electron&#x27;</span>).BrowserWindow)`);<br><br><span class="hljs-comment">// 让窗口1执行语句_myValue=123，然后将变量_myValue传给窗口2</span><br>JSBridge.<span class="hljs-title function_ invoke__">invoke</span>(<span class="hljs-string">&#x27;executeJavaScript&#x27;</span>, <span class="hljs-number">1</span>, <span class="hljs-string">&quot;_myValue=123; JSBridge.invoke(&#x27;executeJavaScript&#x27;, 2, `console.log($&#123;_myValue&#125;)`)&quot;</span>);<br></code></pre></td></tr></table></figure><h2 id="Q-A"><a href="#Q-A" class="headerlink" title="Q&amp;A"></a>Q&amp;A</h2><h3 id="我的-Typora-版本能用吗？"><a href="#我的-Typora-版本能用吗？" class="headerlink" title="我的 Typora 版本能用吗？"></a>我的 Typora 版本能用吗？</h3><p>所有插件都在 0.9.98 版本（最后一个免费版本）和最新版本测试过。本项目理论上支持所有 Typora 版本，但是 Typora 在 0.9.98 版本以后功能才稳定下来。<strong>0.9.98 版本以下，可能会因为缺少某些功能导致部分插件失效</strong>。</p><h3 id="插件会失效吗？"><a href="#插件会失效吗？" class="headerlink" title="插件会失效吗？"></a>插件会失效吗？</h3><p>理论上能保持长时间有效，且我在维护中。</p><h3 id="如何永久禁用-启用某些插件？"><a href="#如何永久禁用-启用某些插件？" class="headerlink" title="如何永久禁用&#x2F;启用某些插件？"></a>如何永久禁用&#x2F;启用某些插件？</h3><p>右键菜单 -&gt; 少用插件 -&gt; 启停插件。</p><h3 id="如何修改插件配置？"><a href="#如何修改插件配置？" class="headerlink" title="如何修改插件配置？"></a>如何修改插件配置？</h3><p>目前整个项目包含 600+ 配置选项，可以比较完整的定义各个插件的行为。</p><p>这些配置全部位于 <a href="https://github.com/obgnail/typora_plugin/tree/master/plugin/global/settings">.&#x2F;plugin&#x2F;global&#x2F;settings&#x2F;</a> 目录中。修改配置的方法请阅读该目录下的 <a href="https://github.com/obgnail/typora_plugin/blob/master/plugin/global/settings/%E8%AF%B7%E8%AF%BB%E6%88%91.md">请读我.md</a>。</p><h3 id="如何升级插件？"><a href="#如何升级插件？" class="headerlink" title="如何升级插件？"></a>如何升级插件？</h3><ul><li><p>方法一（全自动，仅限 Windows）：右键菜单 -&gt; 常用插件 -&gt; 二级插件 -&gt; 升级插件</p></li><li><p>方法二（半自动，仅限 Windows）：有些用户将 Typora 装在 C 盘或者 Typora 的安装路径包含 <code>Program Files</code> 目录，经常会因为权限问题导致升级失败。此时可以通过以管理员身份打开终端，执行下面命令升级：</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-meta"># 注意updater.exe改成你的路径</span><br><span class="hljs-meta"># proxy参数：你的代理URL。如果你所在地区能直连GitHub，可以删除此参数</span><br><span class="hljs-symbol">D:</span><span class="hljs-keyword">/software/</span>typora<span class="hljs-keyword">/resources/</span>plugin<span class="hljs-keyword">/updater/</span>updater.exe --<span class="hljs-attr">action</span><span class="hljs-operator">=</span>update --<span class="hljs-attr">proxy</span><span class="hljs-operator">=</span>http:<span class="hljs-comment">//127.0.0.1:7890</span><br></code></pre></td></tr></table></figure></li><li><p>方法三（手动，支持 Windows、Linux）：<a href="https://github.com/obgnail/typora_plugin?tab=readme-ov-file#%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8%EF%BC%9A%E6%96%B9%E6%B3%95%E4%BA%8C%EF%BC%88%E6%89%8B%E5%8A%A8%EF%BC%89">安装方法二</a> 重新走一遍。</p></li></ul><h3 id="我不想用了，如何卸载插件系统？"><a href="#我不想用了，如何卸载插件系统？" class="headerlink" title="我不想用了，如何卸载插件系统？"></a>我不想用了，如何卸载插件系统？</h3><p>右键菜单 -&gt; 少用插件 -&gt; 帮助 -&gt; 卸载插件。</p><h3 id="支持-Typora-for-Mac-吗？"><a href="#支持-Typora-for-Mac-吗？" class="headerlink" title="支持 Typora for Mac 吗？"></a>支持 Typora for Mac 吗？</h3><p>没有 Mac，故没做测试。</p><h2 id="插件使用说明"><a href="#插件使用说明" class="headerlink" title="插件使用说明"></a>插件使用说明</h2><p>所有的插件都提供了四种使用方法：</p><ul><li>键盘党：<ul><li>键入 ctrl+j，在输入框键入 <code>plu+空格+插件名称</code> 调出插件列表（详见 <code>toolbar</code> 插件）</li><li>快捷键（详见 <code>hotkeyHub</code> 插件）</li></ul></li><li>鼠标党：<ul><li>在正文区域右键，在弹出的右键菜单中直接调用（详见 <code>right_click_menu</code> 插件）</li><li>快捷按钮（详见 <code>quickButton</code> 插件）</li></ul></li></ul><h3 id="window-tab：标签页管理"><a href="#window-tab：标签页管理" class="headerlink" title="window_tab：标签页管理"></a>window_tab：标签页管理</h3><ul><li><code>切换标签</code>：标签页处 Ctrl+滚轮滚动、ctrl+shift+tab、ctrl+tab、ctrl+PgUp、ctrl+PgDn</li><li><code>关闭标签</code>：ctrl+w、鼠标中键</li><li><code>新窗口打开</code>：ctrl+单击标签</li><li><code>排序标签</code>：拖拽</li><li><code>弹出标签的菜单选项</code>：右键单击标签页</li></ul><p><a href="https://github.com/obgnail/typora_plugin/blob/master/assets/new_window_tab.gif"><img src="https://github.com/obgnail/typora_plugin/raw/master/assets/new_window_tab.gif" alt="new_window_tab"></a></p><h3 id="search-multi：全局多关键字搜索"><a href="#search-multi：全局多关键字搜索" class="headerlink" title="search_multi：全局多关键字搜索"></a>search_multi：全局多关键字搜索</h3><p>功能：比如搜索同时包含 <code>golang</code> 和 <code>install</code> 和 <code>生命周期</code> 三个关键字的文件。</p><blockquote><p>搜索关键字使用空格分隔，双引号包裹视为词组。eg：<code>golang install</code> 搜索同时包含 golang 和 install 的文件；<code>&quot;golang install&quot;</code> 搜索包含 <code>golang install</code> 的文件</p></blockquote><ul><li><code>打开搜索框</code>：ctrl+shift+P</li><li><code>关闭搜索框</code>：光标定位到输入框，键入 esc</li><li><code>搜索</code>：enter</li><li><code>选中</code>：ArrowUp，ArrowDown</li><li><code>当前窗口打开</code>：click、ctrl+enter</li><li><code>新窗口打开</code>：ctrl+click、ctrl+shift+enter</li><li><code>移动位置</code>：ctrl+拖动输入框</li></ul><p><a href="https://github.com/obgnail/typora_plugin/blob/master/assets/search_mutli.gif"><img src="https://github.com/obgnail/typora_plugin/raw/master/assets/search_mutli.gif" alt="search_mutli"></a></p><h3 id="multi-highlighter：多关键字高亮"><a href="#multi-highlighter：多关键字高亮" class="headerlink" title="multi_highlighter：多关键字高亮"></a>multi_highlighter：多关键字高亮</h3><p>功能：搜索并高亮关键字，并提供一键定位功能（左键下一个，右键上一个）</p><blockquote><p>关键字使用空格分隔，双引号包裹视为词组。</p></blockquote><ul><li><code>打开搜索框</code>：ctrl+shift+H</li><li><code>关闭搜索框</code>：光标定位到输入框，键入 esc</li><li><code>搜索</code>：enter</li><li><code>移动位置</code>：ctrl+拖动输入框</li><li><code>定位到下一个关键字</code>：左键色块</li><li><code>定位到上一个关键字</code>：右键色块</li></ul><p><a href="https://github.com/obgnail/typora_plugin/blob/master/assets/multi_highlighter.png"><img src="https://github.com/obgnail/typora_plugin/raw/master/assets/multi_highlighter.png" alt="multi_highlighter"></a></p><blockquote><p>注意：当你鼠标点击文档内容时，会自动退出高亮状态。<strong>这是 Typora 本身的限制导致的</strong>。你可以试试 Typora 自身的 ctrl+F 搜索，在搜索关键字后，点击任意地方原先高亮的地方也会消失。</p></blockquote><h3 id="collapse-paragraph：章节折叠"><a href="#collapse-paragraph：章节折叠" class="headerlink" title="collapse_paragraph：章节折叠"></a>collapse_paragraph：章节折叠</h3><p>功能：折叠 &#x2F; 展开 章节下所有文本。支持折叠的标签：h1~h6。</p><ul><li><code>折叠/展开单个章节</code>：ctrl+click</li><li><code>折叠/展开父章节下所有同级的章节</code>：ctrl+alt+click</li><li><code>折叠/展开所有同级的章节</code>：ctrl+shift+alt+click</li></ul><p><a href="https://github.com/obgnail/typora_plugin/blob/master/assets/collapse_paragraph.gif"><img src="https://github.com/obgnail/typora_plugin/raw/master/assets/collapse_paragraph.gif" alt="collapse_paragraph"></a></p><h3 id="collapse-list：列表折叠"><a href="#collapse-list：列表折叠" class="headerlink" title="collapse_list：列表折叠"></a>collapse_list：列表折叠</h3><p>功能：折叠 &#x2F; 展开 无序列表、有序列表、任务列表。</p><h3 id="collapse-table：表格折叠"><a href="#collapse-table：表格折叠" class="headerlink" title="collapse_table：表格折叠"></a>collapse_table：表格折叠</h3><p>功能：折叠 &#x2F; 展开 表格。</p><h3 id="md-padding：中英文混排优化"><a href="#md-padding：中英文混排优化" class="headerlink" title="md_padding：中英文混排优化"></a>md_padding：中英文混排优化</h3><p>功能：中英文混排时，中文与英文之间、中文与数字之间添加空格。</p><p>快捷键：ctrl+shift+B（原本的快捷键是 ctrl+shift+K，但是此快捷键已经被新版本 Typora 的其他功能占用了，目前已经改成 ctrl+shift+B，下面的动图懒得改了）</p><p><a href="https://github.com/obgnail/typora_plugin/blob/master/assets/md_padding.gif"><img src="https://github.com/obgnail/typora_plugin/raw/master/assets/md_padding.gif" alt="md_padding"></a></p><p>有些片段希望保持原状，这时可以用 <code>md-padding-ignore</code> 标签包裹起来。</p><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs django"><span class="language-xml">下面是一段不需要格式化的文本</span><br><span class="language-xml"><span class="hljs-comment">&lt;!--md-padding-ignore-begin--&gt;</span></span><br><span class="language-xml">a*b=c, b&gt;1 =&gt; a<span class="hljs-tag">&lt;<span class="hljs-name">c</span></span></span><br><span class="hljs-tag"><span class="language-xml">&lt;!<span class="hljs-attr">--md-padding-ignore-end--</span>&gt;</span></span><br><span class="language-xml">现在开始又可以格式化了。</span><br></code></pre></td></tr></table></figure><h3 id="slash-commands：斜杠命令"><a href="#slash-commands：斜杠命令" class="headerlink" title="slash_commands：斜杠命令"></a>slash_commands：斜杠命令</h3><p>功能：类似于 notion 的 slash command。</p><p>支持用户自定义命令，请前往配置文件修改：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs routeros">[slash_commands]<br>COMMANDS = [<br>    &#123; <span class="hljs-built_in">enable</span> = <span class="hljs-literal">true</span>,<span class="hljs-built_in"> type </span>= <span class="hljs-string">&quot;snippet&quot;</span>, icon = <span class="hljs-string">&quot;🧰&quot;</span>, hint = <span class="hljs-string">&quot;&quot;</span>, keyword = <span class="hljs-string">&quot;snippet&quot;</span>, callback = <span class="hljs-string">&quot;thisIsTestSnippet&quot;</span> &#125;,<br>    &#123; <span class="hljs-built_in">enable</span> = <span class="hljs-literal">true</span>,<span class="hljs-built_in"> type </span>= <span class="hljs-string">&quot;command&quot;</span>, icon = <span class="hljs-string">&quot;🧾&quot;</span>, hint = <span class="hljs-string">&quot;二级标题&quot;</span>, keyword = <span class="hljs-string">&quot;h2&quot;</span>, callback = <span class="hljs-string">&quot;() =&gt; File.editor.stylize.changeBlock(&#x27;header2&#x27;, undefined, true)&quot;</span> &#125;,<br>    &#123; <span class="hljs-built_in">enable</span> = <span class="hljs-literal">true</span>,<span class="hljs-built_in"> type </span>= <span class="hljs-string">&quot;command&quot;</span>, icon = <span class="hljs-string">&quot;🧰&quot;</span>, hint = <span class="hljs-string">&quot;置底部&quot;</span>, keyword = <span class="hljs-string">&quot;jumpBottom&quot;</span>, callback = <span class="hljs-string">&quot;() =&gt; File.editor.selection.jumpBottom()&quot;</span> &#125;,<br>    <span class="hljs-built_in">..</span>.<br>]<br></code></pre></td></tr></table></figure><p><a href="https://github.com/obgnail/typora_plugin/blob/master/assets/slash_commands.gif"><img src="https://github.com/obgnail/typora_plugin/raw/master/assets/slash_commands.gif" alt="slash_commands"></a></p><h3 id="templater：文件模板功能"><a href="#templater：文件模板功能" class="headerlink" title="templater：文件模板功能"></a>templater：文件模板功能</h3><p>功能：类似于 obsidian 的文件模板功能，根据模板快速创建文件。</p><p>使用方式：右键菜单 -&gt; 常用插件 -&gt; 二级插件 -&gt; 文件模板。</p><blockquote><p>模板列表请前往配置文件修改。</p></blockquote><p><a href="https://github.com/obgnail/typora_plugin/blob/master/assets/templater.gif"><img src="https://github.com/obgnail/typora_plugin/raw/master/assets/templater.gif" alt="templater"></a></p><h3 id="resourceOperation：一键清除无用图片"><a href="#resourceOperation：一键清除无用图片" class="headerlink" title="resourceOperation：一键清除无用图片"></a>resourceOperation：一键清除无用图片</h3><p>功能：资源管理，清除无用图片</p><p>使用方式：右键菜单 -&gt; 常用插件 -&gt; 二级插件 -&gt; 资源管理</p><h3 id="fence-enhance：一键复制，折叠，格式化代码"><a href="#fence-enhance：一键复制，折叠，格式化代码" class="headerlink" title="fence_enhance：一键复制，折叠，格式化代码"></a>fence_enhance：一键复制，折叠，格式化代码</h3><p><a href="https://github.com/obgnail/typora_plugin/blob/master/assets/fence_enhance.png"><img src="https://github.com/obgnail/typora_plugin/raw/master/assets/fence_enhance.png" alt="fence_enhance"></a></p><h3 id="toc：在右侧生成大纲目录"><a href="#toc：在右侧生成大纲目录" class="headerlink" title="toc：在右侧生成大纲目录"></a>toc：在右侧生成大纲目录</h3><p>功能：Typora 侧边栏的【文件】和【大纲】不能同时显示，为了解决此问题，此插件会在右侧新增一个【大纲】。</p><p>使用方式：</p><ul><li>方式一：常用插件 -&gt; 二级插件 -&gt; 大纲目录</li><li>方式二：右键点击侧边栏的【大纲】按钮</li></ul><h3 id="commander：命令行环境"><a href="#commander：命令行环境" class="headerlink" title="commander：命令行环境"></a>commander：命令行环境</h3><blockquote><p>有些插件依赖于此插件，不建议禁用。</p></blockquote><p>功能：和 total commander 的命令行一样（快捷键也一样），一个快速执行命令的工具，并提供少量交互。</p><ul><li><code>弹出执行框</code>：ctrl+G</li><li><code>关闭执行框</code>：esc</li><li><code>移动位置</code>：ctrl+拖动输入框</li></ul><p>支持 shell：</p><ul><li><code>cmd/bash</code>：windows 或 Mac 的默认终端</li><li><code>powershell</code>：微软的傻儿子 :D</li><li><code>git bash</code>：使用此终端前请保证安装了 git bash 并且加入环境变量</li><li><code>wsl</code>：使用此终端前请保证安装了 wsl2，并且加入环境变量</li></ul><p>内置环境变量：</p><ul><li><code>$f</code>：当前文件路径</li><li><code>$d</code>：当前文件的所属目录</li><li><code>$m</code>：当前挂载的根目录</li></ul><p>支持内建命令，方便快速调用。个人可按需自定义配置文件里的 <code>BUILTIN</code> 选项。</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-comment"># 默认的内建命令</span><br><span class="hljs-comment"># 目前支持4个参数:</span><br><span class="hljs-comment">#   1. name:   展示的名称（不可重复）</span><br><span class="hljs-comment">#   2. shell:  cmd/bash、powershell、gitbash、wsl</span><br><span class="hljs-comment">#   3. hotkey: 快捷键（可选）</span><br><span class="hljs-comment">#   4. cmd:    执行的命令</span><br><span class="hljs-attribute">BUILTIN</span> = [<br>    &#123; <span class="hljs-attribute">name</span> = <span class="hljs-string">&quot;&quot;</span>, shell = <span class="hljs-string">&quot;cmd/bash&quot;</span>, cmd = <span class="hljs-string">&quot;&quot;</span> &#125;,<br>    &#123; <span class="hljs-attribute">name</span> = <span class="hljs-string">&quot;Explorer&quot;</span>, shell = <span class="hljs-string">&quot;powershell&quot;</span>, hotkey = <span class="hljs-string">&quot;ctrl+alt+e&quot;</span>, cmd = <span class="hljs-string">&quot;explorer <span class="hljs-variable">$d</span>&quot;</span> &#125;,<br>    &#123; <span class="hljs-attribute">name</span> = <span class="hljs-string">&quot;Vscode&quot;</span>, shell = <span class="hljs-string">&quot;cmd/bash&quot;</span>,  cmd = <span class="hljs-string">&quot;code <span class="hljs-variable">$f</span>&quot;</span> &#125;,<br>    &#123; <span class="hljs-attribute">name</span> = <span class="hljs-string">&quot;WT&quot;</span>, shell = <span class="hljs-string">&quot;cmd/bash&quot;</span>,  cmd = <span class="hljs-string">&quot;cd <span class="hljs-variable">$d</span> &amp;&amp; wt&quot;</span> &#125;,<br>    &#123; <span class="hljs-attribute">name</span> = <span class="hljs-string">&quot;GitCommit&quot;</span>, shell = <span class="hljs-string">&quot;cmd/bash&quot;</span>,  cmd = <span class="hljs-string">&#x27;cd <span class="hljs-variable">$m</span> &amp;&amp; git add . &amp;&amp; git commit -m &quot;update&quot;&#x27;</span> &#125;,<br>]<br></code></pre></td></tr></table></figure><p><a href="https://github.com/obgnail/typora_plugin/blob/master/assets/commander.gif"><img src="https://github.com/obgnail/typora_plugin/raw/master/assets/commander.gif" alt="commander"></a></p><h3 id="mindmap：根据文档大纲一键生成思维导图"><a href="#mindmap：根据文档大纲一键生成思维导图" class="headerlink" title="mindmap：根据文档大纲一键生成思维导图"></a>mindmap：根据文档大纲一键生成思维导图</h3><p>功能：根据文档大纲一键生成 mermaid 思维导图</p><p>使用方式：右键菜单 -&gt; 常用插件 -&gt; 思维导图</p><p><a href="https://github.com/obgnail/typora_plugin/blob/master/assets/mindmap.gif"><img src="https://github.com/obgnail/typora_plugin/raw/master/assets/mindmap.gif" alt="mindmap"></a></p><h3 id="markmap：提供-markmap-支持"><a href="#markmap：提供-markmap-支持" class="headerlink" title="markmap：提供 markmap 支持"></a>markmap：提供 markmap 支持</h3><p>使用方式：</p><ul><li>方式一：右键菜单 -&gt; 少用插件 -&gt; markmap</li><li>方式二：直接点击右下角的 markmap 按钮</li></ul><p><a href="https://github.com/obgnail/typora_plugin/blob/master/assets/markmap.gif"><img src="https://github.com/obgnail/typora_plugin/raw/master/assets/markmap.gif" alt="markmap"></a></p><h3 id="toolbar：多功能搜索"><a href="#toolbar：多功能搜索" class="headerlink" title="toolbar：多功能搜索"></a>toolbar：多功能搜索</h3><p>功能：类似于 vscode 的 ctrl+shift+p 功能</p><p>使用方式：</p><ul><li>方式一：右键菜单 -&gt; 少用插件 -&gt; 多功能搜索</li><li>方式二：快捷键 <code>ctrl+j</code></li></ul><p>支持搜索：</p><ul><li><code>his</code>：最新打开过的文件</li><li><code>plu</code>：插件</li><li><code>tab</code>：打开的标签页</li><li><code>ops</code>：常用操作</li><li><code>out</code>：文档大纲</li><li><code>mode</code>：切换文件模式</li><li><code>theme</code>：临时切换主题</li><li><code>func</code>：功能列表</li><li><code>all</code>：混合查找（所有项目都混在一起查找）</li></ul><p>键入内容说明：</p><ul><li>键入内容 &#x3D; 搜索工具名称 + 空格 + 搜索内容</li><li>支持 <code>交集查询</code>、<code>差集查询</code>，并且可以随意组合（类似于 google 的正负向查询）</li></ul><p>举例：</p><ul><li><code>his node learn</code>：查找最近打开的文件，要求文件标题【包含 node 和 learn 两个关键字】</li><li><code>plu multi -search</code>：查找插件，要求插件名【包含 multi 关键字，但是不包含 search 关键字】</li><li><code>tab -messing</code>：查找所有打开的标签页，要求标签页名称【不包含 messing 关键字】</li><li><code>his close -win -mark 标签</code>：查找最近打开的文件，要求文件标题【包含 close、标签，不包含 win、mark】</li></ul><p><a href="https://github.com/obgnail/typora_plugin/blob/master/assets/toolbar.gif"><img src="https://github.com/obgnail/typora_plugin/raw/master/assets/toolbar.gif" alt="toolbar"></a></p><h3 id="right-click-menu：右键菜单统一管理插件"><a href="#right-click-menu：右键菜单统一管理插件" class="headerlink" title="right_click_menu：右键菜单统一管理插件"></a>right_click_menu：右键菜单统一管理插件</h3><p>所有插件都支持在右键菜单中直接调用。鼠标党可以将右键菜单作为所有插件的主要调用方式。</p><p>可以通过修改配置文件自定义右键菜单：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-comment">#  每一个MENUS对应一个一级菜单，允许无限添加一级菜单，允许重复添加同一个插件</span><br><span class="hljs-comment">#  NAME: 一级菜单的名称</span><br><span class="hljs-comment">#  LIST: 二级菜单的插件列表（使用&quot;---&quot;代表在页面上插入一个divider，以作分隔）</span><br><span class="hljs-section">[[right_click_menu.MENUS]]</span><br><span class="hljs-attr">NAME</span> = <span class="hljs-string">&quot;少用插件&quot;</span><br><span class="hljs-attr">LIST</span> = [<br>    <span class="hljs-string">&quot;window_tab&quot;</span>, <span class="hljs-string">&quot;resize_image&quot;</span>, <span class="hljs-string">&quot;resize_table&quot;</span>, <span class="hljs-string">&quot;fence_enhance&quot;</span>, <span class="hljs-string">&quot;export_enhance&quot;</span>,<br>    <span class="hljs-string">&quot;datatables&quot;</span>, <span class="hljs-string">&quot;markmap&quot;</span>, <span class="hljs-string">&quot;auto_number&quot;</span>, <span class="hljs-string">&quot;truncate_text&quot;</span>, <span class="hljs-string">&quot;right_click_menu&quot;</span>,<br>    <span class="hljs-string">&quot;---&quot;</span>,<br>    <span class="hljs-string">&quot;blur&quot;</span>, <span class="hljs-string">&quot;go_top&quot;</span>, <span class="hljs-string">&quot;text_stylize&quot;</span>, <span class="hljs-string">&quot;toolbar&quot;</span>,<br>    <span class="hljs-string">&quot;---&quot;</span>,<br>    <span class="hljs-string">&quot;file_counter&quot;</span>, <span class="hljs-string">&quot;test&quot;</span>,<br>]<br><span class="hljs-section">[[right_click_menu.MENUS]]</span><br><span class="hljs-attr">NAME</span> = <span class="hljs-string">&quot;常用插件&quot;</span><br><span class="hljs-attr">LIST</span> = [<br>    <span class="hljs-string">&quot;commander&quot;</span>, <span class="hljs-string">&quot;mindmap&quot;</span>, <span class="hljs-string">&quot;collapse_paragraph&quot;</span>, <span class="hljs-string">&quot;custom&quot;</span>,<br>    <span class="hljs-string">&quot;---&quot;</span>,<br>    <span class="hljs-string">&quot;search_multi&quot;</span>, <span class="hljs-string">&quot;multi_highlighter&quot;</span>, <span class="hljs-string">&quot;outline&quot;</span>, <span class="hljs-string">&quot;md_padding&quot;</span>, <span class="hljs-string">&quot;read_only&quot;</span>,<br>]<br></code></pre></td></tr></table></figure><h3 id="pie-menu：圆盘菜单"><a href="#pie-menu：圆盘菜单" class="headerlink" title="pie_menu：圆盘菜单"></a>pie_menu：圆盘菜单</h3><p>使用方式：</p><ul><li><code>弹出圆盘菜单</code>：Ctrl+鼠标右键</li><li><code>旋转圆盘菜单</code>：鼠标中键</li><li><code>固定圆盘菜单，圆盘不再自动消失</code>：鼠标左键圆心</li><li><code>展开圆盘菜单，圆盘不再自动收缩</code>：鼠标右键圆心</li></ul><h3 id="preferences：启停插件"><a href="#preferences：启停插件" class="headerlink" title="preferences：启停插件"></a>preferences：启停插件</h3><p>使用方式：右键菜单 -&gt; 少用插件 -&gt; 启停插件</p><h3 id="echarts：提供-echarts-支持"><a href="#echarts：提供-echarts-支持" class="headerlink" title="echarts：提供 echarts 支持"></a>echarts：提供 echarts 支持</h3><p>使用方式：右键菜单 -&gt; 常用插件 -&gt; 二级插件 -&gt; 插入 echarts</p><p><a href="https://github.com/obgnail/typora_plugin/blob/master/assets/echarts.png"><img src="https://github.com/obgnail/typora_plugin/raw/master/assets/echarts.png" alt="echats"></a></p><h3 id="chart：提供-chartjs-支持"><a href="#chart：提供-chartjs-支持" class="headerlink" title="chart：提供 chartjs 支持"></a>chart：提供 chartjs 支持</h3><p>使用方式：右键菜单 -&gt; 常用插件 -&gt; 二级插件 -&gt; 插入 chart</p><p><a href="https://github.com/obgnail/typora_plugin/blob/master/assets/chart.png"><img src="https://github.com/obgnail/typora_plugin/raw/master/assets/chart.png" alt="chart"></a></p><h3 id="abc：提供-abc-组件支持"><a href="#abc：提供-abc-组件支持" class="headerlink" title="abc：提供 abc 组件支持"></a>abc：提供 abc 组件支持</h3><p><a href="https://github.com/obgnail/typora_plugin/blob/master/assets/abcjs.png"><img src="https://github.com/obgnail/typora_plugin/raw/master/assets/abcjs.png" alt="abcjs"></a></p><h3 id="calendar：-提供-tui-calendar-组件支持"><a href="#calendar：-提供-tui-calendar-组件支持" class="headerlink" title="calendar： 提供 tui.calendar 组件支持"></a>calendar： 提供 tui.calendar 组件支持</h3><p>使用方式：右键菜单 -&gt; 常用插件 -&gt; 二级插件 -&gt; 插入 calendar</p><p><a href="https://github.com/obgnail/typora_plugin/blob/master/assets/calendar.png"><img src="https://github.com/obgnail/typora_plugin/raw/master/assets/calendar.png" alt="calendar"></a></p><h3 id="marp：提供-marp-组件支持"><a href="#marp：提供-marp-组件支持" class="headerlink" title="marp：提供 marp 组件支持"></a>marp：提供 marp 组件支持</h3><p>功能：使用 markdown 做 PPT。</p><p>使用方式：右键菜单 -&gt; 常用插件 -&gt; 二级插件 -&gt; 插入 marp</p><h3 id="callouts：-提供-callouts-支持"><a href="#callouts：-提供-callouts-支持" class="headerlink" title="callouts： 提供 callouts 支持"></a>callouts： 提供 callouts 支持</h3><p>使用方式：右键菜单 -&gt; 常用插件 -&gt; 二级插件 -&gt; 插入 callouts</p><p><a href="https://github.com/obgnail/typora_plugin/blob/master/assets/callouts.png"><img src="https://github.com/obgnail/typora_plugin/raw/master/assets/callouts.png" alt="callouts"></a></p><p>数量、类型、颜色、icon 皆可自己定义，请前往配置文件修改：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[[callouts.config.list]]</span><br><span class="hljs-attr">type</span> = <span class="hljs-string">&quot;note&quot;</span><br><span class="hljs-attr">background_color</span> = <span class="hljs-string">&quot;#e1d1eb&quot;</span><br><span class="hljs-attr">left_line_color</span> = <span class="hljs-string">&quot;#6a1b9a&quot;</span><br><span class="hljs-attr">icon</span> = <span class="hljs-string">&quot;\\f040&quot;</span><br></code></pre></td></tr></table></figure><h3 id="kanban：看板"><a href="#kanban：看板" class="headerlink" title="kanban：看板"></a>kanban：看板</h3><p>拓展代码语法，添加看板功能。</p><p><a href="https://github.com/obgnail/typora_plugin/blob/master/assets/kanban.png"><img src="https://github.com/obgnail/typora_plugin/raw/master/assets/kanban.png" alt="kanban"></a></p><h3 id="timeline：时间线"><a href="#timeline：时间线" class="headerlink" title="timeline：时间线"></a>timeline：时间线</h3><p>拓展代码语法，添加时间线功能。</p><p><a href="https://github.com/obgnail/typora_plugin/blob/master/assets/timeline.png"><img src="https://github.com/obgnail/typora_plugin/raw/master/assets/timeline.png" alt="timeline"></a></p><h3 id="chat：聊天"><a href="#chat：聊天" class="headerlink" title="chat：聊天"></a>chat：聊天</h3><p>拓展代码语法，添加聊天功能。</p><p><a href="https://github.com/obgnail/typora_plugin/blob/master/assets/chat.png"><img src="https://github.com/obgnail/typora_plugin/raw/master/assets/chat.png" alt="chat"></a></p><h3 id="text-stylize：文字风格化"><a href="#text-stylize：文字风格化" class="headerlink" title="text_stylize：文字风格化"></a>text_stylize：文字风格化</h3><p>功能：将文字转为 html 格式，改变文字样式。</p><p>使用方式：右键菜单 -&gt; 少用插件 -&gt; 文字风格化。</p><p><a href="https://github.com/obgnail/typora_plugin/blob/master/assets/text_stylize.gif"><img src="https://github.com/obgnail/typora_plugin/raw/master/assets/text_stylize.gif" alt="text_stylize"></a></p><h3 id="read-only：只读模式"><a href="#read-only：只读模式" class="headerlink" title="read_only：只读模式"></a>read_only：只读模式</h3><p>功能：只读模式下文档不可编辑（开启后，右下角数字统计区域会出现 <code>ReadOnly</code> 字样）</p><p>快捷键：ctrl+shift+R</p><h3 id="blur：模糊模式"><a href="#blur：模糊模式" class="headerlink" title="blur：模糊模式"></a>blur：模糊模式</h3><p>功能：开启后，只有当前聚焦的组件可见，其余模糊。可以用于防偷窥。</p><p>使用方式：右键菜单 -&gt; 少用插件 -&gt; 模糊模式</p><blockquote><p>此插件只能于正式版 Typora 使用。</p></blockquote><h3 id="file-counter：显示文件数"><a href="#file-counter：显示文件数" class="headerlink" title="file_counter：显示文件数"></a>file_counter：显示文件数</h3><p><a href="https://github.com/obgnail/typora_plugin/blob/master/assets/file_count.png"><img src="https://github.com/obgnail/typora_plugin/raw/master/assets/file_count.png" alt="file_count"></a></p><h3 id="outline：以表格、图片、代码块形式的大纲"><a href="#outline：以表格、图片、代码块形式的大纲" class="headerlink" title="outline：以表格、图片、代码块形式的大纲"></a>outline：以表格、图片、代码块形式的大纲</h3><p>使用方式：右键菜单 -&gt; 常用插件 -&gt; 类别大纲</p><p><a href="https://github.com/obgnail/typora_plugin/blob/master/assets/outline.gif"><img src="https://github.com/obgnail/typora_plugin/raw/master/assets/outline.gif" alt="outline"></a></p><h3 id="auto-number：自动编号"><a href="#auto-number：自动编号" class="headerlink" title="auto_number：自动编号"></a>auto_number：自动编号</h3><p><a href="https://github.com/obgnail/typora_plugin/blob/master/assets/auto_number.png"><img src="https://github.com/obgnail/typora_plugin/raw/master/assets/auto_number.png" alt="auto_number"></a></p><p>支持编号的组件（皆可临时或永久打开&#x2F;关闭）：</p><ol><li>标题</li><li>大纲</li><li>TOC</li><li>表格</li><li>图片</li><li>代码块</li></ol><blockquote><p>注意：通过注入 CSS 实现此功能，有可能会与你使用的 theme 冲突。</p></blockquote><blockquote><p>和其他使用 Theme CSS 的实现方式不同，此插件通过修改内置函数，完美解决导出 PDF 后侧边栏没有编号的问题 :)</p></blockquote><blockquote><p>根据 <a href="https://learn.microsoft.com/en-us/powershell/scripting/community/contributing/general-markdown?view=powershell-7.3">Markdown 最佳实践</a>，一篇文档应该 <strong>有且仅有</strong> 一个 h1，故此插件从 h2 开始编号。</p></blockquote><h3 id="imageReviewer：图片查看器"><a href="#imageReviewer：图片查看器" class="headerlink" title="imageReviewer：图片查看器"></a>imageReviewer：图片查看器</h3><p>功能：一站式图片查看，并且提供简单图片编辑。</p><p>使用方式：</p><ul><li>方式一：点击右下角【查看图片】按钮</li><li>方式二：右键菜单 -&gt; 常用插件 -&gt; 二级插件 -&gt; 图片查看器</li></ul><p><a href="https://github.com/obgnail/typora_plugin/blob/master/assets/image-reviewer.png"><img src="https://github.com/obgnail/typora_plugin/raw/master/assets/image-reviewer.png" alt="image-reviewer"></a></p><h3 id="chineseSymbolAutoPairer：中文符号自动补全"><a href="#chineseSymbolAutoPairer：中文符号自动补全" class="headerlink" title="chineseSymbolAutoPairer：中文符号自动补全"></a>chineseSymbolAutoPairer：中文符号自动补全</h3><p>功能：输入 <code>《 【 （ ‘ “ 「</code> 符号时自动补全。</p><h3 id="datatables：表格增强"><a href="#datatables：表格增强" class="headerlink" title="datatables：表格增强"></a>datatables：表格增强</h3><p>功能：增强表格。提供搜索、过滤、分页、排序等功能。</p><blockquote><p>使用方式：将光标定位在表格 -&gt; 右键菜单 -&gt; 少用插件 -&gt; 表格增强。</p></blockquote><p><a href="https://github.com/obgnail/typora_plugin/blob/master/assets/datatables.png"><img src="https://github.com/obgnail/typora_plugin/raw/master/assets/datatables.png" alt="datatables"></a></p><p>其实此插件可以是提供开放能力的，实现类似于 obsidian 的 <code>dataview</code> 插件的功能。不过暂时不做，原因：</p><ol><li>私以为 Typora 的用户并不需要大量用到此功能。</li><li>需要用户熟悉 javascript 以及 dataTables.js 的 API。成本太高。</li><li>需要编写大量的配套代码。</li></ol><h3 id="resize-table：拖动调整表格大小"><a href="#resize-table：拖动调整表格大小" class="headerlink" title="resize_table：拖动调整表格大小"></a>resize_table：拖动调整表格大小</h3><p>功能：<code>ctrl+鼠标拖动</code>：修改表格的行高列宽。</p><p><a href="https://github.com/obgnail/typora_plugin/blob/master/assets/resize_table.gif"><img src="https://github.com/obgnail/typora_plugin/raw/master/assets/resize_table.gif" alt="resize_table"></a></p><h3 id="resize-image：调整图片大小"><a href="#resize-image：调整图片大小" class="headerlink" title="resize_image：调整图片大小"></a>resize_image：调整图片大小</h3><p>功能：<code>ctrl+鼠标滚轮滚动</code>：调整图片大小。</p><p><a href="https://github.com/obgnail/typora_plugin/blob/master/assets/resize-image.gif"><img src="https://github.com/obgnail/typora_plugin/raw/master/assets/resize-image.gif" alt="resize-image"></a></p><h3 id="export-enhance：导出增强"><a href="#export-enhance：导出增强" class="headerlink" title="export_enhance：导出增强"></a>export_enhance：导出增强</h3><p>功能：导出 html 时，将图片转为 base64，避免图片丢失。</p><h3 id="go-top：-一键到顶"><a href="#go-top：-一键到顶" class="headerlink" title="go_top： 一键到顶"></a>go_top： 一键到顶</h3><p>功能：在右下角添加一个一键到顶的按钮。</p><h3 id="reopenClosedFiles：打开上次退出-Typora-时尚未关闭的标签页"><a href="#reopenClosedFiles：打开上次退出-Typora-时尚未关闭的标签页" class="headerlink" title="reopenClosedFiles：打开上次退出 Typora 时尚未关闭的标签页"></a>reopenClosedFiles：打开上次退出 Typora 时尚未关闭的标签页</h3><p>功能：自动 或者 通过快捷键打开上一次退出 Typora 时尚未关闭的标签页</p><blockquote><p>此插件仅在 window_tab 启用时生效。</p></blockquote><h3 id="markdownLint：markdown-格式规范检测"><a href="#markdownLint：markdown-格式规范检测" class="headerlink" title="markdownLint：markdown 格式规范检测"></a>markdownLint：markdown 格式规范检测</h3><p>使用方式：</p><ul><li>方式一：右键菜单 -&gt; 常用插件 -&gt; 二级插件 -&gt; 格式规范检测</li><li>方式二：点击右上角的小方块</li></ul><h3 id="darkMode：夜间模式"><a href="#darkMode：夜间模式" class="headerlink" title="darkMode：夜间模式"></a>darkMode：夜间模式</h3><p>使用方式：右键菜单 -&gt; 常用插件 -&gt; 二级插件 -&gt; 夜间模式</p><h3 id="noImageMode：无图模式"><a href="#noImageMode：无图模式" class="headerlink" title="noImageMode：无图模式"></a>noImageMode：无图模式</h3><p>使用方式：右键菜单 -&gt; 常用插件 -&gt; 二级插件 -&gt; 无图模式</p><h3 id="pluginUpdater：一键升级插件"><a href="#pluginUpdater：一键升级插件" class="headerlink" title="pluginUpdater：一键升级插件"></a>pluginUpdater：一键升级插件</h3><p>使用方式：右键菜单 -&gt; 常用插件 -&gt; 二级插件 -&gt; 升级插件。</p><blockquote><p>众所周知，有些用户并不能裸连 github 下载最新插件，故提供了设置代理功能（默认为系统代理）</p></blockquote><h3 id="extractRangeToNewFile：提取选区文字到新文件"><a href="#extractRangeToNewFile：提取选区文字到新文件" class="headerlink" title="extractRangeToNewFile：提取选区文字到新文件"></a>extractRangeToNewFile：提取选区文字到新文件</h3><p>使用方式：选中一些文字 -&gt; 右键菜单 -&gt; 常用插件 -&gt; 二级插件 -&gt; 提取选区文字到新文件。</p><h3 id="fullPathCopy：复制标题路径"><a href="#fullPathCopy：复制标题路径" class="headerlink" title="fullPathCopy：复制标题路径"></a>fullPathCopy：复制标题路径</h3><p>使用方式：将光标定位到标题上 -&gt; 右键菜单 -&gt; 常用插件 -&gt; 二级插件 -&gt; 复制标题路径。</p><p>就会生成如下文字，并复制到剪切板：</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs livescript">README.md<span class="hljs-string">\Typora</span> Plugin 一级标题<span class="hljs-string">\插件使用说明</span> 二级标题<span class="hljs-string">\fullPathCopy：复制标题路径</span> 三级标题<br></code></pre></td></tr></table></figure><h3 id="autoTrailingWhiteSpace：为文档添加结尾空格"><a href="#autoTrailingWhiteSpace：为文档添加结尾空格" class="headerlink" title="autoTrailingWhiteSpace：为文档添加结尾空格"></a>autoTrailingWhiteSpace：为文档添加结尾空格</h3><p>使用方式：将光标定位到标题上 -&gt; 右键菜单 -&gt; 常用插件 -&gt; 二级插件 -&gt; 为文档添加结尾空格。</p><blockquote><p>根据严格的 Markdown 换行语法，需要在结尾添加两个空格以表示换行。此工具能一键添加空格。</p></blockquote><blockquote><p>此插件默认关闭，需手动开启。</p></blockquote><h3 id="redirectLocalRootUrl：重定向本地资源根目录"><a href="#redirectLocalRootUrl：重定向本地资源根目录" class="headerlink" title="redirectLocalRootUrl：重定向本地资源根目录"></a>redirectLocalRootUrl：重定向本地资源根目录</h3><p>功能：如果你主要使用 obsidian 或 joplin 来管理文件，偶尔用 typora 打开文件。就会遇到一个问题：obsidian 或 joplin 都是将本地资源放在同一个目录中（vault），这导致在 typora 打开后文件由于路径错误，无法访问本地资源。此插件就是为了解决此问题，重定向本地资源根目录。</p><blockquote><p>此插件默认关闭，需手动开启。</p></blockquote><p>使用此插件前需要设置如下配置选项：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-comment"># 资源根目录，支持绝对路径(如D:\\tmp\\img)和相对路径(如.\\assets)，填写时请注意转义反斜线（若为空，则此插件失效）</span><br><span class="hljs-attr">root</span> = <span class="hljs-string">&quot;./&quot;</span><br><span class="hljs-comment"># 过滤的正则表达式：只有文件路径命中filter_regexp匹配的文件才使用此插件（若为空，则全部文件都使用此插件）</span><br><span class="hljs-attr">filter_regexp</span> = <span class="hljs-string">&quot;&quot;</span><br></code></pre></td></tr></table></figure><h3 id="blockSideBySide：并列显示活动块"><a href="#blockSideBySide：并列显示活动块" class="headerlink" title="blockSideBySide：并列显示活动块"></a>blockSideBySide：并列显示活动块</h3><p>功能：活动块默认是上下显示，改为并列显示。</p><p><a href="https://github.com/obgnail/typora_plugin/blob/master/assets/blockSideBySide.png"><img src="https://github.com/obgnail/typora_plugin/raw/master/assets/blockSideBySide.png" alt="blockSideBySide"></a></p><blockquote><p>注意：通过注入 CSS 实现此功能，有可能会与你使用的 theme 冲突。</p></blockquote><blockquote><p>此插件默认关闭，需手动开启。</p></blockquote><h3 id="openInTotalCommander：在-total-commander-打开当前文件"><a href="#openInTotalCommander：在-total-commander-打开当前文件" class="headerlink" title="openInTotalCommander：在 total commander 打开当前文件"></a>openInTotalCommander：在 total commander 打开当前文件</h3><p>使用方式：将光标定位到标题上 -&gt; 右键菜单 -&gt; 常用插件 -&gt; 二级插件 -&gt; TC 打开。</p><blockquote><p>使用此插件前，需要您在配置手动修改 TC 的安装路径。</p></blockquote><blockquote><p>此插件默认关闭，需手动开启。</p></blockquote><h3 id="scrollBookmarker：-书签管理器"><a href="#scrollBookmarker：-书签管理器" class="headerlink" title="scrollBookmarker： 书签管理器"></a>scrollBookmarker： 书签管理器</h3><p>使用方式：</p><ol><li>使用 alt+click 正文内容，打上书签。</li><li>接着调出书签管理器，点击上面的书签，即可跳转到书签。</li></ol><p>调出书签管理器：</p><ul><li>方式一：右键菜单 -&gt; 常用插件 -&gt; 二级插件 -&gt; 书签管理器</li><li>方式二：点击右下角的【书签管理器】按钮</li></ul><h3 id="bingSpeech：必应朗读"><a href="#bingSpeech：必应朗读" class="headerlink" title="bingSpeech：必应朗读"></a>bingSpeech：必应朗读</h3><p>使用方式：鼠标框选一小段文字 -&gt; 右键菜单 -&gt; 常用插件 -&gt; 二级插件 -&gt; 必应朗读</p><p>实现原理：采用爬虫技术，盗取必应翻译的播放语音功能</p><blockquote><p>注意：功能完全依赖于外部环境，因此不能保证成功。开发者一时兴起做的，仅作娱乐使用。</p></blockquote><h3 id="help：-用户帮助"><a href="#help：-用户帮助" class="headerlink" title="help： 用户帮助"></a>help： 用户帮助</h3><p>使用方式：右键菜单 -&gt; 少用插件 -&gt; 帮助。</p><h3 id="cipher：加密文件"><a href="#cipher：加密文件" class="headerlink" title="cipher：加密文件"></a>cipher：加密文件</h3><p>使用方式：右键菜单 -&gt; 少用插件 -&gt; 加密文件。</p><h3 id="truncate-text：暂时隐藏内容，提高大文件渲染性能"><a href="#truncate-text：暂时隐藏内容，提高大文件渲染性能" class="headerlink" title="truncate_text：暂时隐藏内容，提高大文件渲染性能"></a>truncate_text：暂时隐藏内容，提高大文件渲染性能</h3><p>功能：大文件在 Typora 的渲染性能很糟糕，用此插件暂时隐藏内容（只是隐藏显示，不修改文件），提高渲染性能。也可以用于防偷窥。</p><p>使用方式：右键菜单 -&gt; 少用插件 -&gt; 文本截断。</p><p>包含的功能如下：</p><ul><li>隐藏最前面：隐藏最前面的文本段，只留下最后 80 段。</li><li>重新显示：重新显示之前隐藏的所有文本段。</li><li>根据当前可视范围显示：根据当前可视范围显示文本段。</li></ul><blockquote><p>原理：通过设置 DOM 元素的 display 样式为 none 来隐藏元素，让元素不占用渲染树中的位置，对隐藏的元素操作不会引发其他元素的重排。</p></blockquote><blockquote><p>collapse_paragraph （章节折叠功能）可以很好的替代此插件，建议使用 collapse_paragraph。此插件默认关闭，需手动开启。</p></blockquote><h3 id="ripgrep：使用-ripgrep-搜索文件"><a href="#ripgrep：使用-ripgrep-搜索文件" class="headerlink" title="ripgrep：使用 ripgrep 搜索文件"></a>ripgrep：使用 ripgrep 搜索文件</h3><p>Typora 自带 ripgrep。此插件支持使用内建的 ripgrep 进行文件搜索。</p><blockquote><p>使用此插件需要您熟悉 ripgrep 工具。此插件默认关闭，需手动开启。</p></blockquote><h3 id="hotkeyHub：快捷键注册中心（高级）"><a href="#hotkeyHub：快捷键注册中心（高级）" class="headerlink" title="hotkeyHub：快捷键注册中心（高级）"></a>hotkeyHub：快捷键注册中心（高级）</h3><blockquote><p>此插件是高级插件，仅对有 javascript 基础的用户开放。</p></blockquote><p>功能：以声明的形式，为【任意插件系统函数】或【任意自定义函数】绑定快捷键。</p><p>具体使用请参考 <a href="https://github.com/obgnail/typora_plugin/blob/master/plugin/global/settings/hotkey.default.toml">hotkey.default.toml</a>。</p><h3 id="quickButton：于右下角添加功能按钮（高级）"><a href="#quickButton：于右下角添加功能按钮（高级）" class="headerlink" title="quickButton：于右下角添加功能按钮（高级）"></a>quickButton：于右下角添加功能按钮（高级）</h3><blockquote><p>此插件是高级插件，仅对有 javascript 基础的用户开放。</p></blockquote><p>功能和 hotkeyHub 类似，以声明的形式，为【任意插件系统函数】设置快捷按钮。</p><h3 id="custom：开放平台，用户自定义插件（高级）"><a href="#custom：开放平台，用户自定义插件（高级）" class="headerlink" title="custom：开放平台，用户自定义插件（高级）"></a>custom：开放平台，用户自定义插件（高级）</h3><blockquote><p>此插件是高级插件，仅对有 javascript 基础的用户开放。</p></blockquote><p>功能：提供开放能力，支持用户自己写插件。</p><p>具体使用请参考 <a href="https://github.com/obgnail/typora_plugin/blob/master/plugin/custom/%E8%AF%B7%E8%AF%BB%E6%88%91.md">请读我.md</a>。</p><h3 id="json-rpc：外部操纵-Typora（高级）"><a href="#json-rpc：外部操纵-Typora（高级）" class="headerlink" title="json_rpc：外部操纵 Typora（高级）"></a>json_rpc：外部操纵 Typora（高级）</h3><p>功能：将包括 typora-plugin 所有功能在内的一切能力通过 <code>json-rpc</code> 的形式暴露出去，以供外部操纵 Typora。</p><p>具体使用请参考 <a href="https://github.com/obgnail/typora_plugin/blob/master/plugin/json_rpc/%E8%AF%B7%E8%AF%BB%E6%88%91.md">请读我.md</a>。</p><blockquote><p>此插件是高级插件，默认关闭，需手动开启，且仅对开发人员开放。</p><p>开启此插件后，外部将拥有 node、browser 两套环境，能完全控制电脑，因此如果您不是开发人员，请勿开启此插件。</p></blockquote><h3 id="article-uploader：上传博客文章"><a href="#article-uploader：上传博客文章" class="headerlink" title="article_uploader：上传博客文章"></a>article_uploader：上传博客文章</h3><p>功能：用户点击或者使用快捷键触发当前文章的自动发布功能，程序根据用户配置自动发布博客文章到各大平台</p><p>具体使用参考： <a href="https://github.com/obgnail/typora_plugin/blob/master/plugin/uploadArticle/%E8%AF%B7%E8%AF%BB%E6%88%91.md">请读我.md</a>。以上传到 CSDN 为例，Gif 图如下：</p><p><a href="https://camo.githubusercontent.com/d7980a765e722edb55fef61e49cae19a2263f5107d3b7f96eb543174c62ed661/68747470733a2f2f6d792d706963747572652d626564312d313332313130303230312e636f732e61702d6265696a696e672e6d7971636c6f75642e636f6d2f6d7970696374757265732f4353444e2545362538382539302545352538412539462545362542432539342545372541342542412e676966"><img src="https://camo.githubusercontent.com/d7980a765e722edb55fef61e49cae19a2263f5107d3b7f96eb543174c62ed661/68747470733a2f2f6d792d706963747572652d626564312d313332313130303230312e636f732e61702d6265696a696e672e6d7971636c6f75642e636f6d2f6d7970696374757265732f4353444e2545362538382539302545352538412539462545362542432539342545372541342542412e676966" alt="CSDN 成功演示"></a></p><h2 id="小众软件推荐"><a href="#小众软件推荐" class="headerlink" title="小众软件推荐"></a>小众软件推荐</h2><p><a href="https://www.appinn.com/typora-4-plugin/">通过注入 js 代码，为 Typora 额外增加 4 个功能</a></p><blockquote><p>第一次上榜小众软件，心情非常冲动。同时祝小众软件越办越好。</p></blockquote><p><a href="https://github.com/obgnail/typora_plugin/blob/master/assets/appinn.png"><img src="https://github.com/obgnail/typora_plugin/raw/master/assets/appinn.png" alt="appinn"></a></p><h2 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h2><ul><li>Apache：<a href="https://echarts.apache.org/zh/index.html">ECharts</a></li><li>MIT：<a href="https://markmap.js.org/">markmap</a> | <a href="https://www.chartjs.org/">Chart.js</a> | <a href="https://github.com/paulrosen/abcjs">abcjs</a> | <a href="https://github.com/nhn/tui.calendar">tui.calendar</a> | <a href="https://marp.app/">Marp</a> | <a href="https://github.com/DataTables/DataTables">DataTables</a> | <a href="https://github.com/DavidAnson/markdownlint">markdownlint</a></li><li>no-licence：<a href="https://github.com/gatziourasd/typora-tabbar-plugin">typora-tabbar-plugin</a> | <a href="https://github.com/gruvw/typora-side-by-side">typora-side-by-side</a> | <a href="https://github.com/harttle/md-padding">md-padding</a></li></ul><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>本人并非前端开发，前端技术全靠 Google，JS&#x2F;CSS 写的很烂。</p><p><strong>本项目遵循 MIT 协议，请自由地享受。</strong></p><p>如果对各位有用的话，欢迎 star ⭐，欢迎推荐给你志同道合的朋友使用。</p><h2 id="About"><a href="#About" class="headerlink" title="About"></a>About</h2><p>Typora plugin. Feature enhancement tool | Typora 插件，功能增强工具</p><h3 id="Topics"><a href="#Topics" class="headerlink" title="Topics"></a>Topics</h3><p><a href="https://github.com/topics/electron">electron</a> <a href="https://github.com/topics/nodejs">nodejs</a> <a href="https://github.com/topics/plugin">plugin</a> <a href="https://github.com/topics/markdown">markdown</a> <a href="https://github.com/topics/scripts">scripts</a> <a href="https://github.com/topics/typora">typora</a> <a href="https://github.com/topics/hijacking">hijacking</a> <a href="https://github.com/topics/typora-plugin">typora-plugin</a> <a href="https://github.com/topics/typora-extension">typora-extension</a></p><h3 id="Resources"><a href="#Resources" class="headerlink" title="Resources"></a>Resources</h3><p><a href="https://github.com/obgnail/typora_plugin?tab=readme-ov-file#readme-ov-file"> Readme</a></p><h3 id="License"><a href="#License" class="headerlink" title="License"></a>License</h3><p><a href="https://github.com/obgnail/typora_plugin?tab=readme-ov-file#MIT-1-ov-file"> MIT license</a></p><p><a href="https://github.com/obgnail/typora_plugin/activity"> Activity</a></p><h3 id="Stars"><a href="#Stars" class="headerlink" title="Stars"></a>Stars</h3><p><a href="https://github.com/obgnail/typora_plugin/stargazers"> <strong>1.3k</strong> stars</a></p><h3 id="Watchers"><a href="#Watchers" class="headerlink" title="Watchers"></a>Watchers</h3><p><a href="https://github.com/obgnail/typora_plugin/watchers"> <strong>10</strong> watching</a></p><h3 id="Forks"><a href="#Forks" class="headerlink" title="Forks"></a>Forks</h3><p><a href="https://github.com/obgnail/typora_plugin/forks"> <strong>72</strong> forks</a></p><p><a href="https://github.com/contact/report-content?content_url=https://github.com/obgnail/typora_plugin&report=obgnail+(user)">Report repository</a></p><h2 id="Releases-260"><a href="#Releases-260" class="headerlink" title="Releases 260"></a><a href="https://github.com/obgnail/typora_plugin/releases">Releases 260</a></h2><p>1.9.21Latest</p><p>6 hours ago</p><p><a href="https://github.com/obgnail/typora_plugin/releases">+ 259 releases</a></p><h2 id="Packages"><a href="#Packages" class="headerlink" title="Packages"></a><a href="https://github.com/users/obgnail/packages?repo_name=typora_plugin">Packages</a></h2><p>No packages published</p><h2 id="Contributors5"><a href="#Contributors5" class="headerlink" title="Contributors5"></a><a href="https://github.com/obgnail/typora_plugin/graphs/contributors">Contributors5</a></h2><ul><li><a href="https://github.com/obgnail"><img src="Typora%E6%8F%92%E4%BB%B6/48992887.jpeg" alt="@obgnail"></a></li><li><a href="https://github.com/RiftRays"><img src="Typora%E6%8F%92%E4%BB%B6/60778141.jpeg" alt="@RiftRays"></a></li><li><a href="https://github.com/AZCodingAccount"><img src="Typora%E6%8F%92%E4%BB%B6/145426558.jpeg" alt="@AZCodingAccount"></a></li><li><a href="https://github.com/QHQIII"><img src="Typora%E6%8F%92%E4%BB%B6/49380606.jpeg" alt="@QHQIII"></a></li><li><a href="https://github.com/jeffrey4l"><img src="Typora%E6%8F%92%E4%BB%B6/354768.jpeg" alt="@jeffrey4l"></a></li></ul><h2 id="Languages"><a href="#Languages" class="headerlink" title="Languages"></a>Languages</h2><ul><li><a href="https://github.com/obgnail/typora_plugin/search?l=javascript">JavaScript92.1%</a> </li><li><a href="https://github.com/obgnail/typora_plugin/search?l=css">CSS5.9%</a> </li><li><a href="https://github.com/obgnail/typora_plugin/search?l=go">Go2.0%</a></li></ul><h2 id="Footer"><a href="#Footer" class="headerlink" title="Footer"></a>Footer</h2>]]></content>
    
    
    <categories>
      
      <category>工具</category>
      
      <category>Markdown</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Typero</tag>
      
      <tag>破解</tag>
      
      <tag>Plugins</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>markdown语法</title>
    <link href="/post/37c6c5144c7e/"/>
    <url>/post/37c6c5144c7e/</url>
    
    <content type="html"><![CDATA[<blockquote><p>All in one 一站式Hexo配置优化教程！</p><ul><li>本文很长，特别长，快卡死编辑器了，如是被拆分为6篇文章了，见文末链接。</li><li>如果你遇到了什么问题，可以尝试搜索本文，你很可能有收获！ <code>CtRL + F</code>，还可以试试右上角菜单搜索功能。</li><li>欢迎光临博主的独立博客 <a href="https://blog.17lai.site/">夜法之书</a>，本文授权<code>CC4.0</code>非商用，转载请注明出处</li><li>本文就教你搭建一个美观实用的博客系统，步骤极尽详细！</li><li>本文中提到的大量特性，已经被博主提交到<a href="https://github.com/blinkfox/hexo-theme-matery">matery</a>主题develop分支，提交记录见<a href="https://github.com/blinkfox/hexo-theme-matery/commits?author=appotry">Commit</a>。所以下面很多特性已经不用自己修改了，可以直接使用。</li><li>参考列表放到了最后一篇末尾，去找找看，里面能发现很多好东西。</li><li>Tips：友情提示，部分内容RSS输出获取不到，请跳转到源网页地址浏览全文！</li></ul></blockquote><h2 id="选择Hexo的理由？"><a href="#选择Hexo的理由？" class="headerlink" title="选择Hexo的理由？"></a><strong>选择Hexo的理由</strong>？</h2><blockquote><p><strong>优点</strong></p><ul><li>中文支持：Hexo创建者是台湾人<a href="https://github.com/tommy351">Tommy Chen</a>，对中文支持很友好！</li><li>开源：Hexo开源，方便学习和修改</li><li>开源生态丰富：Hexo生态非常完善，各种插件极其丰富！而且基本全部免费、开源！</li><li>MarkDown友好：Hexo对Markdown支持非常完善，对比遍各种博客框架，hexo对Markdown支持最友好</li><li>方便部署：Hexo静态部署，不需要php,java之类的运行环境，方便各种部署环境，有很多免费的静态网页部署服务可用。不需要购买vps,就有各种免费的部署环境！最低0成本建立独立博客！</li><li>Git管理：所有文章和源码可以使用Git管理备份，方便保存和维护</li></ul><p><strong>缺点</strong></p><ul><li>对于初学者需要花费时间学习和配置：Hexo 基于 Node.js 开发，因此需要一定的技术水平和时间去学习和配置环境及插件等使用，但网上各种教程极其丰富。</li><li>功能不如动态网站丰富：相比于动态网站，Hexo 可以实现的功能相对有限，例如用户登录、评论系统等功能尚需其他工具或服务支持。</li><li>不利于频繁更改内容：由于 Hexo 是生成静态文件的方式，因此如果需要频繁更新网站内容，则需要重新构建整个网站并重新部署，这可能导致网站维护成本较高。</li><li>需要服务器来托管静态文件：虽然 Hexo 生成的静态文件可以直接访问，但仍需要一个服务器供其托管和发布，这可能会带来一些成本。</li></ul></blockquote><h2 id="写博客的重要性"><a href="#写博客的重要性" class="headerlink" title="写博客的重要性"></a>写博客的重要性</h2><p><strong>立德、立功、立言“三不朽”</strong></p><blockquote><p>《左传》载曰：“太上有立德，其次有立功，其次有立言，虽久不废，此之谓不朽。”</p><p>纸上得来终觉浅，绝知此事要躬行！赶紧跟着教程自己做一个独立博客吧！</p></blockquote><p><svg data="{&quot;t&quot;:&quot;root&quot;,&quot;d&quot;:0,&quot;v&quot;:&quot;&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[1,2]},&quot;v&quot;:&quot;1、对知识点总结、回顾、思考&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:4,&quot;p&quot;:{&quot;lines&quot;:[2,3]},&quot;v&quot;:&quot;A、写作整理资源，补充学习&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:4,&quot;p&quot;:{&quot;lines&quot;:[3,4]},&quot;v&quot;:&quot;B、加深对技术理解，不懂的，就会查阅资料&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:4,&quot;p&quot;:{&quot;lines&quot;:[4,5]},&quot;v&quot;:&quot;C、给自己的岁月留下痕迹&quot;}]},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[5,6]},&quot;v&quot;:&quot;2、帮助别人&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:4,&quot;p&quot;:{&quot;lines&quot;:[6,7]},&quot;v&quot;:&quot;A、别人通过你的博客学习到一些知识&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:4,&quot;p&quot;:{&quot;lines&quot;:[7,8]},&quot;v&quot;:&quot;B、帮助后来者节省时间&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:4,&quot;p&quot;:{&quot;lines&quot;:[8,9]},&quot;v&quot;:&quot;C、发表的网络文章会被收录如各种 AI 大模型，你的思想将影响未来世界！&quot;}]},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[9,10]},&quot;v&quot;:&quot;3、自己以后可能用得到&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:4,&quot;p&quot;:{&quot;lines&quot;:[10,11]},&quot;v&quot;:&quot;A、某天遇到同样的问题，可以快速翻阅查看&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:4,&quot;p&quot;:{&quot;lines&quot;:[11,12]},&quot;v&quot;:&quot;B、遇到同样的问题，记忆会很深刻&quot;}]},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[12,13]},&quot;v&quot;:&quot;4、提高个人知名度&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:4,&quot;p&quot;:{&quot;lines&quot;:[13,14]},&quot;v&quot;:&quot;A、通过写博客，整理思维，后续可以出书或者出视频&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:4,&quot;p&quot;:{&quot;lines&quot;:[14,15]},&quot;v&quot;:&quot;B、文章被大家阅读，有喜悦感，有一种认可感觉&quot;}]},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[15,16]},&quot;v&quot;:&quot;5、碎片化学习&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:4,&quot;p&quot;:{&quot;lines&quot;:[16,17]},&quot;v&quot;:&quot;整理成文，成体系，才不会淹没在碎片化学习中&quot;}]},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[17,18]},&quot;v&quot;:&quot;6、认识更多志同道合朋友&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[18,19]},&quot;v&quot;:&quot;7、提高个人的技术写作和思维能力&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:4,&quot;p&quot;:{&quot;lines&quot;:[19,20]},&quot;v&quot;:&quot;A、博客写的越多，思维越来越清晰&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:4,&quot;p&quot;:{&quot;lines&quot;:[20,21]},&quot;v&quot;:&quot;B、也可以提高快速解决问题的思维角度&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:4,&quot;p&quot;:{&quot;lines&quot;:[21,22]},&quot;v&quot;:&quot;C、说不定某一天整理出书&quot;}]},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[22,23]},&quot;v&quot;:&quot;8、除了自己，不会有别人审查你发布的文章，最大的言论自由&quot;}],&quot;p&quot;:{}}" class="mm-2m1920-1"><g class="mm-2m1920-1-g" transform="translate(217.02922707192317,171.53155387478586) scale(0.3158150673463604)"><path d="M80,8C120,8,120,-167.5,160,-167.5" stroke="rgb(255, 127, 14)" stroke-width="2"></path><path d="M80,8C120,8,120,-87.5,160,-87.5" stroke="rgb(140, 86, 75)" stroke-width="2"></path><path d="M80,8C120,8,120,-20,160,-20" stroke="rgb(23, 190, 207)" stroke-width="2"></path><path d="M80,8C120,8,120,35,160,35" stroke="rgb(44, 160, 44)" stroke-width="2"></path><path d="M80,8C120,8,120,77.5,160,77.5" stroke="rgb(140, 86, 75)" stroke-width="2"></path><path d="M80,8C120,8,120,107.5,160,107.5" stroke="rgb(127, 127, 127)" stroke-width="2"></path><path d="M80,8C120,8,120,132.5,160,132.5" stroke="rgb(188, 189, 34)" stroke-width="2"></path><path d="M80,8C120,8,120,187.5,160,187.5" stroke="rgb(44, 160, 44)" stroke-width="2"></path><path d="M391,-167.5C431,-167.5,431,-192.5,471,-192.5" stroke="rgb(44, 160, 44)" stroke-width="1.5"></path><path d="M391,-167.5C431,-167.5,431,-167.5,471,-167.5" stroke="rgb(214, 39, 40)" stroke-width="1.5"></path><path d="M391,-167.5C431,-167.5,431,-142.5,471,-142.5" stroke="rgb(148, 103, 189)" stroke-width="1.5"></path><path d="M265,-87.5C305,-87.5,305,-112.5,345,-112.5" stroke="rgb(227, 119, 194)" stroke-width="1.5"></path><path d="M265,-87.5C305,-87.5,305,-87.5,345,-87.5" stroke="rgb(127, 127, 127)" stroke-width="1.5"></path><path d="M265,-87.5C305,-87.5,305,-62.5,345,-62.5" stroke="rgb(188, 189, 34)" stroke-width="1.5"></path><path d="M345,-20C385,-20,385,-32.5,425,-32.5" stroke="rgb(31, 119, 180)" stroke-width="1.5"></path><path d="M345,-20C385,-20,385,-7.5,425,-7.5" stroke="rgb(255, 127, 14)" stroke-width="1.5"></path><path d="M314,35C354,35,354,22.5,394,22.5" stroke="rgb(214, 39, 40)" stroke-width="1.5"></path><path d="M314,35C354,35,354,47.5,394,47.5" stroke="rgb(148, 103, 189)" stroke-width="1.5"></path><path d="M281,77.5C321,77.5,321,77.5,361,77.5" stroke="rgb(227, 119, 194)" stroke-width="1.5"></path><path d="M425,132.5C465,132.5,465,107.5,505,107.5" stroke="rgb(23, 190, 207)" stroke-width="1.5"></path><path d="M425,132.5C465,132.5,465,132.5,505,132.5" stroke="rgb(31, 119, 180)" stroke-width="1.5"></path><path d="M425,132.5C465,132.5,465,157.5,505,157.5" stroke="rgb(255, 127, 14)" stroke-width="1.5"></path><g transform="translate(505, 137.5)"><rect x="-1" y="19.25" width="205" height="1.5" fill="rgb(255, 127, 14)"></rect><foreignObject class="mm-2m1920-1-fo" x="8" y="0" height="20" width="187" style="opacity: 1;"><div xmlns="http://www.w3.org/1999/xhtml" style="box-sizing: inherit; display: inline-block; font: 300 16px / 20px sans-serif; white-space: nowrap;">C、说不定某一天整理出书</div></foreignObject></g><g transform="translate(505, 112.5)"><rect x="-1" y="19.25" width="300" height="1.5" fill="rgb(31, 119, 180)"></rect><foreignObject class="mm-2m1920-1-fo" x="8" y="0" height="20" width="282" style="opacity: 1;"><div xmlns="http://www.w3.org/1999/xhtml" style="box-sizing: inherit; display: inline-block; font: 300 16px / 20px sans-serif; white-space: nowrap;">B、也可以提高快速解决问题的思维角度</div></foreignObject></g><g transform="translate(505, 87.5)"><rect x="-1" y="19.25" width="269" height="1.5" fill="rgb(23, 190, 207)"></rect><foreignObject class="mm-2m1920-1-fo" x="8" y="0" height="20" width="251" style="opacity: 1;"><div xmlns="http://www.w3.org/1999/xhtml" style="box-sizing: inherit; display: inline-block; font: 300 16px / 20px sans-serif; white-space: nowrap;">A、博客写的越多，思维越来越清晰</div></foreignObject></g><g transform="translate(361, 57.5)"><rect x="-1" y="19.25" width="354" height="1.5" fill="rgb(227, 119, 194)"></rect><foreignObject class="mm-2m1920-1-fo" x="8" y="0" height="20" width="336" style="opacity: 1;"><div xmlns="http://www.w3.org/1999/xhtml" style="box-sizing: inherit; display: inline-block; font: 300 16px / 20px sans-serif; white-space: nowrap;">整理成文，成体系，才不会淹没在碎片化学习中</div></foreignObject></g><g transform="translate(394, 27.5)"><rect x="-1" y="19.25" width="364" height="1.5" fill="rgb(148, 103, 189)"></rect><foreignObject class="mm-2m1920-1-fo" x="8" y="0" height="20" width="346" style="opacity: 1;"><div xmlns="http://www.w3.org/1999/xhtml" style="box-sizing: inherit; display: inline-block; font: 300 16px / 20px sans-serif; white-space: nowrap;">B、文章被大家阅读，有喜悦感，有一种认可感觉</div></foreignObject></g><g transform="translate(394, 2.5)"><rect x="-1" y="19.25" width="397" height="1.5" fill="rgb(214, 39, 40)"></rect><foreignObject class="mm-2m1920-1-fo" x="8" y="0" height="20" width="379" style="opacity: 1;"><div xmlns="http://www.w3.org/1999/xhtml" style="box-sizing: inherit; display: inline-block; font: 300 16px / 20px sans-serif; white-space: nowrap;">A、通过写博客，整理思维，后续可以出书或者出视频</div></foreignObject></g><g transform="translate(425, -27.5)"><rect x="-1" y="19.25" width="268" height="1.5" fill="rgb(255, 127, 14)"></rect><foreignObject class="mm-2m1920-1-fo" x="8" y="0" height="20" width="250" style="opacity: 1;"><div xmlns="http://www.w3.org/1999/xhtml" style="box-sizing: inherit; display: inline-block; font: 300 16px / 20px sans-serif; white-space: nowrap;">B、遇到同样的问题，记忆会很深刻</div></foreignObject></g><g transform="translate(425, -52.5)"><rect x="-1" y="19.25" width="333" height="1.5" fill="rgb(31, 119, 180)"></rect><foreignObject class="mm-2m1920-1-fo" x="8" y="0" height="20" width="315" style="opacity: 1;"><div xmlns="http://www.w3.org/1999/xhtml" style="box-sizing: inherit; display: inline-block; font: 300 16px / 20px sans-serif; white-space: nowrap;">A、某天遇到同样的问题，可以快速翻阅查看</div></foreignObject></g><g transform="translate(345, -82.5)"><rect x="-1" y="19.25" width="550" height="1.5" fill="rgb(188, 189, 34)"></rect><foreignObject class="mm-2m1920-1-fo" x="8" y="0" height="20" width="532" style="opacity: 1;"><div xmlns="http://www.w3.org/1999/xhtml" style="box-sizing: inherit; display: inline-block; font: 300 16px / 20px sans-serif; white-space: nowrap;">C、发表的网络文章会被收录如各种 AI 大模型，你的思想将影响未来世界！</div></foreignObject></g><g transform="translate(345, -107.5)"><rect x="-1" y="19.25" width="188" height="1.5" fill="rgb(127, 127, 127)"></rect><foreignObject class="mm-2m1920-1-fo" x="8" y="0" height="20" width="170" style="opacity: 1;"><div xmlns="http://www.w3.org/1999/xhtml" style="box-sizing: inherit; display: inline-block; font: 300 16px / 20px sans-serif; white-space: nowrap;">B、帮助后来者节省时间</div></foreignObject></g><g transform="translate(345, -132.5)"><rect x="-1" y="19.25" width="285" height="1.5" fill="rgb(227, 119, 194)"></rect><foreignObject class="mm-2m1920-1-fo" x="8" y="0" height="20" width="267" style="opacity: 1;"><div xmlns="http://www.w3.org/1999/xhtml" style="box-sizing: inherit; display: inline-block; font: 300 16px / 20px sans-serif; white-space: nowrap;">A、别人通过你的博客学习到一些知识</div></foreignObject></g><g transform="translate(471, -162.5)"><rect x="-1" y="19.25" width="205" height="1.5" fill="rgb(148, 103, 189)"></rect><foreignObject class="mm-2m1920-1-fo" x="8" y="0" height="20" width="187" style="opacity: 1;"><div xmlns="http://www.w3.org/1999/xhtml" style="box-sizing: inherit; display: inline-block; font: 300 16px / 20px sans-serif; white-space: nowrap;">C、给自己的岁月留下痕迹</div></foreignObject></g><g transform="translate(471, -187.5)"><rect x="-1" y="19.25" width="332" height="1.5" fill="rgb(214, 39, 40)"></rect><foreignObject class="mm-2m1920-1-fo" x="8" y="0" height="20" width="314" style="opacity: 1;"><div xmlns="http://www.w3.org/1999/xhtml" style="box-sizing: inherit; display: inline-block; font: 300 16px / 20px sans-serif; white-space: nowrap;">B、加深对技术理解，不懂的，就会查阅资料</div></foreignObject></g><g transform="translate(471, -212.5)"><rect x="-1" y="19.25" width="221" height="1.5" fill="rgb(44, 160, 44)"></rect><foreignObject class="mm-2m1920-1-fo" x="8" y="0" height="20" width="203" style="opacity: 1;"><div xmlns="http://www.w3.org/1999/xhtml" style="box-sizing: inherit; display: inline-block; font: 300 16px / 20px sans-serif; white-space: nowrap;">A、写作整理资源，补充学习</div></foreignObject></g><g transform="translate(160, 167.5)"><rect x="-1" y="19" width="459" height="2" fill="rgb(44, 160, 44)"></rect><foreignObject class="mm-2m1920-1-fo" x="8" y="0" height="20" width="441" style="opacity: 1;"><div xmlns="http://www.w3.org/1999/xhtml" style="box-sizing: inherit; display: inline-block; font: 300 16px / 20px sans-serif; white-space: nowrap;">8、除了自己，不会有别人审查你发布的文章，最大的言论自由</div></foreignObject></g><g transform="translate(160, 112.5)"><rect x="-1" y="19" width="267" height="2" fill="rgb(188, 189, 34)"></rect><circle stroke-width="1.5" cx="265" cy="20" r="6" stroke="rgb(188, 189, 34)" fill="rgb(255, 255, 255)"></circle><foreignObject class="mm-2m1920-1-fo" x="8" y="0" height="20" width="249" style="opacity: 1;"><div xmlns="http://www.w3.org/1999/xhtml" style="box-sizing: inherit; display: inline-block; font: 300 16px / 20px sans-serif; white-space: nowrap;">7、提高个人的技术写作和思维能力</div></foreignObject></g><g transform="translate(160, 87.5)"><rect x="-1" y="19" width="203" height="2" fill="rgb(127, 127, 127)"></rect><foreignObject class="mm-2m1920-1-fo" x="8" y="0" height="20" width="185" style="opacity: 1;"><div xmlns="http://www.w3.org/1999/xhtml" style="box-sizing: inherit; display: inline-block; font: 300 16px / 20px sans-serif; white-space: nowrap;">6、认识更多志同道合朋友</div></foreignObject></g><g transform="translate(160, 57.5)"><rect x="-1" y="19" width="123" height="2" fill="rgb(140, 86, 75)"></rect><circle stroke-width="1.5" cx="121" cy="20" r="6" stroke="rgb(140, 86, 75)" fill="rgb(255, 255, 255)"></circle><foreignObject class="mm-2m1920-1-fo" x="8" y="0" height="20" width="105" style="opacity: 1;"><div xmlns="http://www.w3.org/1999/xhtml" style="box-sizing: inherit; display: inline-block; font: 300 16px / 20px sans-serif; white-space: nowrap;">5、碎片化学习</div></foreignObject></g><g transform="translate(160, 15)"><rect x="-1" y="19" width="156" height="2" fill="rgb(44, 160, 44)"></rect><circle stroke-width="1.5" cx="154" cy="20" r="6" stroke="rgb(44, 160, 44)" fill="rgb(255, 255, 255)"></circle><foreignObject class="mm-2m1920-1-fo" x="8" y="0" height="20" width="138" style="opacity: 1;"><div xmlns="http://www.w3.org/1999/xhtml" style="box-sizing: inherit; display: inline-block; font: 300 16px / 20px sans-serif; white-space: nowrap;">4、提高个人知名度</div></foreignObject></g><g transform="translate(160, -40)"><rect x="-1" y="19" width="187" height="2" fill="rgb(23, 190, 207)"></rect><circle stroke-width="1.5" cx="185" cy="20" r="6" stroke="rgb(23, 190, 207)" fill="rgb(255, 255, 255)"></circle><foreignObject class="mm-2m1920-1-fo" x="8" y="0" height="20" width="169" style="opacity: 1;"><div xmlns="http://www.w3.org/1999/xhtml" style="box-sizing: inherit; display: inline-block; font: 300 16px / 20px sans-serif; white-space: nowrap;">3、自己以后可能用得到</div></foreignObject></g><g transform="translate(160, -107.5)"><rect x="-1" y="19" width="107" height="2" fill="rgb(140, 86, 75)"></rect><circle stroke-width="1.5" cx="105" cy="20" r="6" stroke="rgb(140, 86, 75)" fill="rgb(255, 255, 255)"></circle><foreignObject class="mm-2m1920-1-fo" x="8" y="0" height="20" width="89" style="opacity: 1;"><div xmlns="http://www.w3.org/1999/xhtml" style="box-sizing: inherit; display: inline-block; font: 300 16px / 20px sans-serif; white-space: nowrap;">2、帮助别人</div></foreignObject></g><g transform="translate(160, -187.5)"><rect x="-1" y="19" width="233" height="2" fill="rgb(255, 127, 14)"></rect><circle stroke-width="1.5" cx="231" cy="20" r="6" stroke="rgb(255, 127, 14)" fill="rgb(255, 255, 255)"></circle><foreignObject class="mm-2m1920-1-fo" x="8" y="0" height="20" width="215" style="opacity: 1;"><div xmlns="http://www.w3.org/1999/xhtml" style="box-sizing: inherit; display: inline-block; font: 300 16px / 20px sans-serif; white-space: nowrap;">1、对知识点总结、回顾、思考</div></foreignObject></g><g transform="translate(80,-8)"><rect x="-1" y="13" width="2" height="6" fill="rgb(31, 119, 180)"></rect><circle stroke-width="1.5" cx="0" cy="16" r="6" stroke="rgb(31, 119, 180)" fill="rgb(255, 255, 255)"></circle><foreignObject class="mm-2m1920-1-fo" x="8" y="0" height="16" width="0" style="opacity: 1;"><div xmlns="http://www.w3.org/1999/xhtml" style="box-sizing: inherit; display: inline-block; font: 300 16px / 20px sans-serif; white-space: nowrap;"></div></foreignObject></g></g></svg></p><blockquote><p>最终效果如下图所示！</p><ul><li>本博客大量使用webp格式图片加速网络访问，请确保您的浏览器支持webp，使用最新版的Firefox，Edge,Chrome可以有最佳体验！</li><li>支持Work Service PWA离线访问。</li><li>新增另一种浅色&#x2F;深色模式。大部分组件会实时切换浅色&#x2F;深色模式！</li><li>背景随机图片随机切换，并区分黑暗模式图片！切换浅色&#x2F;深色模式时，背景图会跟随实时</li><li>支持文章RSS订阅，并支持文章分类订阅。</li><li>新增文章阅读模式，代码框全屏</li><li>新增文章目录栏状态保存，文章刷新后目录状态依旧保存</li><li>新增看板娘文字功能提示，当鼠标移动到特定位置，看板娘将会给出特定的文字提示！</li><li>footer 栏新增支持繁简转换</li><li>支持新博文订阅通知，右下角小铃铛点击订阅！ chrome用户可能由于网络原因链接不到Google的服务器而看不到这个小铃铛。edge 和 Firefox 用户可以正常订阅。</li></ul></blockquote><p><img src="20230314054551.webp" alt="支持离线模式"></p><p><strong>支持离线模式</strong></p><blockquote><p>service worker 实现的渐进式App，不仅可以离线浏览，还可以加速缓存访问！</p></blockquote><p><img src="20230314054810.webp" alt="博客深色模式"></p><p><strong>博客深色模式</strong></p><blockquote><p>深色模式，夜晚保护您的视力！</p></blockquote><p><img src="20230314054810-1.webp" alt="RSS订阅与文章分类订阅"></p><p><strong>RSS订阅与文章分类订阅</strong></p><blockquote><p>RSS Hub 和 TTRSS 私有部署实现订阅。</p><p>配合浏览器扩展 <a href="https://github.com/DIYgod/RSSHub-Radar">RSSHub Radar (opens new window)</a>和 移动端辅助 App <a href="https://github.com/Cay-Zhang/RSSBud">RSSBud (opens new window)</a>(iOS) 与 <a href="https://github.com/LeetaoGoooo/RSSAid">RSSAid (opens new window)</a>(Android) 食用。</p><p>教程：<a href="https://blog.17lai.site/posts/f4926c88/">RSS的使用与Tiny Tiny RSS Selfhost自建</a></p></blockquote><p><img src="20230314054810-2.webp" alt="看板娘触发文字提示"></p><p><strong>看板娘触发文字提示</strong></p><blockquote><ul><li>对所有菜单和常用按钮做了文字功能提示。</li><li>支持看板娘模型切换，服装切换，某些模型还有语音互动！</li><li>看板娘还可以自定义时间提示，特殊节日提示等等。参考 <a href="https://blog.17lai.site/posts/4a2050e2/">Hexo博客个性定制篇</a>中来完成吧。</li></ul></blockquote><p><img src="20230314054810-3.webp" alt="博客性能优化"></p><p><strong>博客性能优化</strong></p><blockquote><p>经过多次优化，新版看板娘资源异步加载体积大拖累的性能分数。其它几乎都是满分了！</p><p>大量使用本地缓存，牺牲了第一次加载的体积，保证了第二次打开几乎都是使用缓存，异步加载对第一次渲染速度影响不大，但可以极大的提高第二次来自后续的访问速度！</p></blockquote><blockquote><p>本教程还有其它五大部分，更多内容请见<a href="https://blog.17lai.site/posts/40300608/#Hexo%E7%B3%BB%E5%88%97">Hexo系列教程</a></p></blockquote><h2 id="Hexo-Docker环境使用篇"><a href="#Hexo-Docker环境使用篇" class="headerlink" title="Hexo Docker环境使用篇"></a>Hexo Docker环境使用篇</h2><h3 id="Docker-简介："><a href="#Docker-简介：" class="headerlink" title="Docker 简介："></a>Docker 简介：</h3><blockquote><p>Docker 是一种轻量级的虚拟机环境，可以隔离主机的运行环境，内核公用主机的，运行库和环境是 Docker 私有的。运行 Docker 程序只比主机直接运行程序性能损失微乎其微。使用 Docker 你可以同时运行各种各样运行库环境而不用担心搞乱你的主机运行库环境！</p><p>Docker 运行负载远小于 Vmware 这类虚拟机， Vmware 需要模拟对应的CPU指令，再虚机运行一个虚拟机自己的内核，再这个虚拟机内核之上，再运行虚拟机的运行库和程序。比 Docker 多了一个内核模拟和运行，Cpu 和内存开销大增！</p></blockquote><h4 id="什么是-Docker？"><a href="#什么是-Docker？" class="headerlink" title="什么是 Docker？"></a>什么是 Docker？</h4><p>Docker 是一个开源平台，支持开发人员<code>构建</code>、<code>部署</code>、<code>运行</code>、<code>更新</code>和<code>管理</code>容器，这些容器是标准化的可执行组件，结合了应用源代码以及在任何环境中运行该代码所需的操作系统 (OS) 库和依赖项。</p><p>容器简化了<code>分布式应用的部署和交付</code>过程。 随着组织转向<code>云原生</code>开发和混合多云环境，它们已变得越来越流行。 开发人员可以直接使用 Linux和其他操作系统中内置的功能，在没有 Docker 的情况下创建容器。 但 Docker 使容器化更加迅速、简便和安全。 截至本文撰写之时，Docker 报告称，已有超过 1300 万名开发人员在使用该平台（链接位于 <a href="http://ibm.com/">ibm.com</a> 外部）。</p><p>Docker 也指 Docker, Inc.（链接位于 <a href="http://ibm.com/">ibm.com</a> 外部），即销售 Docker 商业版本的企业，还可以是 Docker, Inc. 和许多其他组织和个人开展的 Docker 开源项目。</p><hr><h4 id="容器的工作原理"><a href="#容器的工作原理" class="headerlink" title="容器的工作原理"></a>容器的工作原理</h4><p>容器是通过 Linux 内核中内置的过程<code>隔离和虚拟化功能</code>来实现的。 控制组 (<code>Cgroups)</code> 用于为各<strong>进程分配资源</strong>，<code>名称空间(namespace)</code>用于<strong>限制进程访问或对其他资源或系统区域的可视性</strong> ，这些功能支持多个应用组件共享主机操作系统的<code>单个实例</code>的资源，这与系统管理程序支持多台虚拟机 (<code>VM</code>) 共享单个硬件服务器的 <code>CPU</code>、<code>内存</code>和其他资源的方式大致相同。</p><hr><h4 id="容器的架构"><a href="#容器的架构" class="headerlink" title="容器的架构"></a>容器的架构</h4><p><img src="20240418194745.webp" alt="容器的架构"></p><p><strong>容器的架构</strong></p><p>Docker 包括三个基本概念:</p><ul><li><code>镜像（Image）</code>：Docker 镜像（Image），就相当于是一个 root 文件系统。比如官方镜像 ubuntu:16.04 就包含了完整的一套 Ubuntu16.04 最小系统的 root 文件系统。</li><li><code>容器（Container）</code>：镜像（Image）和容器（Container）的关系，就像是面向对象程序设计中的<code>类和实例</code>一样，镜像是<code>静态的定义</code>，容器是镜像<code>运行时的实体</code>。容器可以被<code>创建</code>、<code>启动</code>、<code>停止</code>、<code>删除</code>、<code>暂停</code>等。</li><li><code>仓库（Repository）</code>：仓库可看成一个代码控制中心，用来保存<code>镜像</code>。</li></ul><hr><h4 id="Docker的优势"><a href="#Docker的优势" class="headerlink" title="Docker的优势"></a>Docker的优势</h4><p>因此，容器技术可提供虚拟机的所有功能和优势，包括应用隔离、经济高效的可扩展性和可处置性，以及其他重要的优势：</p><ul><li>更轻巧：与虚拟机不同，容器不会承载整个操作系统实例和系统管理程序的有效负载。 它们仅包括执行代码所需的操作系统进程和依赖项。 容器大小以<code>兆字节</code>为单位（某些虚拟机则是以<code>千兆字节</code>为单位）来衡量，因此它们可以更好地利用硬件容量，<code>启动速度也更快</code>。</li><li>提高了开发人员的工作效率：容器化应用可以<code>“一次编写，随处运行”</code>。 与虚拟机相比，容器的部署、配置和重启过程更迅速且更简单。 这使得容器非常适合在<code>持续集成和持续交付 (CI/CD)</code> 管道中使用，并且更适合采取<code>敏捷</code>和 <code>DevOps</code> 实践的开发团队。</li><li>提高了资源利用率：开发人员使用容器在硬件上运行的应用副本数量是使用虚拟机的<code>数倍</code>。 这可以减少<code>云支出</code>。</li></ul><h4 id="为何使用-Docker？"><a href="#为何使用-Docker？" class="headerlink" title="为何使用 Docker？"></a>为何使用 Docker？</h4><p>Docker 如今非常受欢迎，甚至可以与“容器”一词互换使用。 而在 Docker 于 2013 年面世之前，第一批与容器相关的技术早已存在数年，甚至数十年（链接位于 IBM 外部）。</p><p>最值得注意的是，2008 年，Linux 内核中实现了 LinuXContainers (LXC)，LXC 完全支持单个 Linux 实例的虚拟化。 虽然目前仍在使用 <code>LXC</code>，但也提供了使用 Linux 内核的新技术。 现代的开源 Linux 操作系统 Ubuntu 也提供了此功能。</p><p>Docker 支持开发人员使用简单的命令访问这些本机容器化功能，并通过节省工作量的应用程序编程接口 (API) 自动执行。 与 LXC 相比，Docker 提供了以下功能：</p><ul><li>增强的无缝容器<code>可移植性</code>：虽然 LXC 容器通常引用特定于机器的配置，但 Docker 容器无需修改即可在任何桌面、数据中心和云环境中运行。</li><li>更轻巧且<code>更细粒度的更新</code>：通过使用 LXC，可以在单个容器中组合多个进程。 这样就可以构建持续运行的应用，即使为了更新或修复而关闭某个部分也不例外。</li><li><code>自动化容器创建</code>：Docker 可以基于应用源代码自动构建容器。</li><li><code>容器版本控制</code>：Docker 可以跟踪容器映像的版本，回滚到先前的版本，以及跟踪版本的构建者和构建方式。 它甚至可以<code>只上传现有版本和新版本之间的增量</code>。</li><li><code>容器复用</code>：现有容器可用作<code>基本映像</code>（本质上类似于用于构建新容器的模板）。</li><li><code>共享容器库</code>：开发人员可以访问包含数千个用户贡献容器的<code>开源注册表</code>。</li></ul><blockquote><p>如今，Docker 容器化也适用于 Microsoft Windows 和 Apple MacOS。 开发人员可以在任何操作系统上运行 Docker 容器，大多数领先的云提供商（包括 Amazon Web Services (AWS)、Microsoft Azure 和 IBM Cloud）都提供了一些专用服务，这些服务可帮助开发人员构建、部署和运行使用 Docker 进行容器化的应用。</p></blockquote><h3 id="Docker-版-hexo-环境一键部署"><a href="#Docker-版-hexo-环境一键部署" class="headerlink" title="Docker 版 hexo 环境一键部署"></a>Docker 版 hexo 环境一键部署</h3><blockquote><p>博主开源定制，推荐使用！省去您大量环境配置时间。</p><p>使用Hexo Docker之前需要Docker 环境，请参阅后文Docker安装方法</p><ul><li><a href="https://hub.docker.com/r/bloodstar/hexo">docker-hub</a></li><li><a href="https://github.com/appotry/docker-hexo">Github-hexo</a></li></ul></blockquote><iframe id="ghcard-appotry-1" frameborder="0" scrolling="0" allowtransparency="true" src="https://lab.lepture.com/github-cards/cards/default.html?user=appotry&amp;identity=ghcard-appotry-1&amp;repo=docker-hexo" width="400" height="200" style="box-sizing: inherit;"></iframe><p>使用推荐Docker来搭配本文，阅读使用，将更省事，方便，快捷。hexo环境一键搞定！</p><p>Docker一键安装</p><p>bash</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker create --name=hexo \<br>-e HEXO_SERVER_PORT=4000 \<br>-e GIT_USER=<span class="hljs-string">&quot;17lai&quot;</span> \<br>-e GIT_EMAIL=<span class="hljs-string">&quot;17lai@domain.tld&quot;</span> \<br>-v /mnt/blog.17lai.site:/app \<br>-p 4000:4000 \<br>bloodstar/hexo<br>Docker`镜像直接提供最新版本`node` ，`hexo<br></code></pre></td></tr></table></figure><h3 id="hexo-web-后台写作"><a href="#hexo-web-后台写作" class="headerlink" title="hexo web 后台写作"></a>hexo web 后台写作</h3><blockquote><p>基于 <strong><a href="https://github.com/jaredly/hexo-admin">hexo-admin</a></strong> 实现，具体配置实现方法见<a href="https://blog.17lai.site/posts/40300608/">后文</a>。</p><p>最终效果如下图所示。<code>blog.17lai.fun</code> 访问<code>blog</code>， 添加后缀 <code>admin</code> 访问 <code>hexo</code> 后台。</p><p>使用前面提到的 hexo docker ，启动运行 hexo docker 后，非自动安装 hexo-admin 以及常用插件，你也可以自定义安装你虚幻的插件， <code>vi /app/useRun.sh</code>。</p></blockquote><p><img src="20230314054810-4.webp" alt="hexo-admin 主界面"></p><p><strong>hexo-admin 主界面</strong></p><p><img src="20230314054810-5.webp" alt="hexo-admin 编辑写作界面"></p><p><strong>hexo-admin 编辑写作界面</strong></p><p>配置 hexo-admin 根目录下<code>_config.yml</code>:</p><p>yaml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">admin:</span><br>  <span class="hljs-attr">username:</span> <span class="hljs-string">myfavoritename</span> <span class="hljs-comment">#用户名</span><br>  <span class="hljs-attr">password_hash:</span> <span class="hljs-string">be121740bf988b2225a313fa1f107ca1</span> <span class="hljs-comment">#密码</span><br>  <span class="hljs-attr">secret:</span> <span class="hljs-string">a</span> <span class="hljs-string">secret</span> <span class="hljs-string">something</span> <span class="hljs-comment"># secret is used to make the cookies secure</span><br>  <span class="hljs-attr">deployCommand:</span> <span class="hljs-string">&#x27;/app/tools/cide.sh&#x27;</span>  <span class="hljs-comment"># 自定义的部署脚本，在 hexo admin 的 deploy 标签页 deploy 按钮点击调用</span><br></code></pre></td></tr></table></figure><p>配置 post metadata 根目录下<code>_config.yml</code>:</p><p>yaml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># add and edit your own post metadata with the admin interface</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">author_id:</span> <span class="hljs-string">defaultAuthorId</span><br>  <span class="hljs-attr">language:</span><br></code></pre></td></tr></table></figure><h4 id="hexon"><a href="#hexon" class="headerlink" title="hexon"></a>hexon</h4><blockquote><p>Github: <a href="https://github.com/gethexon/hexon">hexon</a></p><p>另一个hexo web 编辑界面，界面比hexo-admin更现代化。安装配置方法见<a href="https://github.com/gethexon/hexon">Github</a></p></blockquote><p><img src="20220529214918.webp" alt="hexon"></p><p><strong>hexon</strong></p><h4 id="hexo-editor"><a href="#hexo-editor" class="headerlink" title="hexo-editor"></a>hexo-editor</h4><blockquote><p><a href="https://github.com/tajpure/hexo-editor">hexo-editor</a></p><p>又一个hexo web 编辑器</p></blockquote><p><img src="20220818101457.webp" alt="hexo editor 登录"></p><p><strong>hexo editor 登录</strong></p><p><img src="20220818101457-1.webp" alt="hexo editor 预览"></p><p><strong>hexo editor 预览</strong></p><p><img src="20220818101457-2.webp" alt="hexo editor 编辑"></p><p><strong>hexo editor 编辑</strong></p><p><strong>支持手机</strong></p><p><img src="20220818101457-3.webp" alt="img"></p><h4 id="Qexo"><a href="#Qexo" class="headerlink" title="Qexo"></a>Qexo</h4><blockquote><ul><li><a href="https://github.com/Qexo/Qexo">https://github.com/Qexo/Qexo</a></li></ul><p>A Quick, Powerful and Pretty Online Manager for Hexo.</p><p>类似项目</p><ul><li><a href="https://github.com/Wexagonal/Wexagonal">https://github.com/Wexagonal/Wexagonal</a></li></ul><p>轻量级\多平台\开箱即用的hexo后端管理器</p></blockquote><p><img src="20221015173224.webp" alt="img"></p><h3 id="ssh-key-部署"><a href="#ssh-key-部署" class="headerlink" title="ssh key 部署"></a>ssh key 部署</h3><p><strong>Docker会自动随机生成ssh key</strong> 在 &#x2F;app&#x2F;.ssh 目录下面。自动部署请把ssh key添加到github 等平台。</p><p><a href="https://docs.github.com/cn/authentication/connecting-to-github-with-ssh/adding-a-new-ssh-key-to-your-github-account">Github详细教程</a></p><blockquote><ol><li>将<strong>SSH</strong> 公钥复制到剪贴板。 …</li><li>在任何页面的右上角，单击您的个人资料照片，然后单击Settings（设置）。</li><li>在用户设置侧边栏中，单击<strong>SSH</strong> and GPG keys（<strong>SSH</strong> 和GPG 密钥）。</li><li>单击New <strong>SSH</strong> key（新<strong>SSH</strong> 密钥）或Add <strong>SSH</strong> key（添加<strong>SSH</strong> 密钥）。</li></ol></blockquote><h3 id="SSH-进入docker"><a href="#SSH-进入docker" class="headerlink" title="SSH 进入docker"></a>SSH 进入docker</h3><p>bash</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker <span class="hljs-built_in">exec</span> -it hexo /bin/bash<br></code></pre></td></tr></table></figure><p>然后就可以正常运行hexo的各种命令了，是不是非常简单？ 快来试试吧。</p><h3 id="远程-SSH-访问Docker"><a href="#远程-SSH-访问Docker" class="headerlink" title="远程 SSH 访问Docker"></a>远程 SSH 访问Docker</h3><blockquote><p>推荐使用<code>SecurtCRT</code> 来远程访问你的<code>Docker</code>。</p></blockquote><p><img src="20230314054810-6.webp" alt="SecurtCRT"></p><p><strong>SecurtCRT</strong></p><h3 id="自定义用户自动运行脚本"><a href="#自定义用户自动运行脚本" class="headerlink" title="自定义用户自动运行脚本"></a>自定义用户自动运行脚本</h3><blockquote><p>用户可以在这里添加自动配置，自动安装插件，等各种启动docker运行的命令。</p><p>它将在Docker启动完成后自动调用运行！</p></blockquote><p>bash</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">vi /app/useRun.sh<br></code></pre></td></tr></table></figure><h3 id="反向代理-Hexo-Docker"><a href="#反向代理-Hexo-Docker" class="headerlink" title="反向代理 Hexo Docker"></a>反向代理 Hexo Docker</h3><blockquote><p><em>Nginx</em> (engine x) 是一个高性能的HTTP和反向代理web服务器，同时也提供了IMAP&#x2F;POP3&#x2F;SMTP服务。</p><ul><li>一些测试可能需要ssl支持，那么用nginx来反向代理一下，就可以在本地愉快的测试ssl加密功能了。</li><li>访问docker，需要 <code>192.168.0.100:4000</code>这样数字<code>ip + 端口号</code>的方式不觉得很丑陋，而且需要开大量的端口，使用nginx反向代理，可以直接使用域名访问。</li><li>如果你想使用<code>blog.17lai.fun</code>这样的域名访问你的 docker 里面运行的博客，请参考下文。</li></ul></blockquote><p>Nginx也使用docker来运行，<code>blog.17lai.fun</code>为本地域名，修改本地hosts dns信息来访问。</p><h4 id="docker-compose-配置"><a href="#docker-compose-配置" class="headerlink" title="docker compose 配置"></a>docker compose 配置</h4><p>yaml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">nginxweb:</span><br>  <span class="hljs-attr">image:</span> <span class="hljs-string">bloodstar/nginx-purge</span><br>  <span class="hljs-attr">container_name:</span> <span class="hljs-string">&quot;nginxweb&quot;</span><br>  <span class="hljs-attr">hostname:</span> <span class="hljs-string">nginxweb</span><br>  <span class="hljs-attr">ports:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;80:80&quot;</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;443:443&quot;</span><br>  <span class="hljs-attr">restart:</span> <span class="hljs-string">always</span><br>  <span class="hljs-attr">volumes:</span><br>    <span class="hljs-comment"># $&#123;USERDIR&#125;为你docker运行目录</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">$&#123;USERDIR&#125;/nginx/conf.d:/etc/nginx/conf.d:ro</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">$&#123;USERDIR&#125;/nginxproxy/certs:/etc/nginx/certs:ro</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">$&#123;USERDIR&#125;/nginx/nginx.conf:/etc/nginx/nginx.conf:ro</span><br></code></pre></td></tr></table></figure><ul><li><a href="https://hub.docker.com/r/bloodstar/nginx-purge">bloodstar&#x2F;nginx-purge</a></li></ul><iframe id="ghcard-appotry-1" frameborder="0" scrolling="0" allowtransparency="true" src="https://lab.lepture.com/github-cards/cards/default.html?user=appotry&amp;identity=ghcard-appotry-1&amp;repo=nginx-purge-docker" width="400" height="200" style="box-sizing: inherit;"></iframe><h4 id="nginx配置"><a href="#nginx配置" class="headerlink" title="nginx配置"></a>nginx配置</h4><p>文件 <code>blog.conf</code> ，配置文件放到<code>$&#123;USERDIR&#125;/nginx/conf.d</code>目录中</p><p>nginx</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-section">upstream</span> blog &#123;<br>    <span class="hljs-attribute">server</span> hexo:<span class="hljs-number">4000</span>;<br>&#125;<br><br><span class="hljs-section">server</span> &#123;<br>    <span class="hljs-attribute">listen</span> <span class="hljs-number">80</span>;<br>    <span class="hljs-attribute">listen</span> <span class="hljs-number">443</span> ssl http2;<br>    <span class="hljs-attribute">server_name</span>  blog.17lai.fun;<br><br>    <span class="hljs-attribute">ssl_certificate</span> /etc/nginx/certs/17lai.pem;<br>    <span class="hljs-attribute">ssl_certificate_key</span> /etc/nginx/certs/17lai.key;<br><br>    <span class="hljs-attribute">ssl_session_cache</span> shared:aria2SSL:<span class="hljs-number">10m</span>;<br>    <span class="hljs-attribute">ssl_session_timeout</span>  <span class="hljs-number">30m</span>;<br>    <span class="hljs-comment">#ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;</span><br>    <span class="hljs-attribute">ssl_ciphers</span> EECDH+CHACHA20:EECDH+AES128:RSA+AES128:EECDH+AES256:RSA+AES256:EECDH+3DES:RSA+3DES:!MD5;<br>    <span class="hljs-attribute">ssl_protocols</span> TLSv1 TLSv1.<span class="hljs-number">1</span> TLSv1.<span class="hljs-number">2</span>;<br>    <span class="hljs-attribute">ssl_prefer_server_ciphers</span> <span class="hljs-literal">on</span>;<br>    <br>    <span class="hljs-attribute">access_log</span> /var/log/nginx/blog.17lai.fun_access.log combined;<br>    <span class="hljs-attribute">error_log</span>  /var/log/nginx/blog.17lai.fun_error.log;<br>    <br>    <span class="hljs-attribute">keepalive_requests</span> <span class="hljs-number">10000</span>;<br>    <br>    <span class="hljs-section">location</span> / &#123;<br>        <span class="hljs-comment">#proxy_redirect off;</span><br>        <span class="hljs-attribute">proxy_pass</span> http://blog;<br><br>        <span class="hljs-attribute">proxy_buffering</span> <span class="hljs-literal">off</span>;<br>        <br>        <span class="hljs-attribute">add_header</span> X-Cache-Status <span class="hljs-variable">$upstream_cache_status</span>;<br>        <span class="hljs-attribute">proxy_set_header</span> Host <span class="hljs-variable">$http_host</span>;<br><br>        <span class="hljs-attribute">proxy_set_header</span> X-Forwarded-Proto <span class="hljs-variable">$scheme</span>;<br><br>        <span class="hljs-attribute">proxy_set_header</span> X-Real-IP <span class="hljs-variable">$remote_addr</span>;<br>        <span class="hljs-attribute">proxy_set_header</span>  X-Forwarded-Ssl     <span class="hljs-literal">on</span>;<br>        <span class="hljs-attribute">proxy_set_header</span>  X-Forwarded-For     <span class="hljs-variable">$proxy_add_x_forwarded_for</span>;      <br>        <span class="hljs-attribute">proxy_set_header</span>  X-Frame-Options     SAMEORIGIN;<br>        <br>        <span class="hljs-attribute">proxy_set_header</span> Upgrade <span class="hljs-variable">$http_upgrade</span>;<br>        <span class="hljs-attribute">proxy_set_header</span> Connection <span class="hljs-string">&quot;upgrade&quot;</span>;<br>    &#125; <br>&#125;<br></code></pre></td></tr></table></figure><h4 id="Windows-DNS修改"><a href="#Windows-DNS修改" class="headerlink" title="Windows DNS修改"></a>Windows DNS修改</h4><p>windows hosts文件路径为： <code>C:\Windows\System32\drivers\etc\HOSTS</code></p><p>管理员权限用文本编辑器打开这个文件并添加 <code>192.168.0.100 blog.17lai.fun</code>，然后，你就可以在本地浏览器中使用域名访问你的blog了！</p><h4 id="Linux-DNS-修改"><a href="#Linux-DNS-修改" class="headerlink" title="Linux DNS 修改"></a>Linux DNS 修改</h4><p>Linux hosts 文件路径为： <code>/etc/hosts</code></p><p>用文本编辑器或者命令行工具<code>vim</code>打开这个文件并添加 <code>192.168.0.100 blog.17lai.fun</code>，然后，你就可以在本地浏览器中使用域名访问你的blog了！</p><p>bash</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># root用户一条指令搞定</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;192.168.0.100 blog.17lai.fun&quot;</span> &gt;&gt; /etc/hosts<br><br><span class="hljs-comment">#或者使用 vi 或者 vim</span><br>vi /etc/hosts<br></code></pre></td></tr></table></figure><h4 id="获取-SSL-证书"><a href="#获取-SSL-证书" class="headerlink" title="获取 SSL 证书"></a>获取 SSL 证书</h4><blockquote><ul><li>如果你购买了域名，可以在域名服务商获得免费的ssl证书。</li><li>自己生成<em>私有证书</em>，使用时需要给本地计算机，浏览器添加你自己的根证书，才能使你的ssl 证书在你自己的浏览器中生效。</li></ul></blockquote><blockquote><p>使用Hexo Docker之前需要Docker 环境，下面是Docker 环境安装方法。</p></blockquote><h3 id="Centos-安装Docker"><a href="#Centos-安装Docker" class="headerlink" title="Centos 安装Docker"></a><strong>Centos 安装Docker</strong></h3><p><strong>X86</strong>（一键安装脚本）：</p><p>bash</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">curl -sSL https://get.docker.com/ | sh<br></code></pre></td></tr></table></figure><p><strong>Arm</strong>：</p><p>步骤1</p><p>bash</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo yum install -y yum-utils device-mapper-persistent-data lvm2<br></code></pre></td></tr></table></figure><p>步骤2</p><p>添加仓库</p><p>bash</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo<br></code></pre></td></tr></table></figure><p>步骤3</p><p>安装Docker</p><p>bash</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo yum install docker-ce docker-ce-cli containerd.io<br></code></pre></td></tr></table></figure><p><img src="20230314054810-7.webp" alt="centos docker"></p><p><strong>centos docker</strong></p><p><img src="20230314054810-8.webp" alt="centos docker"></p><p><strong>centos docker</strong></p><p>完成安装</p><p>步骤4</p><p>启动Docker</p><p>bash</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo systemctl start docker<br></code></pre></td></tr></table></figure><h3 id="QNAP-安装Docker"><a href="#QNAP-安装Docker" class="headerlink" title="QNAP 安装Docker"></a>QNAP 安装Docker</h3><blockquote><p>在系统应用的AppCenter中找到 Container Station，可以直接点击安装即可。</p></blockquote><p><img src="20230314054810-9.webp" alt="qnap docker"></p><p><strong>qnap docker</strong></p><h3 id="群晖-安装-Docker"><a href="#群晖-安装-Docker" class="headerlink" title="群晖 安装 Docker"></a>群晖 安装 Docker</h3><p>首先要说的是，x86 平台的群晖才能用的上 <code>Docker</code> 套件，因此，ARM 架构平台的群晖只能说非常遗憾了。<br>　　打开套件中心，在 “所有套件” 中找到 <code>Docker</code> 并安装：</p><p><img src="20230314054810-10.webp" alt="群晖 Docker"></p><p><strong>群晖 Docker</strong></p><h3 id="配置-docker-代理"><a href="#配置-docker-代理" class="headerlink" title="配置 docker 代理"></a>配置 docker 代理</h3><blockquote><p>最近 <a href="http://hub.docker.com/">hub.docker.com</a> 被屏蔽了，如是你需要下面设置</p><ul><li>Docker container 运行代理 <a href="https://docs.docker.com/network/proxy/#configure-the-docker-client">Configure Docker to use a proxy server | Docker Docs</a></li><li>Docker pull 代理设置 <a href="https://docs.docker.com/config/daemon/systemd/#httphttps-proxy">Configure the daemon with systemd | Docker Docs</a></li></ul></blockquote><h4 id="Dockerd-代理"><a href="#Dockerd-代理" class="headerlink" title="Dockerd 代理"></a><strong>Dockerd 代理</strong></h4><p>在执行<code>docker pull</code>时，是由守护进程<code>dockerd</code>来执行。因此，代理需要配在<code>dockerd</code>的环境中。而这个环境，则是受<code>systemd</code>所管控，因此实际是<code>systemd</code>的配置。</p><p>bash</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo <span class="hljs-built_in">mkdir</span> -p /etc/systemd/system/docker.service.d<br>sudo <span class="hljs-built_in">touch</span> /etc/systemd/system/docker.service.d/proxy.conf<br></code></pre></td></tr></table></figure><p>在这个<code>proxy.conf</code>文件（可以是任意<code>*.conf</code>的形式）中，添加以下内容：</p><p>ini</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[Service]</span><br><span class="hljs-attr">Environment</span>=<span class="hljs-string">&quot;HTTP_PROXY=http://127.0.0.1:8888/&quot;</span><br><span class="hljs-attr">Environment</span>=<span class="hljs-string">&quot;HTTPS_PROXY=http://127.0.0.1:8888/&quot;</span><br><span class="hljs-attr">Environment</span>=<span class="hljs-string">&quot;NO_PROXY=localhost,127.0.0.1,.example.com&quot;</span><br></code></pre></td></tr></table></figure><h4 id="Container-代理"><a href="#Container-代理" class="headerlink" title="Container 代理"></a><strong>Container 代理</strong></h4><p>在容器运行阶段，如果需要代理上网，则需要配置 <code>~/.docker/config.json</code>。以下配置，只在Docker 17.07及以上版本生效。</p><p>json</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br> <span class="hljs-attr">&quot;proxies&quot;</span><span class="hljs-punctuation">:</span><br> <span class="hljs-punctuation">&#123;</span><br>   <span class="hljs-attr">&quot;default&quot;</span><span class="hljs-punctuation">:</span><br>   <span class="hljs-punctuation">&#123;</span><br>     <span class="hljs-attr">&quot;httpProxy&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;http://127.0.0.1:8888&quot;</span><span class="hljs-punctuation">,</span><br>     <span class="hljs-attr">&quot;httpsProxy&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;http://127.0.0.1.com:8888&quot;</span><span class="hljs-punctuation">,</span><br>     <span class="hljs-attr">&quot;noProxy&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;localhost,127.0.0.1,.example.com&quot;</span><br>   <span class="hljs-punctuation">&#125;</span><br> <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>这个是用户级的配置，除了 <code>proxies</code>，<code>docker login</code> 等相关信息也会在其中。而且还可以配置信息展示的格式、插件参数等。</p><p>此外，容器的网络代理，也可以直接在其运行时通过 <code>-e</code> 注入 <code>http_proxy</code> 等环境变量。这两种方法分别适合不同场景。<code>config.json</code> 非常方便，默认在所有配置修改后启动的容器生效，适合个人开发环境。在CI&#x2F;CD的自动构建环境、或者实际上线运行的环境中，这种方法就不太合适，用 <code>-e</code> 注入这种显式配置会更好，减轻对构建、部署环境的依赖。当然，在这些环境中，最好用良好的设计避免配置代理上网。</p><h4 id="Docker-Build-代理"><a href="#Docker-Build-代理" class="headerlink" title="Docker Build 代理"></a><strong>Docker Build 代理</strong></h4><p>虽然 <code>docker build</code> 的本质，也是启动一个容器，但是环境会略有不同，用户级配置无效。在构建时，需要注入 <code>http_proxy</code> 等参数。</p><p>bash</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker build . \<br>    --build-arg <span class="hljs-string">&quot;HTTP_PROXY=http://proxy.example.com:8080/&quot;</span> \<br>    --build-arg <span class="hljs-string">&quot;HTTPS_PROXY=http://proxy.example.com:8080/&quot;</span> \<br>    --build-arg <span class="hljs-string">&quot;NO_PROXY=localhost,127.0.0.1,.example.com&quot;</span> \<br>    -t your/image:tag<br></code></pre></td></tr></table></figure><p><strong>注意</strong>：无论是 <code>docker run</code> 还是 <code>docker build</code>，默认是网络隔绝的。如果代理使用的是 <code>localhost:3128</code> 这类，则会无效。这类仅限本地的代理，必须加上 <code>--network host</code> 才能正常使用。而一般则需要配置代理的外部IP，而且代理本身要开启 Gateway 模式。</p><h4 id="重启生效"><a href="#重启生效" class="headerlink" title="重启生效"></a><strong>重启生效</strong></h4><p>代理配置完成后，<code>reboot</code> 重启当然可以生效，但不重启也行。</p><p><code>docker build</code> 代理是在执行前设置的，所以修改后，下次执行立即生效。Container 代理的修改也是立即生效的，但是只针对以后启动的 Container，对已经启动的 Container 无效。</p><p><code>dockerd</code> 代理的修改比较特殊，它实际上是改 <code>systemd</code> 的配置，因此需要重载 <code>systemd</code> 并重启 <code>dockerd</code> 才能生效。</p><p>bash</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo systemctl daemon-reload<br>sudo systemctl restart docker<br></code></pre></td></tr></table></figure><h4 id="官方示例"><a href="#官方示例" class="headerlink" title="官方示例"></a>官方示例</h4><p>下面是来自 <a href="https://docs.docker.com/config/daemon/systemd/#httphttps-proxy">官方文档</a> 的操作步骤和详细解释：</p><ul><li>创建 dockerd 相关的 systemd 目录，这个目录下的配置将覆盖 dockerd 的默认配置</li></ul><p>bash</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ sudo <span class="hljs-built_in">mkdir</span> -p /etc/systemd/system/docker.service.d<br></code></pre></td></tr></table></figure><ul><li>新建配置文件 <code>/etc/systemd/system/docker.service.d/http-proxy.conf</code>，这个文件中将包含环境变量</li></ul><p>ini</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[Service]</span><br><span class="hljs-attr">Environment</span>=<span class="hljs-string">&quot;HTTP_PROXY=http://proxy.example.com:80&quot;</span><br><span class="hljs-attr">Environment</span>=<span class="hljs-string">&quot;HTTPS_PROXY=https://proxy.example.com:443&quot;</span><br></code></pre></td></tr></table></figure><ul><li>如果你自己建了私有的镜像仓库，需要 dockerd 绕过代理服务器直连，那么配置 <code>NO_PROXY</code> 变量：</li></ul><p>ini</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[Service]</span><br><span class="hljs-attr">Environment</span>=<span class="hljs-string">&quot;HTTP_PROXY=http://proxy.example.com:80&quot;</span><br><span class="hljs-attr">Environment</span>=<span class="hljs-string">&quot;HTTPS_PROXY=https://proxy.example.com:443&quot;</span><br><span class="hljs-attr">Environment</span>=<span class="hljs-string">&quot;NO_PROXY=your-registry.com,10.10.10.10,*.example.com&quot;</span><br></code></pre></td></tr></table></figure><p>多个 <code>NO_PROXY</code> 变量的值用逗号分隔，而且可以使用通配符（*），极端情况下，如果 <code>NO_PROXY=*</code>，那么所有请求都将不通过代理服务器。</p><ul><li>重新加载配置文件，重启 dockerd</li></ul><p>bash</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ sudo systemctl daemon-reload<br>$ sudo systemctl restart docker<br></code></pre></td></tr></table></figure><ul><li>检查确认环境变量已经正确配置：</li></ul><p>bash</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ sudo systemctl show --property=Environment docker<br></code></pre></td></tr></table></figure><ul><li>从 <code>docker info</code> 的结果中查看配置项。</li></ul><p><img src="20240622154545.webp" alt="img"></p><p><strong>img</strong></p><p>这样配置后，应该可以正常拉取 docker 镜像。</p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><h5 id="提供一种生产环境可选方式"><a href="#提供一种生产环境可选方式" class="headerlink" title="提供一种生产环境可选方式"></a>提供一种生产环境可选方式</h5><p>内网环境可以通过 <a href="https://help.sonatype.com/en/docker-registry.html">sonatype</a> 或者 <a href="https://goharbor.io/">harbor</a> 搭建私有注册服务器，然后在私有注册服务上配置隧道代理，让私有注册服务通过隧道代理缓存外部镜像。这么做即可以减少<a href="https://www.qikqiak.com/post/containerd-usage/">容器运行时</a>配置隧道代理复杂性，可以在后续使用中从本地私有注册服务中获取镜像，内网使用速度更快，而且可以保证本地镜像重用。</p><p>两种工具都提供多样的部署策略，如本地化部署，docker 方式，和 k8s 方式。</p><p>在部署复杂度方面， <a href="https://goharbor.io/">harbor</a> 依赖 redis 和 postgres ，对于运维能力要求较高。<a href="https://help.sonatype.com/en/docker-registry.html">sonatype</a> 可以使用内嵌本地数据库，在部署时记得做好数据备份。</p><p>相关链接：</p><ul><li><a href="https://docs.docker.com/engine/install/">docker ce install</a></li><li><a href="https://docs.docker.com/config/daemon/systemd/">config docker proxy</a></li><li><a href="https://docs.docker.com/docker-hub/mirror/#configure-the-docker-daemon">config docker registry mirror</a></li><li><a href="https://askubuntu.com/questions/7470/how-to-run-sudo-apt-get-update-through-proxy-in-commandline">How to run “sudo apt-get update” through proxy in commandline?</a></li><li><a href="https://github.com/containerd/containerd/blob/main/docs/hosts.md#registry-configuration---examples">config containerd registry</a></li></ul><p>方案组合：</p><ul><li>dockerhub –&gt; proxy –&gt; docker daemon</li><li>dockerhub –&gt; cloudflare –&gt; docker daemon</li><li>dockerhub –&gt; cloudflare –&gt; nexus-rm –&gt; docker daemon</li><li>dockerhub –&gt; proxy –&gt; nexus-rm –&gt; docker daemon</li><li>其他组合</li></ul><p>使用私服和不使用私服最大的区别就是是否在本地环境缓存一份远程镜像。在使用私服的情况下，即使断网或者代理不通，依然可以在内网环境继续使用已经缓存了的镜像，还有就是命中已经缓存的镜像在内网速度更快。</p><h5 id="提供一种服务器快捷部署特定梯子的方式"><a href="#提供一种服务器快捷部署特定梯子的方式" class="headerlink" title="提供一种服务器快捷部署特定梯子的方式"></a>提供一种服务器快捷部署特定梯子的方式</h5><p><a href="https://xtls.github.io/">xtls</a> 是一个功能强大的代理软件，当你有代理服务时，可以通过容器化的方式在服务器部署客户端，供内网其他程序使用。</p><p>yaml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">x-base:</span> <span class="hljs-string">&amp;default-config</span><br>  <span class="hljs-attr">restart:</span> <span class="hljs-string">unless-stopped</span><br>  <span class="hljs-attr">ulimits:</span><br>    <span class="hljs-attr">nproc:</span> <span class="hljs-number">65535</span><br>    <span class="hljs-attr">nofile:</span><br>      <span class="hljs-attr">soft:</span> <span class="hljs-number">20000</span><br>      <span class="hljs-attr">hard:</span> <span class="hljs-number">40000</span><br>  <span class="hljs-attr">stop_grace_period:</span> <span class="hljs-string">1m</span><br>  <span class="hljs-attr">logging:</span><br>    <span class="hljs-attr">driver:</span> <span class="hljs-string">json-file</span><br>    <span class="hljs-attr">options:</span><br>      <span class="hljs-attr">max-size:</span> <span class="hljs-string">&#x27;100m&#x27;</span><br>      <span class="hljs-attr">max-file:</span> <span class="hljs-string">&#x27;1&#x27;</span><br>  <span class="hljs-attr">mem_swappiness:</span> <span class="hljs-number">0</span><br><br><span class="hljs-attr">services:</span><br>  <span class="hljs-attr">v2ray:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">teddysun/xray</span><br>    <span class="hljs-attr">container_name:</span> <span class="hljs-string">xray</span><br>    <span class="hljs-string">&lt;&lt;:</span> <span class="hljs-string">*default-config</span><br>    <span class="hljs-attr">ports:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-number">1080</span><span class="hljs-string">:1080</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-number">1081</span><span class="hljs-string">:1081</span><br>    <span class="hljs-attr">volumes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">$&#123;PWD&#125;/config.json:/etc/xray/config.json</span><br><br><span class="hljs-attr">networks:</span><br>  <span class="hljs-attr">default:</span><br>    <span class="hljs-attr">external:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">other</span><br></code></pre></td></tr></table></figure><p>最后建议大家在使用社区提供的镜像加速时，额外关注镜像安全方面的问题，尽可能使用可信的镜像，特别是在生产环境中。因为大多数使用 docker 都是以特权模式运行，在其他容器运行时环境中的特定需求中也会使用特权模式运行容器。如果容器存在漏洞后门，或者植入挖矿脚本，会带来风险性问题。</p><h3 id="Qnap-docker-代理配置"><a href="#Qnap-docker-代理配置" class="headerlink" title="Qnap docker 代理配置"></a>Qnap docker 代理配置</h3><ol><li>登录 nas ssh 命令行</li><li><code>sudo -i</code>切换 admin 操作</li><li><code>cd /share/CACHEDEV2_DATA/.qpkg/container-station/script</code></li></ol><p>测试时container安装在&#x2F;share&#x2F;CACHEDEV2_DATA&#x2F;，自己环境根据自己的路径修改</p><ol><li><code>vi run-docker.sh</code></li></ol><p>倒数第二行加入（改成自己的网段与端口）：</p><p>bash</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">export</span> http_proxy=<span class="hljs-string">&quot;http://192.168.168.89:7890&quot;</span><br><span class="hljs-built_in">export</span> https_proxy=<span class="hljs-string">&quot;http://192.168.168.89:7890&quot;</span><br><span class="hljs-built_in">export</span> no_proxy= <span class="hljs-string">&quot;192.168.168.0/24,localhost,127.0.0.1,::1&quot;</span><br></code></pre></td></tr></table></figure><p><img src="file:///D:/rolli/Pictures/tmp/clip_image002.jpg" alt="img"></p><p><strong>img</strong></p><p>Reload Image</p><ol><li>重启 container</li></ol><p>bash</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">/etc/init.d/container-station.sh restart<br></code></pre></td></tr></table></figure><h3 id="Docker-Hub-镜像加速器"><a href="#Docker-Hub-镜像加速器" class="headerlink" title="Docker Hub 镜像加速器"></a>Docker Hub 镜像加速器</h3><p>国内从 Docker Hub 拉取镜像有时会遇到困难，此时可以配置镜像加速器。</p><blockquote><p>Dockerized 实践 <a href="https://github.com/y0ngb1n/dockerized">https://github.com/y0ngb1n/dockerized</a></p><p><a href="https://gist.github.com/y0ngb1n/7e8f16af3242c7815e7ca2f0833d3ea6">国内的 Docker Hub 镜像加速器，由国内教育机构与各大云服务商提供的镜像加速服务 | Dockerized 实践 https://github.com/y0ngb1n/dockerized</a></p></blockquote><h4 id="Docker-daemon-配置代理"><a href="#Docker-daemon-配置代理" class="headerlink" title="Docker daemon 配置代理"></a>Docker daemon 配置代理</h4><p>参考 <a href="https://docs.docker.com/config/daemon/systemd/#httphttps-proxy">Docker daemon 配置代理</a></p><h4 id="自建镜像加速服务"><a href="#自建镜像加速服务" class="headerlink" title="自建镜像加速服务"></a>自建镜像加速服务</h4><ul><li><a href="https://github.com/bboysoulcn/registry-mirror">自建镜像仓库代理服务</a></li><li><a href="https://github.com/ImSingee/hammal">利用 Cloudflare Workers 自建 Docker Hub 镜像</a></li></ul><h4 id="国内三方加速镜像"><a href="#国内三方加速镜像" class="headerlink" title="国内三方加速镜像"></a>国内三方加速镜像</h4><blockquote><p>⚠️⚠️⚠️ 自 2024-06-06 开始，国内的 Docker Hub 镜像加速器相继停止服务，可选择为 Docker daemon 配置代理或自建镜像加速服务。</p></blockquote><hr><blockquote><p>Ubuntu 16.04+、Debian 8+、CentOS 7+</p></blockquote><p>创建或修改 <code>/etc/docker/daemon.json</code>：</p><p>bash</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo <span class="hljs-built_in">mkdir</span> -p /etc/docker<br>sudo <span class="hljs-built_in">tee</span> /etc/docker/daemon.json &lt;&lt;-<span class="hljs-string">&#x27;EOF&#x27;</span><br>&#123;<br>    <span class="hljs-string">&quot;registry-mirrors&quot;</span>: [<br>        <span class="hljs-string">&quot;https://dockerproxy.com&quot;</span>,<br>        <span class="hljs-string">&quot;https://docker.mirrors.ustc.edu.cn&quot;</span>,<br>        <span class="hljs-string">&quot;https://docker.nju.edu.cn&quot;</span><br>    ]<br>&#125;<br>EOF<br>sudo systemctl daemon-reload<br>sudo systemctl restart docker<br></code></pre></td></tr></table></figure><h4 id="Docker-Hub-镜像加速器列表"><a href="#Docker-Hub-镜像加速器列表" class="headerlink" title="Docker Hub 镜像加速器列表"></a>Docker Hub 镜像加速器列表</h4><p>Docker 官方和国内很多云服务商都提供了国内加速器服务。以下镜像站来源于互联网（感谢热心网友），可能出现宕机、转内网、关停等情况，建议同时配置多个镜像源。</p><table><thead><tr><th align="left">镜像加速器</th><th align="left">镜像加速器地址</th><th align="left">专属加速器<a href="https://gist.github.com/y0ngb1n/7e8f16af3242c7815e7ca2f0833d3ea6#">？</a></th><th align="left">其它加速<a href="https://gist.github.com/y0ngb1n/7e8f16af3242c7815e7ca2f0833d3ea6#">？</a></th></tr></thead><tbody><tr><td align="left"><a href="https://docker-cn.com/registry-mirror">Docker 中国官方镜像</a></td><td align="left"><code>https://registry.docker-cn.com</code></td><td align="left"></td><td align="left">Docker Hub（<a href="https://github.com/docker/docker.github.io/issues/8793">已关闭</a>）</td></tr><tr><td align="left"><a href="https://github.com/DaoCloud/public-image-mirror">DaoCloud 镜像站</a></td><td align="left"><code>https://docker.m.daocloud.io</code></td><td align="left"></td><td align="left">Docker Hub、GCR、K8S、GHCR、Quay、NVCR 等</td></tr><tr><td align="left"><a href="https://github.com/Azure/container-service-for-azure-china/blob/master/aks/README.md#22-container-registry-proxy">Azure 中国镜像</a></td><td align="left"><code>https://dockerhub.azk8s.cn</code></td><td align="left"><a href="https://mirror.azk8s.cn/help/docker-registry-proxy-cache.html">仅供内部访问</a></td><td align="left">Docker Hub、GCR、Quay</td></tr><tr><td align="left"><a href="https://mirrors.ustc.edu.cn/help/dockerhub.html">科大镜像站</a></td><td align="left"><code>https://docker.mirrors.ustc.edu.cn</code></td><td align="left"><a href="https://mirrors.ustc.edu.cn/help/dockerhub.html">仅供内部访问</a></td><td align="left">Docker Hub、<a href="https://github.com/ustclug/mirrorrequest/issues/91">GCR</a>、<a href="https://github.com/ustclug/mirrorrequest/issues/135">Quay</a></td></tr><tr><td align="left"><a href="https://cr.console.aliyun.com/">阿里云</a></td><td align="left"><code>https://&lt;your_code&gt;.mirror.aliyuncs.com</code></td><td align="left">需登录，系统分配</td><td align="left">Docker Hub</td></tr><tr><td align="left"><a href="https://kirk-enterprise.github.io/hub-docs/#/user-guide/mirror">七牛云</a></td><td align="left"><code>https://reg-mirror.qiniu.com</code></td><td align="left"></td><td align="left">Docker Hub、GCR、Quay</td></tr><tr><td align="left"><a href="https://www.163yun.com/help/documents/56918246390157312">网易云</a></td><td align="left"><code>https://hub-mirror.c.163.com</code></td><td align="left"></td><td align="left">Docker Hub</td></tr><tr><td align="left"><a href="https://cloud.tencent.com/document/product/457/9113">腾讯云</a></td><td align="left"><code>https://mirror.ccs.tencentyun.com</code></td><td align="left">仅供内部访问</td><td align="left">Docker Hub</td></tr><tr><td align="left"><a href="https://dockerproxy.com/">Docker 镜像代理</a></td><td align="left"><code>https://dockerproxy.com</code></td><td align="left"></td><td align="left">Docker Hub、GCR、K8S、GHCR</td></tr><tr><td align="left"><a href="https://cloud.baidu.com/doc/CCE/s/Yjxppt74z#%E4%BD%BF%E7%94%A8dockerhub%E5%8A%A0%E9%80%9F%E5%99%A8">百度云</a></td><td align="left"><code>https://mirror.baidubce.com</code></td><td align="left"></td><td align="left">Docker Hub</td></tr><tr><td align="left"><a href="https://doc.nju.edu.cn/books/35f4a">南京大学镜像站</a></td><td align="left"><code>https://docker.nju.edu.cn</code></td><td align="left"></td><td align="left">Docker Hub、GCR、GHCR、Quay、NVCR 等</td></tr><tr><td align="left"><a href="https://mirrors.sjtug.sjtu.edu.cn/">上海交大镜像站</a></td><td align="left"><code>https://docker.mirrors.sjtug.sjtu.edu.cn</code></td><td align="left"></td><td align="left">Docker Hub、GCR 等（<a href="https://sjtug.org/post/mirror-news/2024-06-06-takedown-dockerhub/">已关闭</a>）</td></tr><tr><td align="left"><a href="https://mirror.iscas.ac.cn/mirror/docker.html">中科院软件所镜像站</a></td><td align="left"><code>https://mirror.iscas.ac.cn</code></td><td align="left"></td><td align="left">Docker Hub</td></tr></tbody></table><blockquote><p>⚠️ 部分网友反馈以下镜像站存在未同步最新源镜像问题，请按需选用（评论区可考古）</p><ul><li>阿里云</li></ul></blockquote><h4 id="检查加速器是否生效"><a href="#检查加速器是否生效" class="headerlink" title="检查加速器是否生效"></a>检查加速器是否生效</h4><p>命令行执行 <code>docker info</code>，如果从结果中看到了如下内容，说明配置成功。</p><p>bash</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">Registry Mirrors:<br> [...]<br> https://docker.m.daocloud.io<br></code></pre></td></tr></table></figure><h4 id="Docker-Hub-镜像测速"><a href="#Docker-Hub-镜像测速" class="headerlink" title="Docker Hub 镜像测速"></a>Docker Hub 镜像测速</h4><p>使用镜像前后，可使用 <code>time</code> 统计所花费的总时间。测速前先移除本地的镜像！</p><p>bash</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ docker rmi node:latest<br>$ time docker pull node:latest<br>Pulling repository node<br>[...]<br><br>real   1m14.078s<br>user   0m0.176s<br>sys    0m0.120s<br></code></pre></td></tr></table></figure><h2 id="Hexo入门篇"><a href="#Hexo入门篇" class="headerlink" title="Hexo入门篇"></a>Hexo入门篇</h2><h3 id="Hexo-通用简明教程"><a href="#Hexo-通用简明教程" class="headerlink" title="Hexo 通用简明教程"></a>Hexo 通用简明教程</h3><p><a href="https://hexo.io/zh-cn/">Hexo</a> 是一个快速、简洁且高效的博客框架。Hexo 使用 <a href="http://daringfireball.net/projects/markdown/">Markdown</a>（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p><h4 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h4><p>安装 Hexo 相当简单，只需要先安装下列应用程序即可：</p><ul><li><a href="http://nodejs.org/">Node.js</a> (Node.js 版本需不低于 8.10，建议使用 Node.js 10.0 及以上版本)</li><li><a href="http://git-scm.com/">Git</a></li><li><a href="https://www.npmjs.com/">nmp</a></li></ul><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>所有必备的应用程序安装完成后，即可使用 npm 安装 Hexo。</p><p>bash</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install -g hexo-cli<br></code></pre></td></tr></table></figure><p>安装以后，可以使用以下两种方式执行 Hexo：</p><ol><li><code>npx hexo</code></li><li>将 Hexo 所在的目录下的 <code>node_modules</code> 添加到环境变量之中即可直接使用： <code>hexo</code></li></ol><p>bash</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;PATH=&quot;$PATH:./node_modules/.bin&quot;&#x27;</span> &gt;&gt; ~/.profile<br></code></pre></td></tr></table></figure><h4 id="升级"><a href="#升级" class="headerlink" title="升级"></a>升级</h4><p>后期需要升级的化，进入 blog 目录，先检查更新:</p><p>bash</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ npm outdated<br>Package                  Current  Wanted  Latest  Location<br>hexo                       3.9.0   3.9.0   4.2.0  hexo-site<br>hexo-deployer-git          1.0.0   1.0.0   2.1.0  hexo-site<br>hexo-generator-archive     0.1.5   0.1.5   1.0.0  hexo-site<br>hexo-generator-category    0.1.3   0.1.3   1.0.0  hexo-site<br>hexo-generator-feed        1.2.2   1.2.2   2.2.0  hexo-site<br>hexo-generator-index       0.2.1   0.2.1   1.0.0  hexo-site<br>hexo-generator-tag         0.2.0   0.2.0   1.0.0  hexo-site<br>hexo-renderer-ejs          0.3.1   0.3.1   1.0.0  hexo-site<br>hexo-renderer-marked       0.3.2   0.3.2   2.0.0  hexo-site<br>hexo-renderer-stylus       0.3.3   0.3.3   1.1.0  hexo-site<br>hexo-server                0.3.3   0.3.3   1.0.0  hexo-site<br></code></pre></td></tr></table></figure><p>修改 <code>package.json</code> 文件，基于 <code>Latest</code> 列内容更新版本号，然后更新并检查版本号：</p><p>bash</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ npm install --save<br><br><span class="hljs-comment"># 检查版本号</span><br>$ hexo -v<br>hexo: 4.2.0<br>hexo-cli: 3.1.0<br>......<br></code></pre></td></tr></table></figure><h4 id="建站"><a href="#建站" class="headerlink" title="建站"></a>建站</h4><p>安装 Hexo 完成后，请执行下列命令，Hexo 将会在指定文件夹中新建所需要的文件。</p><p>bash</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo init &lt;folder&gt;<br><span class="hljs-built_in">cd</span> &lt;folder&gt;<br>npm install<br></code></pre></td></tr></table></figure><h4 id="启动网页服务"><a href="#启动网页服务" class="headerlink" title="启动网页服务"></a>启动网页服务</h4><p>此时，通过 <code>hexo s</code> 命令即可在本地启动您的博客站点了。</p><p>bash</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo s<br>INFO  Start processing<br>INFO  Hexo is running at http://localhost:4000 . Press Ctrl+C to stop.<br></code></pre></td></tr></table></figure><p>接下来将安装主题，配置博客托管平台，实现一键发布并刷新 CDN 缓存。</p><h3 id="npm下载加速"><a href="#npm下载加速" class="headerlink" title="npm下载加速"></a>npm下载加速</h3><h4 id="安装淘宝镜像，-加速NPM"><a href="#安装淘宝镜像，-加速NPM" class="headerlink" title="安装淘宝镜像， 加速NPM"></a>安装淘宝镜像， 加速NPM</h4><p>bash</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm config <span class="hljs-built_in">set</span> registry http://registry.npmmirror.com<br></code></pre></td></tr></table></figure><h4 id="安装CNPM"><a href="#安装CNPM" class="headerlink" title="安装CNPM"></a>安装CNPM</h4><blockquote><p>个人使用体验来说，<code>npm</code>兼容性最好，如果你遇到某个包<code>cnpm</code>或者<code>yarn</code>安装失败，试试最原始的老婆吗，或许有奇效！</p></blockquote><p>bash</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install -g cnpm --registry=http://registry.npmmirror.com<br></code></pre></td></tr></table></figure><h3 id="Hexo-日常操作命令"><a href="#Hexo-日常操作命令" class="headerlink" title="Hexo 日常操作命令"></a>Hexo 日常操作命令</h3><p>bash</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 进入hexo docker 环境。需要你已经安装了docker环境，并安装了上文提到的hexo docker</span><br>docker <span class="hljs-built_in">exec</span> -it hexo /bin/bash<br><span class="hljs-comment"># 运行完这条命令后，你就发现命令提示符变了，你此时进入了一个独立于你的主机运行环境的新的 node + hexo 开发环境了。</span><br><br><span class="hljs-comment"># 生成新页面 404</span><br>hexo new page 404<br><br><span class="hljs-comment"># 新增新文章 2022-03-26-blog.17lai.site</span><br>hexo new post 2022-03-26-blog.17lai.site<br><br><span class="hljs-comment"># 清理上次生成的静态网页，可以不运行，但你修改了一些源码后，很可能有各种不生效或错误</span><br>hexo clean<br><br><span class="hljs-comment"># 生成静态网页</span><br>hexo g<br><br><span class="hljs-comment"># gulp调用gulpfile.js压缩静态网页相关代码，减小网页体积</span><br>gulp <br><br><span class="hljs-comment"># 调用根目录中 _config.yml 文件的deploy配置的参数来部署你的静态网页</span><br>hexo d<br></code></pre></td></tr></table></figure><h3 id="hexo-目录结构说明"><a href="#hexo-目录结构说明" class="headerlink" title="hexo 目录结构说明"></a>hexo 目录结构说明</h3><p>在执行过<code>Hexo deploy</code>命令之后，目录结构新增了<code>.deploy_git</code>，<code>public</code>，<code>.gitignore</code>，如下：</p><p>bash</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs bash"> $ tree -L 2<br>.<br>├── .deploy_git<br>├── node_modules<br>├── public<br>├── scaffolds<br>│   ├── draft.md<br>│   ├── page.md<br>│   └── post.md<br>├── <span class="hljs-built_in">source</span><br>│   ├── _posts<br>│   ├── _drafts<br>├── themes<br>├── _config.yml<br>├── db.json<br>├── package.json<br>└── package-lock.json<br></code></pre></td></tr></table></figure><h5 id="config-yml"><a href="#config-yml" class="headerlink" title="_config.yml"></a>_config.yml</h5><p>用来配置博客相关的参数，初始化时自动创建。具体参数设置，可参照 <a href="https://hexo.io/zh-cn/docs/configuration">Hexo 配置</a> 文档。</p><h5 id="node-modules-和-package-json"><a href="#node-modules-和-package-json" class="headerlink" title="node_modules 和 package.json"></a>node_modules 和 package.json</h5><p>都是在初始化时自动创建。</p><ul><li><code>node_modules</code>用来存储已安装的各类依赖包。</li><li><code>package.json</code>用来查看 Hexo 的版本以及相关依赖包的版本。</li></ul><p>Hexo 会默认安装：</p><ul><li>hexo：主程序</li><li>hexo-deployer-git：实现 git 部署方式</li><li>hexo-generator-archive：存档页面生成器</li><li>hexo-generator-category：分类页面生成器</li><li>hexo-generator-index：index 生成器</li><li>hexo-generator-tag：标签页面生成器</li><li>hexo-renderer-ejs：支持 EJS 渲染</li><li>hexo-renderer-marked：Markdown 引擎</li><li>hexo-renderer-stylus：支持 stylus 渲染</li><li>hexo-server：支持本地预览，默认地址 localhost:4000</li></ul><p>新安装的依赖包，也会保存在<code>node_module</code>文件夹下。</p><h5 id="scaffold"><a href="#scaffold" class="headerlink" title="scaffold"></a>scaffold</h5><p>模板文件夹，初始化时自动创建。包含<code>page</code>，<code>post</code>，<code>draft</code>三种模板，分别对应 页面、要发布的文章、草稿。</p><h5 id="themes"><a href="#themes" class="headerlink" title="themes"></a>themes</h5><p>主题文件夹，初始化时自动创建。每一个主题，都有一个单独的文件夹。默认主题为 <a href="https://github.com/hexojs/hexo-theme-landscape">landscape</a>。</p><h5 id="source-，-public-和-deploy-git"><a href="#source-，-public-和-deploy-git" class="headerlink" title="source ， public 和 .deploy_git"></a>source ， public 和 .deploy_git</h5><ul><li>source：资源文件夹。用来存放图片、Markdown 文档（文章、草稿）、各种页面（分类、关于页面等）。</li><li>public：将 source 文件夹里的 Markdown 文档，转换成 index.html。再结合主题进行渲染，就是我们最终看到的博客。</li><li>.deploy_git：将 public 文件夹的内容提交到 Github 后生成，内容与 public 文件夹基本一致。</li></ul><p>这三者的关系大致是：source -&gt; public -&gt; .deploy_git</p><ul><li>执行<code>hexo generate</code>，根据 source，更新 public。</li><li>执行<code>hexo deploy</code>，根据 public，更新 .deploy_git。</li></ul><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><h4 id="指令说明"><a href="#指令说明" class="headerlink" title="指令说明"></a>指令说明</h4><ul><li><code>hexo server</code> #启动本地服务器，用于预览主题。Hexo 会监视文件变动并自动更新，除修改站点配置文件外,无须重启服务器,直接刷新网页即可生效。</li><li><code>hexo server -s</code> #以静态模式启动</li><li><code>hexo server -p 5000</code> #更改访问端口 (默认端口为 4000，’ctrl + c’关闭 server)</li><li><code>hexo server -i IP地址</code> #自定义 IP</li><li><code>hexo clean</code> #清除缓存 ,网页正常情况下可以忽略此条命令,执行该指令后,会删掉站点根目录下的 public 文件夹</li><li><code>hexo g</code> #生成静态网页 (执行 $ <code>hexo g</code>后会在站点根目录下生成 public 文件夹, hexo 会将”&#x2F;blog&#x2F;source&#x2F;“ <a href="http://下面的.md/">下面的.md</a> 后缀的文件编译为.html 后缀的文件,存放在”&#x2F;blog&#x2F;public&#x2F; “ 路径下)</li><li><code>hexo d</code> #自动生成网站静态文件，并将本地数据部署到设定的仓库(如 github)</li><li><code>hexo init</code> 文件夹名称 #初始化 XX 文件夹名称</li><li><code>npm update hexo -g</code>#升级</li><li><code>npm install hexo -g</code> #安装</li><li><code>node -v</code> #查看 node.js 版本号</li><li><code>npm -v</code> #查看 npm 版本号</li><li><code>git --version</code> #查看 git 版本号</li><li><code>hexo -v</code> #查看 hexo 版本号</li><li>hexo new page “music” #新增页面music</li><li>hexo new post “文章名称” #新增文章</li></ul><h4 id="简写指令"><a href="#简写指令" class="headerlink" title="简写指令"></a>简写指令</h4><ul><li><code>hexo n &quot;我的第一篇文章&quot;</code> 等价于 <code>hexo new &quot;我的第一篇文章&quot;</code> 还等价于 <code>hexo new post &quot;我的第一篇文章&quot;</code></li><li><code>hexo p</code> 等价于 <code>hexo publish</code></li><li><code>hexo g</code> 等价于 <code>hexo generate</code></li><li><code>hexo s</code>等价于 <code>hexo server</code></li><li><code>hexo d</code> 等价于 <code>hexo deploy</code></li><li><code>hexo g -d</code>等价于<code>hexo generate --deploy</code></li></ul><p>注: <code>hexo clean</code> 没有 简写, <code>git --version</code> 没有简写</p><h3 id="hexo版本升级"><a href="#hexo版本升级" class="headerlink" title="hexo版本升级"></a>hexo版本升级</h3><blockquote><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey">Docker`镜像直接提供最新版本`node`，`hexo<br></code></pre></td></tr></table></figure></blockquote><h4 id="升级-Node"><a href="#升级-Node" class="headerlink" title="升级 Node"></a>升级 Node</h4><p>none</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs none"># n 是交互式 node.js 版本管理工具<br>sudo npm install -g n<br># 更新到 node 16 LTS<br>sudo n 16<br></code></pre></td></tr></table></figure><h4 id="升级-Hexo"><a href="#升级-Hexo" class="headerlink" title="升级 Hexo"></a>升级 Hexo</h4><p>none</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs none"># 安装 npm-check 和 npm-upgrade<br>npm install -g npm-check npm-upgrade<br># 检查本地插件版本<br>npm-check<br># 交互式升级，根据提示即可完成升级<br>npm-upgrade<br></code></pre></td></tr></table></figure><p>现在 Hexo 及插件已经升级成功，执行 <code>hexo version</code> 查看版本。</p><h3 id="设置npm源的几种方式"><a href="#设置npm源的几种方式" class="headerlink" title="设置npm源的几种方式"></a>设置npm源的几种方式</h3><h4 id="原始源"><a href="#原始源" class="headerlink" title="原始源"></a>原始源</h4><p>txt</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs txt"># the original source<br>https://registry.npmjs.org/<br></code></pre></td></tr></table></figure><h4 id="方案-使用nrm"><a href="#方案-使用nrm" class="headerlink" title="方案: 使用nrm"></a>方案: 使用nrm</h4><ul><li>安装</li></ul><p>bash</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install -g nrm<br></code></pre></td></tr></table></figure><ul><li>列出源的候选项</li></ul><p>bash</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">nrm <span class="hljs-built_in">ls</span><br></code></pre></td></tr></table></figure><p>输出结果：</p><p>txt</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs txt">* npm -------- https://registry.npmjs.org/<br>  yarn ------- https://registry.yarnpkg.com/<br>  cnpm ------- http://r.cnpmjs.org/<br>  taobao ----- https://registry.npmmirror.com/<br>  nj --------- https://registry.nodejitsu.com/<br>  npmMirror -- https://skimdb.npmjs.com/registry/<br>  edunpm ----- http://registry.enpmjs.org/<br></code></pre></td></tr></table></figure><ul><li>使用淘宝源</li></ul><p>bash</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">nrm use taobao<br></code></pre></td></tr></table></figure><h4 id="方案-改变全局的注册"><a href="#方案-改变全局的注册" class="headerlink" title="方案: 改变全局的注册"></a>方案: 改变全局的注册</h4><ul><li>设置成淘宝源</li></ul><p>bash</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm config <span class="hljs-built_in">set</span> registry https://registry.npmmirror.com<br></code></pre></td></tr></table></figure><ul><li>查看结果</li></ul><p>bash</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm config get registry<br></code></pre></td></tr></table></figure><p>输出结果：</p><p>txt</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">https://registry.npmmirror.com/<br></code></pre></td></tr></table></figure><ul><li>测试一下</li></ul><p>bash</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm info underscore<br></code></pre></td></tr></table></figure><h4 id="方案-在命令行里指定源"><a href="#方案-在命令行里指定源" class="headerlink" title="方案: 在命令行里指定源"></a>方案: 在命令行里指定源</h4><p>bash</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm --registry https://registry.npmmirror.com install [name]<br></code></pre></td></tr></table></figure><h4 id="方案-修改-npmrc"><a href="#方案-修改-npmrc" class="headerlink" title="方案: 修改 ~/.npmrc"></a>方案: 修改 <code>~/.npmrc</code></h4><p>txt</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">registry = https://registry.npmmirror.com<br></code></pre></td></tr></table></figure><h4 id="方案-使用cnpm"><a href="#方案-使用cnpm" class="headerlink" title="方案: 使用cnpm"></a>方案: 使用cnpm</h4><p>bash</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install -g cnpm --registry=https://registry.npmmirror.com<br>cnpm install [name]<br></code></pre></td></tr></table></figure><h2 id="Hexo基础配置篇"><a href="#Hexo基础配置篇" class="headerlink" title="Hexo基础配置篇"></a>Hexo基础配置篇</h2><h3 id="下载主题"><a href="#下载主题" class="headerlink" title="下载主题"></a>下载主题</h3><p><a href="https://github.com/blinkfox/hexo-theme-matery">hexo-theme-matery</a> 是一个采用 <code>Material Design</code> 和响应式设计的 Hexo 博客主题，点击 <a href="https://blog.17lai.site/">这里</a> 可以查看示例效果。点击 <a href="https://codeload.github.com/blinkfox/hexo-theme-matery/zip/master">这里</a> 下载 <code>master</code> 分支的最新稳定版的代码，解压缩后，将 <code>hexo-theme-matery</code> 的文件夹复制到 Hexo 的 <code>themes</code> 文件夹中即可。</p><p>Docker环境命令</p><p>bash</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> https://github.com/blinkfox/hexo-theme-matery.git /app/themes/matery; <br></code></pre></td></tr></table></figure><h3 id="切换主题"><a href="#切换主题" class="headerlink" title="切换主题"></a>切换主题</h3><p>修改 Hexo 根目录下的 <code>_config.yml</code> 的 <code>theme</code> 的值：<code>theme: hexo-theme-matery</code></p><h4 id="config-yml-文件的其它修改建议"><a href="#config-yml-文件的其它修改建议" class="headerlink" title="_config.yml 文件的其它修改建议"></a><code>_config.yml</code> 文件的其它修改建议</h4><ul><li>请修改 <code>_config.yml</code> 的 <code>url</code> 的值为你的网站主 <code>URL</code>（如：<code>http://xxx.github.io</code>）。</li><li>建议修改两个 <code>per_page</code> 的分页条数值为 <code>6</code> 的倍数，如：<code>12</code>、<code>18</code> 等，这样文章列表在各个屏幕下都能较好的显示。</li><li>如果是中文用户，则建议修改 <code>language</code> 的值为 <code>zh-CN</code>。</li></ul><p>在本主题的 <code>_config.yml</code> 中可以修改部分自定义信息，有以下几个部分：</p><ul><li>菜单</li><li>我的梦想</li><li>首页的音乐播放器和视频播放器配置</li><li>是否显示推荐文章名称和按钮配置</li><li><code>favicon</code> 和 <code>Logo</code></li><li>个人信息</li><li>TOC 目录</li><li>文章打赏信息</li><li>复制文章内容时追加版权信息</li><li>MathJax</li><li>文章字数统计、阅读时长</li><li>点击页面的’爱心’效果</li><li>我的项目</li><li>我的技能</li><li>我的相册</li><li><code>Gitalk</code>、<code>Gitment</code>、<code>Valine</code> 和 <code>disqus</code> 评论配置</li><li><a href="https://busuanzi.ibruce.info/">不蒜子统计</a>和谷歌分析（<code>Google Analytics</code>）</li><li>默认特色图的集合。当文章没有设置特色图时，本主题会根据文章标题的 <code>hashcode</code> 值取余，来选择展示对应的特色图</li></ul><h3 id="新建主题必备about、tags、404等页面"><a href="#新建主题必备about、tags、404等页面" class="headerlink" title="新建主题必备about、tags、404等页面"></a>新建主题必备about、tags、404等页面</h3><h4 id="新建分类-categories-页"><a href="#新建分类-categories-页" class="headerlink" title="新建分类 categories 页"></a>新建分类 categories 页</h4><p><code>categories</code> 页是用来展示所有分类的页面，如果 <code>source</code> 目录下还没有 <code>categories/index.md</code> 文件，那么就需要新建一个，命令如下：</p><p>bash</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo new page <span class="hljs-string">&quot;categories&quot;</span><br></code></pre></td></tr></table></figure><p>编辑你刚刚新建的页面文件 <code>/source/categories/index.md</code>，至少需要以下内容：</p><p>yaml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">title:</span> <span class="hljs-string">categories</span><br><span class="hljs-attr">date:</span> <span class="hljs-number">2018-09-30 17:25:30</span><br><span class="hljs-attr">type:</span> <span class="hljs-string">&quot;categories&quot;</span><br><span class="hljs-attr">layout:</span> <span class="hljs-string">&quot;categories&quot;</span><br><span class="hljs-meta">---</span><br></code></pre></td></tr></table></figure><h4 id="新建标签-tags-页"><a href="#新建标签-tags-页" class="headerlink" title="新建标签 tags 页"></a>新建标签 tags 页</h4><p><code>tags</code> 页是用来展示所有标签的页面，如果 <code>source</code> 目录下还没有 <code>tags/index.md</code> 文件，那么就需要新建一个，命令如下：</p><p>bash</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo new page <span class="hljs-string">&quot;tags&quot;</span><br></code></pre></td></tr></table></figure><p>编辑刚刚新建的页面文件 <code>/source/tags/index.md</code>，至少需要以下内容：</p><p>yaml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">title:</span> <span class="hljs-string">tags</span><br><span class="hljs-attr">date:</span> <span class="hljs-number">2018-09-30 18:23:38</span><br><span class="hljs-attr">type:</span> <span class="hljs-string">&quot;tags&quot;</span><br><span class="hljs-attr">layout:</span> <span class="hljs-string">&quot;tags&quot;</span><br><span class="hljs-meta">---</span><br></code></pre></td></tr></table></figure><h4 id="新建留言板-contact-页"><a href="#新建留言板-contact-页" class="headerlink" title="新建留言板 contact 页"></a>新建留言板 contact 页</h4><p><code>contact</code> 页是用来展示<strong>留言板</strong>信息的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>contact/index.md</code> 文件，那么你就需要新建一个，命令如下：</p><p>bash</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo new page <span class="hljs-string">&quot;contact&quot;</span><br></code></pre></td></tr></table></figure><p>编辑你刚刚新建的页面文件 <code>/source/contact/index.md</code>，至少需要以下内容：</p><p>yaml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">title:</span> <span class="hljs-string">contact</span><br><span class="hljs-attr">date:</span> <span class="hljs-number">2018-09-30 17:25:30</span><br><span class="hljs-attr">type:</span> <span class="hljs-string">&quot;contact&quot;</span><br><span class="hljs-attr">layout:</span> <span class="hljs-string">&quot;contact&quot;</span><br><span class="hljs-meta">---</span><br></code></pre></td></tr></table></figure><blockquote><p><strong>注</strong>：本留言板功能依赖于第三方评论系统，请<strong>激活</strong>你的评论系统才有效果。并且在主题的 <code>_config.yml</code> 文件中，第 <code>19</code> 至 <code>21</code> 行的“<strong>菜单</strong>”配置，取消关于留言板的注释即可。</p></blockquote><h4 id="新建友情链接-friends-页"><a href="#新建友情链接-friends-页" class="headerlink" title="新建友情链接 friends 页"></a>新建友情链接 friends 页</h4><p><code>friends</code> 页是用来展示<strong>友情链接</strong>信息的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>friends/index.md</code> 文件，那么你就需要新建一个，命令如下：</p><p>bash</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo new page <span class="hljs-string">&quot;friends&quot;</span><br></code></pre></td></tr></table></figure><p>编辑你刚刚新建的页面文件 <code>/source/friends/index.md</code>，至少需要以下内容：</p><p>yaml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">title:</span> <span class="hljs-string">friends</span><br><span class="hljs-attr">date:</span> <span class="hljs-number">2018-12-12 21:25:30</span><br><span class="hljs-attr">type:</span> <span class="hljs-string">&quot;friends&quot;</span><br><span class="hljs-attr">layout:</span> <span class="hljs-string">&quot;friends&quot;</span><br><span class="hljs-meta">---</span><br></code></pre></td></tr></table></figure><p>同时，在你的博客 <code>source</code> 目录下新建 <code>_data</code> 目录，在 <code>_data</code> 目录中新建 <code>friends.json</code> 文件，文件内容如下所示：</p><p>json</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">[</span><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;avatar&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;https://blog.17lai.site/favicon.png&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;夜法之书的Blog&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;introduction&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;嵌入式，Linux Kernel&amp;Driver, PT, Docker, Nas等等&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;url&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;https://blog.17lai.site&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;title&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;前去学习&quot;</span><br><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;avatar&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;http://image.luokangyuan.com/1_qq_27922023.jpg&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;码酱&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;introduction&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;我不是大佬，只是在追寻大佬的脚步&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;url&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;http://luokangyuan.com/&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;title&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;前去学习&quot;</span><br><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;avatar&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;http://image.luokangyuan.com/4027734.jpeg&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;闪烁之狐&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;introduction&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;url&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;https://blinkfox.github.io/&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;title&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;前去学习&quot;</span><br><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;avatar&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;http://image.luokangyuan.com/avatar.jpg&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;ja_rome&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;introduction&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;平凡的脚步也可以走出伟大的行程&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;url&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;https://me.csdn.net/jlh912008548&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;title&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;前去学习&quot;</span><br><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">]</span><br></code></pre></td></tr></table></figure><h4 id="新建关于我-about-页"><a href="#新建关于我-about-页" class="headerlink" title="新建关于我 about 页"></a>新建关于我 about 页</h4><p><code>about</code> 页是用来展示<strong>关于我和我的博客</strong>信息的页面，如果 <code>source</code> 目录下还没有 <code>about/index.md</code> 文件，那么就需要新建一个，命令如下：</p><p>bash</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo new page <span class="hljs-string">&quot;about&quot;</span><br></code></pre></td></tr></table></figure><p>编辑刚刚新建的页面文件 <code>/source/about/index.md</code>，至少需要以下内容：</p><p>yaml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">title:</span> <span class="hljs-string">about</span><br><span class="hljs-attr">date:</span> <span class="hljs-number">2018-09-30 17:25:30</span><br><span class="hljs-attr">type:</span> <span class="hljs-string">&quot;about&quot;</span><br><span class="hljs-attr">layout:</span> <span class="hljs-string">&quot;about&quot;</span><br><span class="hljs-meta">---</span><br></code></pre></td></tr></table></figure><h4 id="新建404页"><a href="#新建404页" class="headerlink" title="新建404页"></a>新建404页</h4><p>新建一个404.md文件</p><p><a href="http://在hexo的souce文件夹下创建一个404.md/">在hexo的souce文件夹下创建一个404.md</a>，之后输入如下内容：</p><p>markdown</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs markdown">---<br>title: 404<br>date: 2019-11-23 21:10:10<br>type: &quot;404&quot;<br><span class="hljs-section">layout: &quot;404&quot;</span><br><span class="hljs-section">---</span><br></code></pre></td></tr></table></figure><p><img src="20230314054810-11.webp" alt="新建404.md"></p><p><strong>新建404.md</strong></p><p>然后<code>hexo g</code>生成页面中就有404。只是页面较丑。</p><h4 id="404页面美化"><a href="#404页面美化" class="headerlink" title="404页面美化"></a>404页面美化</h4><blockquote><p>下载404特效</p><p>点击下载代码:<a href="https://www.lanrenzhijia.com/js/4285.html">点我去代码出处</a></p></blockquote><h5 id="移植"><a href="#移植" class="headerlink" title="移植"></a>移植</h5><h5 id="放入js文件到主题中"><a href="#放入js文件到主题中" class="headerlink" title="放入js文件到主题中"></a>放入js文件到主题中</h5><p>将下载的压缩包解压，会发现里面有两个js文件和一个html页面，重要的就是js文件，将文件移植到主题的source文件的libs文件夹下，需要自己创建一个文件夹，我给文件夹取的名字叫做404。</p><p><img src="20230314055115.webp" alt="img"></p><h5 id="导入404-js"><a href="#导入404-js" class="headerlink" title="导入404 js"></a>导入404 js</h5><p>因为该主题的js文件都是写_config.yml文件里面的，为了规范，也需要将文件的路径写到该文件夹下</p><p>如下，之后导入js文件的时候就可以使用404bodymovin和404data来代替了</p><p><img src="20230314055115-1.webp" alt="修改主题_config.yml文件"></p><p><strong>修改主题_config.yml文件</strong></p><h5 id="编辑404-esj"><a href="#编辑404-esj" class="headerlink" title="编辑404.esj"></a>编辑404.esj</h5><p>markup</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs markup">&lt;style type=&quot;text/css&quot;&gt;<br>    /* don&#x27;t remove. */<br>    .page404-cover &#123;<br>        /* height: 75vh; */<br>        height: 88vh;<br>    &#125;<br> <br>    #svgContainer &#123;<br>      width: 100%;<br>      height: 100%;<br>      background-color: white;<br>      position: absolute;<br>      top: 0;<br>      left: 0;<br>      right: 0;<br>      bottom: 0;<br>      margin: auto;<br>    &#125;<br>&lt;/style&gt;<br><br>&lt;script src=&quot;&lt;%- theme.jsDelivr.url %&gt;&lt;%- url_for(theme.libs.js.404bodymovin) %&gt;&quot;&gt;&lt;/script&gt;<br>&lt;script src=&quot;&lt;%- theme.jsDelivr.url %&gt;&lt;%- url_for(theme.libs.js.404data) %&gt;&quot;&gt;&lt;/script&gt;<br><br>&lt;div class=&quot;bg-cover pd-header page404-cover&quot;&gt;<br>    &lt;div id=&quot;svgContainer&quot;&gt;&lt;/div&gt;<br> <br>    &lt;script type=&quot;text/javascript&quot;&gt;<br>        var svgContainer = document.getElementById(&#x27;svgContainer&#x27;);<br>        var animItem = bodymovin.loadAnimation(&#123;<br>          wrapper: svgContainer,<br>          animType: &#x27;svg&#x27;,<br>          loop: true,<br>          animationData: JSON.parse(animationData)<br>        &#125;);<br>    &lt;/script&gt;<br>&lt;/div&gt;<br></code></pre></td></tr></table></figure><p>现在就移植成功了，使用下面命令上传，之后输入一个错误的页面就可以查看到了</p><p>none</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs none">hexo cl &amp;&amp; hexo g -d<br></code></pre></td></tr></table></figure><blockquote><p>Tips: 不要再本地试验，本地的时候输入错误的页面不会显示404页面的。</p></blockquote><h4 id="新建友情连接-friends-页（可选的）"><a href="#新建友情连接-friends-页（可选的）" class="headerlink" title="新建友情连接 friends 页（可选的）"></a>新建友情连接 friends 页（可选的）</h4><p><code>friends</code> 页是用来展示<strong>友情连接</strong>信息的页面，如果 <code>source</code> 目录下还没有 <code>friends/index.md</code> 文件，那么就需要新建一个，命令如下：</p><p>bash</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo new page <span class="hljs-string">&quot;friends&quot;</span><br></code></pre></td></tr></table></figure><p>编辑刚刚新建的页面文件 <code>/source/friends/index.md</code>，至少需要以下内容：</p><p>yaml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">title:</span> <span class="hljs-string">friends</span><br><span class="hljs-attr">date:</span> <span class="hljs-number">2018-12-12 21:25:30</span><br><span class="hljs-attr">type:</span> <span class="hljs-string">&quot;friends&quot;</span><br><span class="hljs-attr">layout:</span> <span class="hljs-string">&quot;friends&quot;</span><br><span class="hljs-meta">---</span><br></code></pre></td></tr></table></figure><p>同时，在 <code>source</code> 目录下新建 <code>_data</code> 目录，在 <code>_data</code> 目录中新建 <code>friends.json</code> 文件，文件内容如下所示：</p><p>json</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">[</span><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;avatar&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;https://blog.17lai.site/favicon.png&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;和博主交换链接&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;introduction&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;如何和博主交换友情链接介绍。&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;url&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;https://blog.17lai.site/friends&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;title&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;前去交换&quot;</span><br><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;avatar&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;https://images.weserv.nl?url=https://einverne.github.io/images/favicon.ico&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Ein Verne的Blog&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;introduction&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;毅力帝！坚持写了99页的独立BLog博主！&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;url&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;https://blog.einverne.info/&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;title&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;前去学习&quot;</span><br><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;avatar&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;https://images.weserv.nl?url=https://blinkfox.github.io/favicon.png&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;闪烁之狐&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;introduction&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Matary 主题的作者。&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;url&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;https://blinkfox.github.io/&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;title&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;前去学习&quot;</span><br><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">]</span><br></code></pre></td></tr></table></figure><h3 id="菜单导航配置"><a href="#菜单导航配置" class="headerlink" title="菜单导航配置"></a>菜单导航配置</h3><h4 id="配置基本菜单导航的名称、路径url和图标icon"><a href="#配置基本菜单导航的名称、路径url和图标icon" class="headerlink" title="配置基本菜单导航的名称、路径url和图标icon."></a>配置基本菜单导航的名称、路径url和图标icon.</h4><ul><li>1.菜单导航名称可以是中文也可以是英文(如：<code>Index</code>或<code>主页</code>)</li><li>2.图标icon 可以在<a href="https://fontawesome.com/icons">Font Awesome</a> 中查找</li></ul><p>yaml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">menu:</span><br>  <span class="hljs-attr">Index:</span><br>    <span class="hljs-attr">url:</span> <span class="hljs-string">/</span><br>    <span class="hljs-attr">icon:</span> <span class="hljs-string">fas</span> <span class="hljs-string">fa-home</span><br>  <span class="hljs-attr">Tags:</span><br>    <span class="hljs-attr">url:</span> <span class="hljs-string">/tags</span><br>    <span class="hljs-attr">icon:</span> <span class="hljs-string">fas</span> <span class="hljs-string">fa-tags</span><br>  <span class="hljs-attr">Categories:</span><br>    <span class="hljs-attr">url:</span> <span class="hljs-string">/categories</span><br>    <span class="hljs-attr">icon:</span> <span class="hljs-string">fas</span> <span class="hljs-string">fa-bookmark</span><br>  <span class="hljs-attr">Archives:</span><br>    <span class="hljs-attr">url:</span> <span class="hljs-string">/archives</span><br>    <span class="hljs-attr">icon:</span> <span class="hljs-string">fas</span> <span class="hljs-string">fa-archive</span><br>  <span class="hljs-attr">About:</span><br>    <span class="hljs-attr">url:</span> <span class="hljs-string">/about</span><br>    <span class="hljs-attr">icon:</span> <span class="hljs-string">fas</span> <span class="hljs-string">fa-user-circle</span><br>  <span class="hljs-attr">Friends:</span><br>    <span class="hljs-attr">url:</span> <span class="hljs-string">/friends</span><br>    <span class="hljs-attr">icon:</span> <span class="hljs-string">fas</span> <span class="hljs-string">fa-address-book</span><br></code></pre></td></tr></table></figure><h4 id="二级菜单配置方法"><a href="#二级菜单配置方法" class="headerlink" title="二级菜单配置方法"></a>二级菜单配置方法</h4><p>如果你需要二级菜单则可以在原基本菜单导航的基础上如下操作</p><ol><li>在需要添加二级菜单的一级菜单下添加<code>children</code>关键字(如:<code>About</code>菜单下添加<code>children</code>)</li><li>在<code>children</code>下创建二级菜单的 名称name,路径url和图标icon.</li><li>注意每个二级菜单模块前要加 <code>-</code>.</li><li>注意缩进格式</li></ol><p>yaml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">menu:</span><br>  <span class="hljs-attr">Index:</span><br>    <span class="hljs-attr">url:</span> <span class="hljs-string">/</span><br>    <span class="hljs-attr">icon:</span> <span class="hljs-string">fas</span> <span class="hljs-string">fa-home</span><br>  <span class="hljs-attr">Tags:</span><br>    <span class="hljs-attr">url:</span> <span class="hljs-string">/tags</span><br>    <span class="hljs-attr">icon:</span> <span class="hljs-string">fas</span> <span class="hljs-string">fa-tags</span><br>  <span class="hljs-attr">Categories:</span><br>    <span class="hljs-attr">url:</span> <span class="hljs-string">/categories</span><br>    <span class="hljs-attr">icon:</span> <span class="hljs-string">fas</span> <span class="hljs-string">fa-bookmark</span><br>  <span class="hljs-attr">Archives:</span><br>    <span class="hljs-attr">url:</span> <span class="hljs-string">/archives</span><br>    <span class="hljs-attr">icon:</span> <span class="hljs-string">fas</span> <span class="hljs-string">fa-archive</span><br>  <span class="hljs-attr">About:</span><br>    <span class="hljs-attr">url:</span> <span class="hljs-string">/about</span><br>    <span class="hljs-attr">icon:</span> <span class="hljs-string">fas</span> <span class="hljs-string">fa-user-circle-o</span><br>  <span class="hljs-attr">Friends:</span><br>    <span class="hljs-attr">url:</span> <span class="hljs-string">/friends</span><br>    <span class="hljs-attr">icon:</span> <span class="hljs-string">fas</span> <span class="hljs-string">fa-address-book</span><br>  <span class="hljs-attr">Medias:</span><br>    <span class="hljs-attr">icon:</span> <span class="hljs-string">fas</span> <span class="hljs-string">fa-list</span><br>    <span class="hljs-attr">children:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Music</span><br>        <span class="hljs-attr">url:</span> <span class="hljs-string">/music</span><br>        <span class="hljs-attr">icon:</span> <span class="hljs-string">fas</span> <span class="hljs-string">fa-music</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Movies</span><br>        <span class="hljs-attr">url:</span> <span class="hljs-string">/movies</span><br>        <span class="hljs-attr">icon:</span> <span class="hljs-string">fas</span> <span class="hljs-string">fa-film</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Books</span><br>        <span class="hljs-attr">url:</span> <span class="hljs-string">/books</span><br>        <span class="hljs-attr">icon:</span> <span class="hljs-string">fas</span> <span class="hljs-string">fa-book</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Galleries</span><br>        <span class="hljs-attr">url:</span> <span class="hljs-string">/galleries</span><br>        <span class="hljs-attr">icon:</span> <span class="hljs-string">fas</span> <span class="hljs-string">fa-image</span><br></code></pre></td></tr></table></figure><h3 id="文章-Front-matter-介绍"><a href="#文章-Front-matter-介绍" class="headerlink" title="文章 Front-matter 介绍"></a>文章 Front-matter 介绍</h3><h3 id="Front-matter-选项详解"><a href="#Front-matter-选项详解" class="headerlink" title="Front-matter 选项详解"></a>Front-matter 选项详解</h3><p><code>Front-matter</code> 选项中的所有内容均为<strong>非必填</strong>的。但仍然建议至少填写 <code>title</code> 和 <code>date</code> 的值。</p><table><thead><tr><th align="left">配置选项</th><th align="left">默认值</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">title</td><td align="left"><code>Markdown</code> 的文件标题</td><td align="left">文章标题，强烈建议填写此选项</td></tr><tr><td align="left">date</td><td align="left">文件创建时的日期时间</td><td align="left">发布时间，强烈建议填写此选项，且最好保证全局唯一</td></tr><tr><td align="left">author</td><td align="left">根 <code>_config.yml</code> 中的 <code>author</code></td><td align="left">文章作者</td></tr><tr><td align="left">img</td><td align="left"><code>featureImages</code> 中的某个值</td><td align="left">文章特征图，推荐使用图床(腾讯云、七牛云、又拍云等)来做图片的路径.如: <code>http://xxx.com/xxx.jpg</code></td></tr><tr><td align="left">top</td><td align="left"><code>true</code></td><td align="left">推荐文章（文章是否置顶），如果 <code>top</code> 值为 <code>true</code>，则会作为首页推荐文章</td></tr><tr><td align="left">hide</td><td align="left"><code>false</code></td><td align="left">隐藏文章，如果<code>hide</code>值为<code>true</code>，则文章不会在首页显示</td></tr><tr><td align="left">cover</td><td align="left"><code>false</code></td><td align="left"><code>v1.0.2</code>版本新增，表示该文章是否需要加入到首页轮播封面中</td></tr><tr><td align="left">coverImg</td><td align="left">无</td><td align="left"><code>v1.0.2</code>版本新增，表示该文章在首页轮播封面需要显示的图片路径，如果没有，则默认使用文章的特色图片</td></tr><tr><td align="left">password</td><td align="left">无</td><td align="left">文章阅读密码，如果要对文章设置阅读验证密码的话，就可以设置 <code>password</code> 的值，该值必须是用 <code>SHA256</code> 加密后的密码，防止被他人识破。前提是在主题的 <code>config.yml</code> 中激活了 <code>verifyPassword</code> 选项</td></tr><tr><td align="left">toc</td><td align="left"><code>true</code></td><td align="left">是否开启 TOC，可以针对某篇文章单独关闭 TOC 的功能。前提是在主题的 <code>config.yml</code> 中激活了 <code>toc</code> 选项</td></tr><tr><td align="left">mathjax</td><td align="left"><code>false</code></td><td align="left">是否开启数学公式支持 ，本文章是否开启 <code>mathjax</code>，且需要在主题的 <code>_config.yml</code> 文件中也需要开启才行</td></tr><tr><td align="left">summary</td><td align="left">无</td><td align="left">文章摘要，自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要</td></tr><tr><td align="left">categories</td><td align="left">无</td><td align="left">文章分类，本主题的分类表示宏观上大的分类，只建议一篇文章一个分类</td></tr><tr><td align="left">tags</td><td align="left">无</td><td align="left">文章标签，一篇文章可以多个标签</td></tr><tr><td align="left">keywords</td><td align="left">文章标题</td><td align="left">文章关键字，SEO 时需要</td></tr><tr><td align="left">reprintPolicy</td><td align="left">cc_by</td><td align="left">文章转载规则， 可以是 cc_by, cc_by_nd, cc_by_sa, cc_by_nc, cc_by_nc_nd, cc_by_nc_sa, cc0, noreprint 或 pay 中的一个</td></tr></tbody></table><blockquote><p><strong>注意</strong>:</p><ol><li>如果 <code>img</code> 属性不填写的话，文章特色图会根据文章标题的 <code>hashcode</code> 的值取余，然后选取主题中对应的特色图片，从而达到让所有文章都的特色图<strong>各有特色</strong>。</li><li><code>date</code> 的值尽量保证每篇文章是唯一的，因为本主题中 <code>Gitalk</code> 和 <code>Gitment</code> 识别 <code>id</code> 是通过 <code>date</code> 的值来作为唯一标识的。</li><li>如果要对文章设置阅读验证密码的功能，不仅要在 Front-matter 中设置采用了 SHA256 加密的 password 的值，还需要在主题的 <code>_config.yml</code> 中激活了配置。有些在线的 SHA256 加密的地址，可供使用：<a href="http://tool.oschina.net/encrypt?type=2">开源中国在线工具</a>、<a href="http://encode.chahuo.com/">chahuo</a>、<a href="http://tool.chinaz.com/tools/hash.aspx">站长工具</a>。</li></ol></blockquote><p>以下为文章的 <code>Front-matter</code> 示例。</p><h4 id="最简示例"><a href="#最简示例" class="headerlink" title="最简示例"></a>最简示例</h4><p>yaml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">title:</span> <span class="hljs-string">基于Hexo的hexo-theme-matery主题搭建博客并优化</span><br><span class="hljs-attr">date:</span> <span class="hljs-number">2019-10-03 14:25:00</span><br><span class="hljs-meta">---</span><br></code></pre></td></tr></table></figure><h4 id="最全示例"><a href="#最全示例" class="headerlink" title="最全示例"></a>最全示例</h4><p>yaml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">title:</span> <span class="hljs-string">基于Hexo的hexo-theme-matery主题搭建博客并优化</span><br><span class="hljs-attr">date:</span> <span class="hljs-number">2019-12-30 09:25:00</span><br><span class="hljs-attr">author:</span> <span class="hljs-string">17lai.site</span><br><span class="hljs-attr">img:</span> <span class="hljs-string">/medias/cover/hexo.jpg</span><br><span class="hljs-attr">top:</span> <span class="hljs-literal">true</span><br><span class="hljs-attr">cover:</span> <span class="hljs-literal">true</span><br><span class="hljs-attr">coverImg:</span> <span class="hljs-string">/medias/cover/hexo.jpg</span><br><span class="hljs-attr">password:</span> <span class="hljs-string">8d969eef6ecad3c29a3a629280e686cf0c3f5d5a86aff3ca12020c923adc6c92</span><br><span class="hljs-attr">toc:</span> <span class="hljs-literal">false</span><br><span class="hljs-attr">mathjax:</span> <span class="hljs-literal">false</span><br><span class="hljs-attr">summary:</span> <span class="hljs-string">这是你自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要</span><br><span class="hljs-attr">categories:</span> <span class="hljs-string">Hexo</span><br><span class="hljs-attr">keywords:</span> <span class="hljs-string">Hexo</span> <span class="hljs-string">GitHub</span> <span class="hljs-string">blog</span><br><span class="hljs-attr">tags:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">Hexo</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">Blog</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">GitHub</span><br><span class="hljs-meta">---</span><br></code></pre></td></tr></table></figure><h3 id="新建文章模板修改"><a href="#新建文章模板修改" class="headerlink" title="新建文章模板修改"></a>新建文章模板修改</h3><p>首先为了新建文章方便，我们可以修改一下文章模板，建议将<code>/scaffolds/post.md</code>修改为如下代码：</p><p>yaml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">title:</span> &#123;&#123; <span class="hljs-string">title</span> &#125;&#125;<br><span class="hljs-attr">date:</span> &#123;&#123; <span class="hljs-string">date</span> &#125;&#125;<br><span class="hljs-attr">author:</span> <br><span class="hljs-attr">img:</span> <br><span class="hljs-attr">coverImg:</span> <br><span class="hljs-attr">top:</span> <span class="hljs-literal">false</span><br><span class="hljs-attr">cover:</span> <span class="hljs-literal">false</span><br><span class="hljs-attr">toc:</span> <span class="hljs-literal">true</span><br><span class="hljs-attr">mathjax:</span> <span class="hljs-literal">false</span><br><span class="hljs-attr">password:</span><br><span class="hljs-attr">summary:</span><br><span class="hljs-attr">tags:</span><br><span class="hljs-attr">categories:</span><br><span class="hljs-meta">---</span><br></code></pre></td></tr></table></figure><p>这样新建文章后 一些<code>Front-matter</code>参数不用你自己补充了，修改对应信息就可以了。</p><h3 id="代码高亮"><a href="#代码高亮" class="headerlink" title="代码高亮"></a>代码高亮</h3><p>从 Hexo5.0 版本开始自带了 <code>prismjs</code> 代码语法高亮的支持，本主题对此进行了改造支持。</p><p>如果你的博客中曾经安装过 <code>hexo-prism-plugin</code> 的插件，那么你须要执行 <code>npm uninstall hexo-prism-plugin</code> 来卸载掉它，否则生成的代码中会有 <code>&#123;</code> 和 <code>&#125;</code> 的转义字符。</p><p>然后，修改 Hexo 根目录下 <code>_config.yml</code> 文件中 <code>highlight.enable</code> 的值为 <code>false</code>，并将 <code>prismjs.enable</code> 的值设置为 <code>true</code>，主要配置如下：</p><p>yaml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">highlight:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-attr">line_number:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">auto_detect:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-attr">tab_replace:</span> <span class="hljs-string">&#x27;&#x27;</span><br>  <span class="hljs-attr">wrap:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">hljs:</span> <span class="hljs-literal">false</span><br><span class="hljs-attr">prismjs:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">preprocess:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">line_number:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">tab_replace:</span> <span class="hljs-string">&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><p>主题中默认的 <code>prismjs</code> 主题是 <code>Tomorrow Night</code>，如果你想定制自己的主题，可以前往 <a href="https://prismjs.com/download.html">prismjs 下载页面</a> 定制下载自己喜欢的主题 <code>css</code> 文件，然后将此 css 主题文件取名为 <code>prism.css</code>，替换掉 <code>hexo-theme-matery</code> 主题文件夹中的 <code>source/libs/prism/prism.css</code> 文件即可。</p><h3 id="添加文章搜索功能"><a href="#添加文章搜索功能" class="headerlink" title="添加文章搜索功能"></a>添加文章搜索功能</h3><blockquote><ul><li>这个插件比广大教程提到的<code>hexo-generator-search</code>插件更加强大和好用！</li><li>matery目前只支持<code>search.xml</code> xml格式的搜索文件！</li></ul></blockquote><p>本主题中还使用到了 <a href="https://github.com/next-theme/hexo-generator-searchdb">hexo-generator-searchdb</a> 的 Hexo 插件来做内容搜索，安装命令如下：</p><p>bash</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install hexo-generator-searchdb --save<br></code></pre></td></tr></table></figure><p>在 Hexo 根目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</p><p>yaml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">search:</span><br>  <span class="hljs-attr">path:</span> <span class="hljs-string">search.xml</span><br>  <span class="hljs-attr">field:</span> <span class="hljs-string">post</span><br>  <span class="hljs-attr">content:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">format:</span> <span class="hljs-string">html</span><br></code></pre></td></tr></table></figure><p><strong>参数含义</strong></p><ul><li><strong>path</strong> - file path. By default is <code>search.xml</code>. If the file extension is <code>.json</code>, the output format will be JSON. Otherwise XML format file will be exported.</li><li>field<ul><li>the search scope you want to search, you can chose:</li><li><strong>post</strong> (Default) - will only cover all the posts of your blog.</li><li><strong>page</strong> - will only cover all the pages of your blog.</li><li><strong>all</strong> - will cover all the posts and pages of your blog.</li></ul></li><li><strong>content</strong> - whether contains the whole content of each article. If <code>false</code>, the generated results only cover title and other meta info without mainbody. By default is <code>true</code>.</li><li>format<ul><li>the form of the page contents, options are:</li><li><strong>html</strong> (Default) - original html string being minified.</li><li><strong>striptags</strong> - original html string being minified, and remove all the tags.</li><li><strong>raw</strong> - markdown text of each posts or pages.</li></ul></li></ul><h3 id="修改页脚"><a href="#修改页脚" class="headerlink" title="修改页脚"></a>修改页脚</h3><p>页脚信息可能需要做定制化修改，而且它不便于做成配置信息，所以可能需要你自己去再修改和加工。修改的地方在主题文件的 <code>/layout/_partial/footer.ejs</code> 文件中，包括站点、使用的主题、访问量等。</p><h3 id="修改社交链接"><a href="#修改社交链接" class="headerlink" title="修改社交链接"></a>修改社交链接</h3><p>在主题的 <code>_config.yml</code> 文件中，默认支持 <code>QQ</code>、<code>GitHub</code> 和邮箱的配置，可以在主题文件的 <code>/layout/_partial/social-link.ejs</code> 文件中，新增、修改需要的社交链接地址，增加链接可参考如下代码：</p><p>markup</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs markup">&lt;a<br>  href=&quot;https://github.com/appotry&quot;<br>  class=&quot;tooltipped&quot;<br>  target=&quot;_blank&quot;<br>  data-tooltip=&quot;访问我的GitHub&quot;<br>  data-position=&quot;top&quot;<br>  data-delay=&quot;50&quot;<br>&gt;<br>  &lt;i class=&quot;fab fa-github&quot;&gt;&lt;/i&gt;<br>&lt;/a&gt;<br></code></pre></td></tr></table></figure><p>其中，社交图标（如：<code>fa-github</code>）可以在 <a href="https://fontawesome.com/icons">Font Awesome</a> 中搜索找到。以下是常用社交图标的标识，供参考：</p><ul><li>Facebook: <code>fa-facebook</code></li><li>Twitter: <code>fa-twitter</code></li><li>Google-plus: <code>fa-google-plus</code></li><li>Linkedin: <code>fa-linkedin</code></li><li>Tumblr: <code>fa-tumblr</code></li><li>Medium: <code>fa-medium</code></li><li>Slack: <code>fa-slack</code></li><li>新浪微博: <code>fa-weibo</code></li><li>微信: <code>fa-wechat</code></li><li>QQ: <code>fa-qq</code></li></ul><h3 id="修改打赏的二维码图片"><a href="#修改打赏的二维码图片" class="headerlink" title="修改打赏的二维码图片"></a>修改打赏的二维码图片</h3><p>在主题文件的 <code>source/medias/reward</code> 文件中，可以替换成你的的微信和支付宝的打赏二维码图片。</p><h3 id="配置音乐播放器"><a href="#配置音乐播放器" class="headerlink" title="配置音乐播放器"></a>配置音乐播放器</h3><p><img src="20240407180404.webp" alt="matery music config"></p><p><strong>matery music config</strong></p><p>支持接入第三方音乐，如 QQ 音乐，网易云音乐，酷狗音乐等等</p><p>主题的 _config.yml 配置文件中激活 music 配置即可：</p><p>yaml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># Whether to display the musics.</span><br><span class="hljs-comment"># 是否在首页显示音乐.</span><br><span class="hljs-attr">music:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">title:</span> <span class="hljs-comment">#非吸底模式有效</span><br>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">show:</span> <span class="hljs-string">咕咕星的歌单</span><br>  <span class="hljs-attr">autoHide:</span> <span class="hljs-literal">true</span>    <span class="hljs-comment"># hide automaticaly</span><br>  <span class="hljs-attr">server:</span> <span class="hljs-string">netease</span>   <span class="hljs-comment">#require    music platform: netease, tencent, kugou, xiami, baidu</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">playlist</span>    <span class="hljs-comment">#require song, playlist, album, search, artist</span><br>  <span class="hljs-attr">id:</span> <span class="hljs-number">2888085740</span>     <span class="hljs-comment">#require    song id / playlist id / album id / search keyword</span><br>  <span class="hljs-attr">fixed:</span> <span class="hljs-literal">false</span>       <span class="hljs-comment"># 开启吸底模式</span><br>  <span class="hljs-attr">autoplay:</span> <span class="hljs-literal">false</span>   <span class="hljs-comment"># 是否自动播放</span><br>  <span class="hljs-attr">theme:</span> <span class="hljs-string">&#x27;#42b983&#x27;</span><br>  <span class="hljs-attr">loop:</span> <span class="hljs-string">&#x27;all&#x27;</span>       <span class="hljs-comment"># 音频循环播放, 可选值: &#x27;all&#x27;, &#x27;one&#x27;, &#x27;none&#x27;</span><br>  <span class="hljs-attr">order:</span> <span class="hljs-string">&#x27;random&#x27;</span>   <span class="hljs-comment"># 音频循环顺序, 可选值: &#x27;list&#x27;, &#x27;random&#x27;</span><br>  <span class="hljs-attr">preload:</span> <span class="hljs-string">&#x27;auto&#x27;</span>   <span class="hljs-comment"># 预加载，可选值: &#x27;none&#x27;, &#x27;metadata&#x27;, &#x27;auto&#x27;</span><br>  <span class="hljs-attr">volume:</span> <span class="hljs-number">0.7</span>       <span class="hljs-comment"># 默认音量，请注意播放器会记忆用户设置，用户手动设置音量后默认音量即失效</span><br>  <span class="hljs-attr">listFolded:</span> <span class="hljs-literal">true</span>  <span class="hljs-comment"># 列表默认折叠</span><br>  <span class="hljs-attr">hideLrc:</span> <span class="hljs-literal">true</span>     <span class="hljs-comment"># 隐藏歌词</span><br></code></pre></td></tr></table></figure><blockquote><p>server 可选 netease（网易云音乐），tencent（QQ 音乐），kugou（酷狗音乐），xiami（虾米音乐），</p><p>baidu（百度音乐）。</p><p>type 可选 song（歌曲），playlist（歌单），album（专辑），search（搜索关键字），artist（歌手）</p><p>id 获取示例：浏览器打开网易云音乐，点击我喜欢的音乐歌单，地址栏有一串数字，playlist 的 id 即为这串数字。</p></blockquote><h3 id="单独的音乐页面"><a href="#单独的音乐页面" class="headerlink" title="单独的音乐页面"></a>单独的音乐页面</h3><p>效果如下：</p><p><img src="20240407181319.webp" alt="matery musics config"></p><p><strong>matery musics config</strong></p><p>yaml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># Whether to display the musics.</span><br><span class="hljs-comment"># 单独的音乐页面.</span><br><span class="hljs-attr">musics:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">title:</span>          <span class="hljs-comment">#非吸底模式有效</span><br>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">show:</span> <span class="hljs-string">听听音乐</span><br>  <span class="hljs-attr">server:</span> <span class="hljs-string">netease</span>   <span class="hljs-comment">#require music platform: netease, tencent, kugou, xiami, baidu</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">playlist</span>    <span class="hljs-comment">#require song, playlist, album, search, artist</span><br>  <span class="hljs-attr">id:</span> <span class="hljs-number">4965675848</span>     <span class="hljs-comment">#require song id / playlist id / album id / search keyword</span><br>  <span class="hljs-attr">fixed:</span> <span class="hljs-literal">false</span>      <span class="hljs-comment"># 开启吸底模式</span><br>  <span class="hljs-attr">autoplay:</span> <span class="hljs-literal">true</span>   <span class="hljs-comment"># 是否自动播放</span><br>  <span class="hljs-attr">theme:</span> <span class="hljs-string">&#x27;#42b983&#x27;</span><br>  <span class="hljs-attr">loop:</span> <span class="hljs-string">&#x27;all&#x27;</span>       <span class="hljs-comment"># 音频循环播放, 可选值: &#x27;all&#x27;, &#x27;one&#x27;, &#x27;none&#x27;</span><br>  <span class="hljs-attr">order:</span> <span class="hljs-string">&#x27;random&#x27;</span>   <span class="hljs-comment"># 音频循环顺序, 可选值: &#x27;list&#x27;, &#x27;random&#x27;</span><br>  <span class="hljs-attr">preload:</span> <span class="hljs-string">&#x27;auto&#x27;</span>   <span class="hljs-comment"># 预加载，可选值: &#x27;none&#x27;, &#x27;metadata&#x27;, &#x27;auto&#x27;</span><br>  <span class="hljs-attr">volume:</span> <span class="hljs-number">0.7</span>       <span class="hljs-comment"># 默认音量，请注意播放器会记忆用户设置，用户手动设置音量后默认音量即失效</span><br>  <span class="hljs-attr">listFolded:</span> <span class="hljs-literal">false</span>  <span class="hljs-comment"># 列表默认折叠</span><br>  <span class="hljs-attr">listMaxHeight:</span> <span class="hljs-string">&quot;525px&quot;</span> <span class="hljs-comment">#列表最大高度</span><br></code></pre></td></tr></table></figure><p>开启配置方法如上，和 Matery 的音乐播放器配置参数差不多一样</p><blockquote><p>server 可选 netease（网易云音乐），tencent（QQ 音乐），kugou（酷狗音乐），xiami（虾米音乐），</p><p>baidu（百度音乐）。</p><p>type 可选 song（歌曲），playlist（歌单），album（专辑），search（搜索关键字），artist（歌手）</p><p>id 获取示例：浏览器打开网易云音乐，点击我喜欢的音乐歌单，地址栏有一串数字，playlist 的 id 即为这串数字。</p></blockquote><p>bash</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 创建音乐页面</span><br>hexo new page musics<br><span class="hljs-comment"># 编译网站</span><br>hexo g<br><span class="hljs-comment"># 然后就可以在 [ip | 域名]/musics  这个链接访问到在线音乐页面</span><br></code></pre></td></tr></table></figure><h3 id="配置文章基本信息"><a href="#配置文章基本信息" class="headerlink" title="配置文章基本信息"></a>配置文章基本信息</h3><p>yaml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">new_post_name:</span> <span class="hljs-string">:title.md</span>   <span class="hljs-comment"># 新文章的文件名称</span><br><span class="hljs-attr">default_layout:</span> <span class="hljs-string">post</span>       <span class="hljs-comment"># 预设布局</span><br><span class="hljs-attr">auto_spacing:</span> <span class="hljs-literal">false</span>        <span class="hljs-comment"># 在中文和英文之间加入空格</span><br><span class="hljs-attr">titlecase:</span> <span class="hljs-literal">false</span>           <span class="hljs-comment"># 把标题转换为 title case</span><br><span class="hljs-attr">external_link:</span>             <span class="hljs-comment"># 在新标签中打开链接</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span>             <span class="hljs-comment"># 在新标签中打开链接</span><br>  <span class="hljs-attr">field:</span>                   <span class="hljs-comment"># 对整个网站（site）生效或仅对文章（post）生效</span><br>  <span class="hljs-attr">exclude:</span>                 <span class="hljs-comment"># 需要排除的域名。主域名和子域名如 www 需分别配置[]</span><br><span class="hljs-attr">filename_case:</span> <span class="hljs-number">0</span>           <span class="hljs-comment"># 把文件名称转换为 (1) 小写或 (2) 大写</span><br><span class="hljs-attr">render_drafts:</span> <span class="hljs-literal">false</span>       <span class="hljs-comment"># 显示草稿，默认为：false</span><br><span class="hljs-attr">post_asset_folder:</span> <span class="hljs-literal">true</span>    <span class="hljs-comment"># 启动 Asset 文件夹</span><br><span class="hljs-attr">relative_link:</span> <span class="hljs-literal">false</span>       <span class="hljs-comment"># 把链接改为与根目录的相对位址</span><br><span class="hljs-attr">future:</span> <span class="hljs-literal">true</span>               <span class="hljs-comment"># 显示未来的文章</span><br><span class="hljs-attr">highlight:</span>                 <span class="hljs-comment"># 代码块的设置</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">false</span>            <span class="hljs-comment"># 开启代码块高亮</span><br>  <span class="hljs-attr">line_number:</span> <span class="hljs-literal">false</span>       <span class="hljs-comment"># 显示行数</span><br>  <span class="hljs-attr">auto_detect:</span> <span class="hljs-literal">false</span>       <span class="hljs-comment"># 如果未指定语言，则启用自动检测</span><br>  <span class="hljs-attr">tab_replace:</span>             <span class="hljs-comment"># 用 n 个空格替换 tabs；如果值为空，则不会替换 tabs</span><br></code></pre></td></tr></table></figure><h3 id="配置代码高亮及样式"><a href="#配置代码高亮及样式" class="headerlink" title="配置代码高亮及样式"></a>配置代码高亮及样式</h3><p>从 Hexo5.0 版本开始自带了 <code>prismjs</code> 代码语法高亮的支持，本主题对此进行了改造支持。</p><p>如果你的博客中曾经安装过 <code>hexo-prism-plugin</code> 的插件，那么你须要执行 <code>npm uninstall hexo-prism-plugin</code> 来卸载掉它，否则生成的代码中会有 <code>&#123;</code> 和 <code>&#125;</code> 的转义字符。</p><p>然后，修改 Hexo 根目录下 <code>_config.yml</code> 文件中 <code>highlight.enable</code> 的值为 <code>false</code>，并将 <code>prismjs.enable</code> 的值设置为 <code>true</code>，主要配置如下：</p><p>yaml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">highlight:</span>                      <span class="hljs-comment"># 代码块的设置</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">false</span>                 <span class="hljs-comment"># 开启代码块高亮</span><br>  <span class="hljs-attr">line_number:</span> <span class="hljs-literal">true</span>             <span class="hljs-comment"># 显示行数</span><br>  <span class="hljs-attr">auto_detect:</span> <span class="hljs-literal">false</span>            <span class="hljs-comment"># 如果未指定语言，则启用自动检测</span><br>  <span class="hljs-attr">tab_replace:</span> <span class="hljs-string">&#x27;&#x27;</span>               <span class="hljs-comment"># 用 n 个空格替换 tabs；如果值为空，则不会替换 tabs</span><br>  <span class="hljs-attr">wrap:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">hljs:</span> <span class="hljs-literal">false</span><br><span class="hljs-attr">prismjs:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">preprocess:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">line_number:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">tab_replace:</span> <span class="hljs-string">&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><p><a href="https://hexo.io/zh-cn/docs/syntax-highlight#preprocess">注意事项</a></p><p>Hexo 内建的 PrismJS 支持浏览器端高亮（<code>preprocess</code> 设置为 <code>false</code>）和服务器端高亮（<code>preprocess</code> 设置为 <code>true</code>）两种方式。</p><p>使用服务器端高亮时（<code>preprocess</code> 设置为 <code>true</code>），只需要在站点引入 Prismjs 的主题（CSS 样式表）即可；而使用浏览器端高亮时（<code>preprocess</code> 设置为 <code>false</code>），需要将 JavaScript 文件也引入。</p><p>主题中默认的 <code>prismjs</code> 主题是 <code>Tomorrow Night</code>，如果你想定制自己的主题，可以前往 <a href="https://prismjs.com/download.html#themes=prism-tomorrow&languages=markup+css+clike+javascript+abap+abnf+actionscript+ada+agda+al+antlr4+apacheconf+apex+apl+applescript+aql+arduino+arff+armasm+arturo+asciidoc+aspnet+asm6502+asmatmel+autohotkey+autoit+avisynth+avro-idl+awk+bash+basic+batch+bbcode+bicep+birb+bison+bnf+brainfuck+brightscript+bro+bsl+c+csharp+cpp+cfscript+chaiscript+cil+clojure+cmake+cobol+coffeescript+concurnas+csp+cooklang+coq+crystal+css-extras+csv+cue+cypher+d+dart+dataweave+dax+dhall+diff+django+dns-zone-file+docker+dot+ebnf+editorconfig+eiffel+ejs+elixir+elm+etlua+erb+erlang+excel-formula+fsharp+factor+false+firestore-security-rules+flow+fortran+ftl+gml+gap+gcode+gdscript+gedcom+gettext+gherkin+git+glsl+gn+linker-script+go+go-module+gradle+graphql+groovy+haml+handlebars+haskell+haxe+hcl+hlsl+hoon+http+hpkp+hsts+ichigojam+icon+icu-message-format+idris+ignore+inform7+ini+io+j+java+javadoc+javadoclike+javastacktrace+jexl+jolie+jq+jsdoc+js-extras+json+json5+jsonp+jsstacktrace+js-templates+julia+keepalived+keyman+kotlin+kumir+kusto+latex+latte+less+lilypond+liquid+lisp+livescript+llvm+log+lolcode+lua+magma+makefile+markdown+markup-templating+mata+matlab+maxscript+mel+mermaid+mizar+mongodb+monkey+moonscript+n1ql+n4js+nand2tetris-hdl+naniscript+nasm+neon+nevod+nginx+nim+nix+nsis+objectivec+ocaml+odin+opencl+openqasm+oz+parigp+parser+pascal+pascaligo+psl+pcaxis+peoplecode+perl+php+phpdoc+php-extras+plant-uml+plsql+powerquery+powershell+processing+prolog+promql+properties+protobuf+pug+puppet+pure+purebasic+purescript+python+qsharp+q+qml+qore+r+racket+cshtml+jsx+tsx+reason+regex+rego+renpy+rescript+rest+rip+roboconf+robotframework+ruby+rust+sas+sass+scss+scala+scheme+shell-session+smali+smalltalk+smarty+sml+solidity+solution-file+soy+sparql+splunk-spl+sqf+sql+squirrel+stan+stata+iecst+stylus+supercollider+swift+systemd+t4-templating+t4-cs+t4-vb+tap+tcl+tt2+textile+toml+tremor+turtle+twig+typescript+typoscript+unrealscript+uorazor+uri+v+vala+vbnet+velocity+verilog+vhdl+vim+visual-basic+warpscript+wasm+web-idl+wgsl+wiki+wolfram+wren+xeora+xml-doc+xojo+xquery+yaml+yang+zig&plugins=line-highlight+line-numbers+inline-color+command-line+diff-highlight+treeview">prismjs 下载页面</a> 定制下载自己喜欢的主题 <code>css</code> 文件，然后将此 css 主题文件取名为 <code>prism.css</code>，替换掉 <code>hexo-theme-matery</code> 主题文件夹中的 <code>source/libs/prism/prism.css</code> 文件即可。</p><p>配置代码的样式</p><p>yaml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">code:</span><br>  <span class="hljs-attr">lang:</span> <span class="hljs-literal">true</span>     <span class="hljs-comment"># 代码块是否显示名称</span><br>  <span class="hljs-attr">copy:</span> <span class="hljs-literal">true</span>     <span class="hljs-comment"># 代码块是否可复制</span><br>  <span class="hljs-attr">shrink:</span> <span class="hljs-literal">false</span>  <span class="hljs-comment"># 代码块是否可以收缩</span><br>  <span class="hljs-attr">break:</span> <span class="hljs-literal">false</span>   <span class="hljs-comment"># 代码是否折行</span><br></code></pre></td></tr></table></figure><h3 id="配置是否启用转载限制模块"><a href="#配置是否启用转载限制模块" class="headerlink" title="配置是否启用转载限制模块"></a>配置是否启用转载限制模块</h3><p>YAML</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">reprint:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">false</span>   <span class="hljs-comment">#是否启用“转载规则限定模块”</span><br>  <span class="hljs-attr">default:</span> <span class="hljs-string">cc_by</span><br></code></pre></td></tr></table></figure><p>文章转载规则，可以是 <code>cc_by</code>, <code>cc_by_nd</code>, <code>cc_by_sa</code>, <code>cc_by_nc</code>, <code>cc_by_nc_nd</code>, <code>cc_by_nc_sa</code>, <code>cc0</code>, <code>noreprint</code> 或 <code>pay</code> 中的一个</p><h3 id="配置文章阅读密码功能"><a href="#配置文章阅读密码功能" class="headerlink" title="配置文章阅读密码功能"></a>配置文章阅读密码功能</h3><p>阅读文章的密码验证功能，如要使用此功能请激活该配置项，并在对应文章的 <code>Front-matter</code> 中写上 <code>password</code> 的键和加密后的密文即可。</p><blockquote><p>请注意：为了保证密码原文不会被泄露到网页中，文章的密码必须是通过 <code>SHA256</code> 加密的，这样就不会被破解。</p></blockquote><p>yaml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">verifyPassword:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">promptMessage:</span> <span class="hljs-string">请输入访问本文章的密码</span><br>  <span class="hljs-attr">errorMessage:</span>  <span class="hljs-string">密码错误，将返回主页！</span><br></code></pre></td></tr></table></figure><h3 id="如何一键部署hexo"><a href="#如何一键部署hexo" class="headerlink" title="如何一键部署hexo"></a>如何一键部署hexo</h3><p>通过 <a href="https://github.com/hexojs/hexo-deployer-git">hexo-deployer-git</a> 插件可以实现一键将博客同时部署到多个 git 仓库中。如同时发布到 github 及 gitee 提供的 pages 服务。安装：</p><p>bash</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install hexo-deployer-git --save<br></code></pre></td></tr></table></figure><p>修改 Hexo 根目录下的 <code>_config.yml</code> 文件中的如下内容:</p><p>yaml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment">## Docs: https://hexo.io/docs/deployment.html</span><br><span class="hljs-attr">deploy:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">type:</span> <span class="hljs-string">git</span><br>    <span class="hljs-attr">repo:</span> <span class="hljs-string">https://github.com/appotry/blog.git</span><br>    <span class="hljs-attr">branch:</span> <span class="hljs-string">gh-pages</span><br>    <span class="hljs-attr">ignore_hidden:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">type:</span> <span class="hljs-string">git</span><br>    <span class="hljs-attr">repo:</span> <span class="hljs-string">https://gitee.com/appotry/blog.git</span><br>    <span class="hljs-attr">branch:</span> <span class="hljs-string">master</span><br>    <span class="hljs-attr">ignore_hidden:</span> <span class="hljs-literal">false</span><br></code></pre></td></tr></table></figure><blockquote><p>也可以如本站一样，采用 <a href="https://github.com/75k/hexo-deployer-cos-enhanced">hexo-deployer-cos-enhanced</a> 插件将静态内容部署到腾讯云对象存储服务中，在 DNS 配置中将境内线路解析到腾讯云 CDN 地址，实现加速。部署完成后会自动刷新被更新文件的 CDN 缓存。</p></blockquote><p>安装：</p><p>bash</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install hexo-deployer-cos-enhanced --save<br></code></pre></td></tr></table></figure><p><code>_config.yml</code> 配置如下:</p><p>yaml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">deploy:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">type:</span> <span class="hljs-string">git</span><br>    <span class="hljs-attr">repo:</span> <span class="hljs-string">https://github.com/appotry/blog.git</span><br>    <span class="hljs-attr">branch:</span> <span class="hljs-string">gh-pages</span><br>    <span class="hljs-attr">ignore_hidden:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">type:</span> <span class="hljs-string">cos</span><br>    <span class="hljs-attr">bucket:</span> <span class="hljs-string">hexo-130****</span><br>    <span class="hljs-attr">region:</span> <span class="hljs-string">ap-beijing</span><br>    <span class="hljs-attr">secretId:</span> <span class="hljs-string">AKIDh9****F8FvL</span><br>    <span class="hljs-attr">secretKey:</span> <span class="hljs-string">Z3IGiur****QZR3PgjXmlVg</span><br>    <span class="hljs-attr">cdnConfig:</span><br>      <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>      <span class="hljs-attr">cdnUrl:</span> <span class="hljs-string">https://static.17lai.site</span><br>      <span class="hljs-attr">bucket:</span> <span class="hljs-string">static-130****</span><br>      <span class="hljs-attr">region:</span> <span class="hljs-string">ap-beijing</span><br>      <span class="hljs-attr">folder:</span> <span class="hljs-string">static</span><br>      <span class="hljs-attr">secretId:</span> <span class="hljs-string">AKIDh9****F8FvL</span><br>      <span class="hljs-attr">secretKey:</span> <span class="hljs-string">Z3IGiur****QZR3PgjXmlVg</span><br></code></pre></td></tr></table></figure><p>然后通过 <code>hexo g -d</code> 即可实现一键发布，并更新 CDN 缓存。</p><h3 id="文章链接转静态短地址（可选的）"><a href="#文章链接转静态短地址（可选的）" class="headerlink" title="文章链接转静态短地址（可选的）"></a>文章链接转静态短地址（可选的）</h3><p>如果文章名称是中文的，那么 Hexo 默认生成的永久链接也会有中文，这样不利于 <code>SEO</code>，且 <code>gitment</code> 评论对中文链接也不支持。我们可以用 <a href="https://github.com/viko16/hexo-permalink-pinyin">hexo-permalink-pinyin</a> Hexo 插件生成文章时生成中文拼音的永久链接，或者用<a href="https://github.com/rozbo/hexo-abbrlink">hexo-abbrlink</a> 生成静态文章链接。以下结合 hexo-abbrlink 生成类似 <code>/yyyy/mmdd+随机数.html</code> 的文章链接地址。</p><p>安装命令如下：</p><p>bash</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install hexo-abbrlink --save<br></code></pre></td></tr></table></figure><ul><li><blockquote><p>npm下载太慢怎么办？ 修改国内淘宝源加速，<a href="https://blog.17lai.site/posts/40300608/#npm%E4%B8%8B%E8%BD%BD%E5%8A%A0%E9%80%9F">戳</a></p></blockquote></li></ul><p>在 Hexo 根目录下的 <code>_config.yml</code> 文件中，修改 <code>permalink:</code> ，并在文件末尾新增 <code>abbrlink:</code>配置项：</p><p>yaml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">permalink:</span> <span class="hljs-string">:year/:month:day:abbrlink.html</span><br><br><span class="hljs-attr">abbrlink:</span><br>  <span class="hljs-attr">alg:</span> <span class="hljs-string">crc16</span> <span class="hljs-comment">#算法选项：crc16丨crc32</span><br>  <span class="hljs-attr">rep:</span> <span class="hljs-string">dec</span> <span class="hljs-comment">#输出进制：dec为十进制，hex为十六进制</span><br></code></pre></td></tr></table></figure><h3 id="添加-emoji-表情支持（可选的）"><a href="#添加-emoji-表情支持（可选的）" class="headerlink" title="添加 emoji 表情支持（可选的）"></a>添加 emoji 表情支持（可选的）</h3><p>Matery主题新增了对 <code>emoji</code> 表情的支持，使用到了 <a href="https://npm.taobao.org/package/hexo-filter-github-emojis">hexo-filter-github-emojis</a> 的 Hexo 插件来支持 <code>emoji</code> 表情的生成，把对应的 <code>markdown emoji</code> 语法（<code>::</code>, 例如：<code>:smile:</code>）转变成会跳跃的 <code>emoji</code> 表情，安装命令如下</p><p>bash</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install hexo-filter-github-emojis --save<br></code></pre></td></tr></table></figure><blockquote><ul><li>npm下载太慢怎么办？ 修改国内淘宝源加速，<a href="https://blog.17lai.site/posts/40300608/#npm%E4%B8%8B%E8%BD%BD%E5%8A%A0%E9%80%9F">戳</a></li></ul></blockquote><p>在 博客根目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</p><p>yaml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">githubEmojis:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">className:</span> <span class="hljs-string">github-emoji</span><br>  <span class="hljs-attr">inject:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">styles:</span><br>  <span class="hljs-attr">customEmojis:</span><br></code></pre></td></tr></table></figure><p>执行 <code>hexo clean &amp;&amp; hexo g</code> 重新生成博客文件，然后就可以在文章中对应位置看到你用 <code>emoji</code> 语法写的表情了。</p><h3 id="文章字数统计插件"><a href="#文章字数统计插件" class="headerlink" title="文章字数统计插件"></a>文章字数统计插件</h3><p>如果你想要在文章中显示文章字数、阅读时长信息，可以安装 <a href="https://github.com/willin/hexo-wordcount">hexo-wordcount</a>插件。</p><p>安装命令如下：</p><p>bash</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm i --save hexo-wordcount<br></code></pre></td></tr></table></figure><p>然后只需在本主题下的 <code>_config.yml</code> 文件中，激活以下配置项即可：</p><p>yaml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">wordCount:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">false</span> <span class="hljs-comment"># 将这个值设置为 true 即可.</span><br>  <span class="hljs-attr">postWordCount:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">min2read:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">totalCount:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><h3 id="添加-RSS-订阅支持"><a href="#添加-RSS-订阅支持" class="headerlink" title="添加 RSS 订阅支持"></a>添加 RSS 订阅支持</h3><p>本主题中还使用到了 <a href="https://github.com/hexojs/hexo-generator-feed">hexo-generator-feed</a> 的 Hexo 插件来做 <code>RSS</code>，安装命令如下：</p><p>bash</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install hexo-generator-feed --save<br></code></pre></td></tr></table></figure><p>在 Hexo 根目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</p><p>yaml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">feed:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">atom</span><br>  <span class="hljs-attr">path:</span> <span class="hljs-string">atom.xml</span><br>  <span class="hljs-attr">limit:</span> <span class="hljs-number">20</span><br>  <span class="hljs-attr">hub:</span><br>  <span class="hljs-attr">content:</span><br>  <span class="hljs-attr">content_limit:</span> <span class="hljs-number">140</span><br>  <span class="hljs-attr">content_limit_delim:</span> <span class="hljs-string">&quot; &quot;</span><br>  <span class="hljs-attr">order_by:</span> <span class="hljs-string">-date</span><br></code></pre></td></tr></table></figure><p>执行 <code>hexo clean &amp;&amp; hexo g</code> 重新生成博客文件，然后在 <code>public</code> 文件夹中即可看到 <code>atom.xml</code> 文件，说明已经安装成功了。</p><blockquote><p><a href="https://github.com/sergeyzwezdin/hexo-feed">hexo-feed</a> 这个RSS插件更加强大，支持分类订阅，标签订阅。但对hexo 6.x没有做支持，虽然在hexo6.x上面工作正常。</p></blockquote><h3 id="增加百度统计功能"><a href="#增加百度统计功能" class="headerlink" title="增加百度统计功能"></a>增加百度统计功能</h3><p>首先注册<a href="https://tongji.baidu.com/"><strong>百度统计站长版</strong></a>，登陆后点击 新增网站，然后直接输入你的博客地址例如： <a href="https://blog.17lai.site/">https://blog.17lai.site</a>，网站域名 和 网站首页 都写这个，网站名称 可以填 我的博客，<br>行业类别： 博客—空间周边。</p><p>然后点击左侧菜单的 代码获取，找到</p><p>javascript</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">hm.<span class="hljs-property">src</span> = <span class="hljs-string">&quot;https://hm.baidu.com/hm.js?……&quot;</span><br></code></pre></td></tr></table></figure><p>问号后的这一段十六进制代码<br>复制下来，粘贴到 主题配置文件 中的baidu_analytics:后面，注意冒号和值之间要有一个空格，然后将该字段前面的#号删除代表启用此功能。保存后即可</p><p>yaml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># Add baidu analytics configuration</span><br><span class="hljs-comment"># 添加 baidu Analytics 配置</span><br><span class="hljs-attr">baiduAnalytics:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">false</span> <span class="hljs-comment"># 开启时设置为true 并填写正确的id</span><br>  <span class="hljs-attr">id:</span> <span class="hljs-string">f614xxxxxxxxxxxxxxxx05d25e</span><br></code></pre></td></tr></table></figure><h3 id="Leancloud-Valine打造Hexo个人博客极简评论系统"><a href="#Leancloud-Valine打造Hexo个人博客极简评论系统" class="headerlink" title="Leancloud+Valine打造Hexo个人博客极简评论系统"></a><a href="https://www.cnblogs.com/Timesi/p/9556236.html">Leancloud+Valine打造Hexo个人博客极简评论系统</a></h3><h4 id="Leancloud配置"><a href="#Leancloud配置" class="headerlink" title="Leancloud配置"></a>Leancloud配置</h4><p>首先访问Leancloud官网<code>https://leancloud.cn/</code><br>有Github账号的小伙伴可以用Github账号进行登陆然后绑定邮箱就可以啦！<br>进入之后点击创建应用</p><p><img src="20230314055115-2.webp" alt="img"></p><p>这样我们就创建好啦！</p><p><img src="20230314055115-3.webp" alt="img"></p><p>接着点击应用右上角的设置进入设置界面</p><p><img src="20230314055115-4.webp" alt="img"></p><p>选择应用key，这样就可以看到我们接下来需要使用到的key</p><p><img src="20230314055115-5.webp" alt="img"></p><p>接着进入应用中心绑定你的个人博客域名</p><p><img src="20230314055115-6.webp" alt="img"></p><h4 id="Valine配置"><a href="#Valine配置" class="headerlink" title="Valine配置"></a>Valine配置</h4><p>然后我们去主题配置文件中进行修改<br>主题配置文件路径：<code>matery_config.yml</code><br>找到以下参数进行修改</p><p>yaml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># Valine.</span><br><span class="hljs-comment"># You can get your appid and appkey from https://leancloud.cn</span><br><span class="hljs-comment"># more info please open https://valine.js.org</span><br><span class="hljs-attr">valine:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span> <span class="hljs-string">//打开valine评论功能</span><br>  <span class="hljs-attr">appid:</span> <span class="hljs-string">你的leancloud</span> <span class="hljs-string">appid</span> <br>  <span class="hljs-attr">appkey:</span> <span class="hljs-string">你的leancloud</span> <span class="hljs-string">appkey</span> <br>  <span class="hljs-attr">notify:</span> <span class="hljs-literal">false</span> <span class="hljs-string">//邮件提醒</span><br>  <span class="hljs-attr">verify:</span> <span class="hljs-literal">true</span> <span class="hljs-string">//评论时是否有验证码，需要在Leancloud</span> <span class="hljs-string">设置-&gt;安全中心</span> <span class="hljs-string">中打开</span><br>  <span class="hljs-attr">placeholder:</span> <span class="hljs-string">说点什么吧！</span> <span class="hljs-string">//评论框默认显示</span><br>  <span class="hljs-attr">avatar:</span> <span class="hljs-string">hide</span> <span class="hljs-string">//评论者的头像,我这里设置的不显示</span><br>  <span class="hljs-attr">guest_info:</span> <span class="hljs-string">nick</span> <span class="hljs-comment"># custom comment header</span><br>  <span class="hljs-attr">pageSize:</span> <span class="hljs-number">10</span> <span class="hljs-comment"># pagination size</span><br></code></pre></td></tr></table></figure><p>PS：评论者头像可以进行如下设置</p><p><img src="20230314055115-7.webp" alt="img"></p><p>到此，一个极简评论系统就完成啦！</p><blockquote><p>本教程还有其它五大部分，更多内容请见<a href="https://blog.17lai.site/posts/40300608/#Hexo%E7%B3%BB%E5%88%97">Hexo系列教程</a></p></blockquote><h2 id="系列教程"><a href="#系列教程" class="headerlink" title="系列教程"></a><strong>系列教程</strong></h2><p><a href="https://blog.17lai.site/atom.xml">全部文章RSS订阅</a></p><h3 id="Hexo系列"><a href="#Hexo系列" class="headerlink" title="Hexo系列"></a><strong>Hexo系列</strong></h3><p><a href="https://blog.17lai.site/categories/hexo/atom.xml"><strong>HexoRSS分类订阅</strong></a></p><p>[三万字教程]基于Hexo的matery主题搭建博客并深度优化完全一站式教程</p><ul><li><a href="https://blog.17lai.site/posts/40300608/">Hexo Docker环境与Hexo基础配置篇</a></li><li><a href="https://blog.17lai.site/posts/4d8a0b22/">hexo博客自定义修改篇</a></li><li><a href="https://blog.17lai.site/posts/9b056c86/">hexo博客网络优化篇</a></li><li><a href="https://blog.17lai.site/posts/5311b619/">hexo博客增强部署篇</a></li><li><a href="https://blog.17lai.site/posts/4a2050e2/">hexo博客个性定制篇</a></li><li><a href="https://blog.17lai.site/posts/84b4059a/">hexo博客常见问题篇</a></li><li><a href="https://blog.17lai.site/posts/253706ff/">hexo博客博文撰写篇之完美笔记大攻略终极完全版</a></li><li><a href="https://blog.17lai.site/posts/cf0f47fd/">Hexo Markdown以及各种插件功能测试</a></li></ul><blockquote><ul><li>markdown 各种其它语法插件，latex公式支持，mermaid图表，plant uml图表，URL卡片，bilibili卡片，github卡片，豆瓣卡片，插入音乐和视频，插入脑图，插入PDF，嵌入iframe</li></ul></blockquote><ul><li><a href="https://blog.17lai.site/posts/217ccdc1/">在 Hexo 博客中插入 ECharts 动态图表</a></li><li><a href="https://blog.17lai.site/posts/546887ac/">使用nodeppt给hexo博客嵌入PPT演示</a></li><li><a href="https://blog.17lai.site/posts/a3c81cc3/">GithubProfile美化与自动获取RSS文章教程</a></li><li><a href="https://blog.17lai.site/posts/e922fac8/">Vercel部署高级用法教程</a></li><li><a href="https://blog.17lai.site/posts/eb731135/">webhook部署Hexo静态博客指南</a></li><li><a href="https://blog.17lai.site/posts/8f9792ab/">在宝塔VPS上面采用docker部署waline全流程图解教程</a></li></ul><h3 id="Docker系列"><a href="#Docker系列" class="headerlink" title="Docker系列"></a><strong>Docker系列</strong></h3><p><a href="https://blog.17lai.site/categories/docker/atom.xml"><strong>Docker 分类 RSS 订阅</strong></a></p><ul><li><a href="https://blog.17lai.site/posts/42b6a86d/">Docker使用简明教程</a></li><li><a href="https://blog.17lai.site/posts/9912bd5d/">使用jeckett,sonarr,iyuu,qt,emby打造全自动追剧流程</a></li><li><a href="https://blog.17lai.site/posts/1802a8a7/">为知笔记私有化Docker部署</a></li><li><a href="https://blog.17lai.site/posts/593cc323/">Earthly 一个更加强大的镜像构建工具</a></li><li><a href="https://blog.17lai.site/posts/90e60aac/">使用 Shell 脚本实现一个简单 Docker</a></li><li><a href="https://blog.17lai.site/posts/465d2738/">如何使用Traefik V2 在Ubuntu20.04 上面来做 Dockers</a></li><li><a href="https://blog.17lai.site/posts/462f1e5c/">通过IPV6访问Qnap NAS中Docker的服务</a></li></ul><h3 id="笔记系列"><a href="#笔记系列" class="headerlink" title="笔记系列"></a><strong>笔记系列</strong></h3><p><a href="https://blog.17lai.site/categories/note/atom.xml"><strong>Note分类RSS订阅</strong></a></p><ul><li><a href="https://blog.17lai.site/posts/a8535f26/">完美笔记进化论</a></li><li><a href="https://blog.17lai.site/posts/253706ff/">hexo博客博文撰写篇之完美笔记大攻略终极完全版</a></li><li><a href="https://blog.17lai.site/posts/e6086437/">Joplin入门指南&amp;实践方案</a></li><li><a href="https://blog.17lai.site/posts/45f878cd/">替代Evernote免费开源笔记Joplin-网盘同步笔记历史版本Markdown可视化</a></li><li><a href="https://blog.17lai.site/posts/92d347d6/">Joplin 插件以及其Markdown语法。All in One!</a></li><li><a href="https://blog.17lai.site/posts/e3ee7f8b/">Joplin 插件使用推荐</a></li><li><a href="https://blog.17lai.site/posts/1802a8a7/">为知笔记私有化Docker部署</a></li></ul><h3 id="Gitbook使用系列"><a href="#Gitbook使用系列" class="headerlink" title="Gitbook使用系列"></a><strong>Gitbook使用系列</strong></h3><p><a href="https://blog.17lai.site/categories/gitbook/atom.xml">Gitbook分类RSS订阅</a></p><ul><li><a href="https://blog.17lai.site/posts/7fe86002/">GitBook+GitLab撰写发布技术文档-Part1:GitBook篇</a></li><li><a href="https://blog.17lai.site/posts/7790e989/">GitBook+GitLab撰写发布技术文档-Part2:GitLab篇</a></li><li><a href="https://blog.17lai.site/posts/d6bad1e5/">自己动手制作电子书的最佳方式（支持PDF、ePub、mobi等格式）</a></li></ul><h3 id="Gitlab-使用系列"><a href="#Gitlab-使用系列" class="headerlink" title="Gitlab 使用系列"></a><strong>Gitlab 使用系列</strong></h3><p><a href="https://blog.17lai.site/categories/gitlab/atom.xml"><strong>Gitlab RSS 分类订阅</strong></a></p><ul><li><a href="https://blog.17lai.site/posts/acc13b70/"><strong>Gitlab的安装及使用教程完全版</strong></a></li><li><a href="https://blog.17lai.site/posts/29a820b3/">破解Gitlab EE</a></li><li><a href="https://blog.17lai.site/posts/d08eb7b/">Gitlab的安装及使用</a></li><li><a href="https://blog.17lai.site/posts/1879721e/">CI&#x2F;CD与Git Flow与GitLab</a></li></ul><p>来源: 夜法之书<br>作者: 夜法之书<br>文章链接: <a href="https://blog.17lai.site/posts/40300608/#Hexo%E5%85%A5%E9%97%A8%E7%AF%87">https://blog.17lai.site/posts/40300608/#Hexo%E5%85%A5%E9%97%A8%E7%AF%87</a><br>本文章著作权归作者所有，任何形式的转载都请注明出处。</p>]]></content>
    
    
    <categories>
      
      <category>default</category>
      
    </categories>
    
    
    <tags>
      
      <tag>default</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hexo主题安装</title>
    <link href="/post/a6d7b86486ae/"/>
    <url>/post/a6d7b86486ae/</url>
    
    <content type="html"><![CDATA[<p><code>千里之行，始于足下。</code></p><p><a href="https://hexo.io/themes/">Themes | Hexo</a></p><h1 id="选择主题"><a href="#选择主题" class="headerlink" title="选择主题"></a>选择主题</h1><p>可以预览 , 和 查看源码</p><p><img src="image-20240706173855293.png" alt="image-20240706173855293"></p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">git clone git<span class="hljs-meta">@github</span>.com:sabrinaluo/hexo-theme-replica.git themes/replica<br></code></pre></td></tr></table></figure><p><img src="image-20240706174104639.png" alt="image-20240706174104639"></p><p>主题将 安装在 themes&#x2F;主题名 </p><h3 id="修改-config-yml"><a href="#修改-config-yml" class="headerlink" title="修改_config.yml"></a>修改_config.yml</h3><p><img src="image-20240706174218073.png" alt="image-20240706174218073"></p><p>备份主题配置</p><p> <a href="........%5Cthemes%5Creplica_config.yml">_config.yml</a>  -&gt; [_config - 副本.yml](........\themes\replica_config - 副本.yml) </p><p>修改配置 <a href="........%5Cthemes%5Creplica_config.yml">_config.yml</a> </p>]]></content>
    
    
    <categories>
      
      <category>工具</category>
      
      <category>Markdown</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
      <tag>Markdown</tag>
      
      <tag>Theme</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>花生壳</title>
    <link href="/post/d2322c4d3105/"/>
    <url>/post/d2322c4d3105/</url>
    
    <content type="html"><![CDATA[<p><code>千里之行，始于足下。</code></p><p><a href="https://hsk.oray.com/download">花生壳客户端官方下载 - 贝锐花生壳官网 (oray.com)</a></p><p>优点: 固定IP</p><p>缺点: 限流1M , 只有2条隧道</p><h1 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h1><p><img src="image-20240706164818305.png" alt="image-20240706164818305"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">wget <span class="hljs-string">&quot;https://dl.oray.com/hsk/linux/phddns_5.3.0_amd64.deb&quot;</span> -O phddns_5.3.0_amd64.deb<br></code></pre></td></tr></table></figure><p><a href="https://service.oray.com/question/11630.html">Linux版使用教程-贝锐官网 (oray.com)</a></p><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs bash">root@beelink:~<span class="hljs-comment"># apt install ./phddns_5.3.0_amd64.deb</span><br>正在读取软件包列表... 完成<br>正在分析软件包的依赖关系树... 完成<br>正在读取状态信息... 完成<br>注意，选中 <span class="hljs-string">&#x27;phddns&#x27;</span> 而非 <span class="hljs-string">&#x27;./phddns_5.3.0_amd64.deb&#x27;</span><br>下列【新】软件包将被安装：<br>  phddns<br>升级了 0 个软件包，新安装了 1 个软件包，要卸载 0 个软件包，有 48 个软件包未 被升级。<br>需要下载 0 B/270 kB 的归档。<br>解压缩后会消耗 12.5 MB 的额外空间。<br>获取:1 /root/phddns_5.3.0_amd64.deb phddns amd64 5.3.0 [270 kB]<br>正在选中未选择的软件包 phddns。<br>(正在读取数据库 ... 系统当前共安装有 224640 个文件和目录。)<br>准备解压 /root/phddns_5.3.0_amd64.deb  ...<br>正在解压 phddns (5.3.0) ...<br>正在设置 phddns (5.3.0) ...<br><span class="hljs-keyword">in</span> systemv<br>Installation, please later...<br>Successful installation of Phddns Service.<br><br> +--------------------------------------------------+<br> |             Oray PeanutHull Linux 5.3.0          |<br> +--------------------------------------------------+<br> |  SN: orayf7285ff174f3   Default password: admin  |<br> +--------------------------------------------------+<br> |    Remote Management Address http://b.oray.com   |<br> +--------------------------------------------------+<br>N: 由于文件<span class="hljs-string">&#x27;/root/phddns_5.3.0_amd64.deb&#x27;</span>无法被用户<span class="hljs-string">&#x27;_apt&#x27;</span>访问，已脱离沙盒并 提权为根用户来进行下载。 - pkgAcquire::Run (13: 权限不够)<br>root@beelink:~<span class="hljs-comment">#</span><br></code></pre></td></tr></table></figure><h3 id="卸载"><a href="#卸载" class="headerlink" title="卸载"></a>卸载</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs bash">root@beelink:~<span class="hljs-comment"># apt remove phddns</span><br>正在读取软件包列表... 完成<br>正在分析软件包的依赖关系树... 完成<br>正在读取状态信息... 完成<br>下列软件包将被【卸载】：<br>  phddns<br>升级了 0 个软件包，新安装了 0 个软件包，要卸载 1 个软件包，有 48 个软件包未 被升级。<br>解压缩后将会空出 12.5 MB 的空间。<br>您希望继续执行吗？ [Y/n] y<br>(正在读取数据库 ... 系统当前共安装有 224651 个文件和目录。)<br>正在卸载 phddns (5.3.0) ...<br>phdaemon: 未找到进程<br>phtunnel: 未找到进程<br>phddns_mini_httpd: 未找到进程<br>Remove Phtunnel Service Success.<br>Thanks For Using Phtunnel Service.<br>root@beelink:~<span class="hljs-comment">#</span><br></code></pre></td></tr></table></figure><h1 id="扩展功能"><a href="#扩展功能" class="headerlink" title="扩展功能"></a>扩展功能</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">root@beelink:~<span class="hljs-comment"># phddns</span><br>Phtunnel Serive called with  unknown argument<br>(phddns  |start|status|stop|restart|reset|<span class="hljs-built_in">enable</span>|<span class="hljs-built_in">disable</span>|version)<br></code></pre></td></tr></table></figure><ul><li>start 启动</li><li>stop 停止</li><li>status 状态</li><li>restart 重启</li><li>reset 重置</li><li>enable 开机自启</li><li>disable 取消开机自启</li><li>version 查看版本号</li></ul><p><strong>注意: 除phddns version命令不需要管理员权限外,其他命令均需要管理员权限</strong></p><p><img src="image-20240706165746108.png" alt="image-20240706165746108"></p><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><p>1、浏览器访问<a href="http://b.oray.com/">http://b.oray.com</a> ，输入花生壳Linux 5.0在安装时产生<strong>SN码与默认登录密码admin</strong>登录。</p><p><img src="image-20240706165910674.png" alt="image-20240706165910674"></p><p><img src="image-20240706165936080.png" alt="image-20240706165936080"></p><p><img src="image-20240706170003456.png" alt="image-20240706170003456"></p><p>激活成功后就可以正常使用了</p><h1 id="添加映射"><a href="#添加映射" class="headerlink" title="添加映射"></a>添加映射</h1><table><thead><tr><th>选项</th><th>描述</th></tr></thead><tbody><tr><td>应用名称</td><td>自定义</td></tr><tr><td>应用图标</td><td>自行选择</td></tr><tr><td>映射类型</td><td>选择TCP</td></tr><tr><td>映射模板</td><td>暂不选择模板</td></tr><tr><td>外网<a href="https://domain.oray.com/">域名</a></td><td>选择用作外网访问的域名</td></tr><tr><td>外网端口</td><td>选择动态端口</td></tr><tr><td>内网主机</td><td>映射的Ubuntu系统内网IP地址</td></tr><tr><td>内网端口</td><td>映射的服务类型对应端口22</td></tr><tr><td>访问控制</td><td>设置在指定条件下才可访问映射 , 提升应用安全。针对网页类映射可支持设置访问密码</td></tr><tr><td>带宽</td><td>购买映射带宽后，可支持给映射分配额外带宽，这里保存默认</td></tr><tr><td>夜间带宽</td><td>18:00-次日8:00带宽速度提升100%，速度不低于5Mbps；带宽基数越大，夜间越快</td></tr></tbody></table><p><a href="https://console.hsk.oray.com/forward">贝锐花生壳管理 - 内网穿透 (oray.com)</a></p><p><img src="image-20240706170558042.png" alt="image-20240706170558042"></p><p><strong>内网主机</strong> : 127.0.0.1也行</p><p>访问部署在linux 80 端口上的nginx </p><p><img src="image-20240706172025539.png" alt="image-20240706172025539"></p><p>穿透成功</p>]]></content>
    
    
    <categories>
      
      <category>工具</category>
      
      <category>内网穿透</category>
      
    </categories>
    
    
    <tags>
      
      <tag>内网穿透</tag>
      
      <tag>花生壳</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Cpolar-使用教程</title>
    <link href="/post/cb717c9eae02/"/>
    <url>/post/cb717c9eae02/</url>
    
    <content type="html"><![CDATA[<p><code>千里之行，始于足下。</code></p><p><a href="https://dashboard.cpolar.com/">cpolar - secure introspectable tunnels to localhost</a></p><p>优点: 不限流量 , 4 条隧道</p><p>缺点: CPU 占用高 , 随机 IP</p><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">curl</span> <span class="hljs-literal">-L</span> https://www.cpolar.com/<span class="hljs-keyword">static</span>/downloads/<span class="hljs-built_in">install-release</span><span class="hljs-literal">-cpolar</span>.sh | sudo bash<br><br></code></pre></td></tr></table></figure><p><img src="image-20240706160413788.png" alt="image-20240706160413788"></p><h3 id="查看版本"><a href="#查看版本" class="headerlink" title="查看版本"></a>查看版本</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">inyxin<span class="hljs-meta">@beelink</span>:~$ cpolar version<br>cpolar version <span class="hljs-number">3.3</span><span class="hljs-number">.12</span><br></code></pre></td></tr></table></figure><h3 id="token-认证"><a href="#token-认证" class="headerlink" title="token 认证"></a>token 认证</h3><p>登录 <a href="https://dashboard.cpolar.com/get-started">cpolar 官网后台</a>，点击左侧的验证，查看自己的认证 token，之后将 token 贴在命令行里</p><p><img src="image-20240706160658210.png" alt="image-20240706160658210"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">inyxin@beelink:~$ cpolar authtoken YWVmMDQ0NGEtMTEyZC00Yjg2LTk4ZjktZDRlOThi<br>Authtoken saved to configuration file: /usr/local/etc/cpolar/cpolar.yml<br></code></pre></td></tr></table></figure><h3 id="简单穿透测试一下"><a href="#简单穿透测试一下" class="headerlink" title="简单穿透测试一下"></a>简单穿透测试一下</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java">cpolar <span class="hljs-number">9998</span><br>    cpolar by <span class="hljs-meta">@bestexpresser</span>                                    (Ctrl+C to quit)                                                                            Tunnel Status       online<br>Account             <span class="hljs-title function_">inyxin</span> <span class="hljs-params">(Plan: Free)</span><br>Version             <span class="hljs-number">3.12</span>/<span class="hljs-number">3.22</span><br>Web Interface       <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">4040</span><br>Forwarding          http:<span class="hljs-comment">//31526c8c.r25.cpolar.top -&gt; http://localhost: 9998 Forwarding          https://31526c8c.r25.cpolar.top -&gt; http://localhost: 9998# Conn              0</span><br>Avg Conn Time       <span class="hljs-number">0.</span>00ms                                 <br>    <br>    <br></code></pre></td></tr></table></figure><p>穿透成功 , 只是 IP 不固定</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">https:<span class="hljs-comment">//31526c8c.r25.cpolar.top/#/</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>工具</category>
      
      <category>内网穿透</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Cpolar</tag>
      
      <tag>内网穿透</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo中Typero图片插入问题</title>
    <link href="/post/93bcae3db381/"/>
    <url>/post/93bcae3db381/</url>
    
    <content type="html"><![CDATA[<p><strong><a href="https://hexo.io/zh-cn/">Hexo 官网</a></strong></p><p><strong>Question :</strong> </p><p>​hexo 处理 本地编写的带有图片的markdown时, 无法正确加载图片的路径</p><p><strong>Solution :</strong></p><ol><li><p>安装插件 <code>hexo-typora-img</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install hexo-typora-img --save<br></code></pre></td></tr></table></figure><p><img src="image-20240706153100037.png" alt="image-20240706153100037"></p></li><li><p>修改_config.yml</p><p><img src="image-20240706153226789.png" alt="image-20240706153226789"></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">post_asset_folder:</span> <span class="hljs-literal">true</span> <span class="hljs-comment">#启用 资源文件夹</span><br><span class="hljs-attr">relative_link:</span> <span class="hljs-literal">true</span> <span class="hljs-comment">#把链接改为与根目录的相对位址</span><br></code></pre></td></tr></table></figure></li><li><p>修改typora图片配置</p></li></ol><p><img src="image-20240706145214903.png" alt="image-20240706145214903"></p>]]></content>
    
    
    <categories>
      
      <category>工具</category>
      
      <category>Markdown</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
      <tag>Markdown</tag>
      
      <tag>Typero</tag>
      
      <tag>Bug</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Typero v1.8.10 破解</title>
    <link href="/post/2133649565eb/"/>
    <url>/post/2133649565eb/</url>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h2 id="Download"><a href="#Download" class="headerlink" title="Download"></a>Download</h2><p><a href="https://pan.baidu.com/share/init?surl=AXfxqM9KBSp7fvbpkeQ8KA&pwd=9sla"> 👉百度网盘下载 </a></p><h2 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h2><p><strong>解压密码</strong></p><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lasso">www.ittel.<span class="hljs-literal">cn</span><br></code></pre></td></tr></table></figure><p><img src="image-20240706144336808.png" alt="image-20240706144336808"></p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p><img src="image-20240706144510255.png" alt="image-20240706144510255"></p><h2 id="激活"><a href="#激活" class="headerlink" title="激活"></a>激活</h2><h3 id="方式1-亲测可行"><a href="#方式1-亲测可行" class="headerlink" title="方式1 (亲测可行)"></a>方式1 (亲测可行)</h3><p>将 <code>ittel/winmm.dll</code> 复制到Typora安装目录下</p><p><img src="image-20240706150128143.png" alt="image-20240706150128143"></p><p> <img src="image-20240706145801712.png" alt="image-20240706145801712"></p><p>最后重启 查看许可证</p><p><img src="image-20240706150207507.png" alt="image-20240706150207507"></p><h3 id="方式2-我不行"><a href="#方式2-我不行" class="headerlink" title="方式2  (我不行)"></a>方式2  (我不行)</h3><p>How to use?</p><ol><li><p>运行 typora-setup-x64-1.7.0-dev-cracked.exe 安装Typora</p></li><li><p>运行 LicenseGen.exe 获得激活码</p><p><img src="image-20240706144737512.png" alt="image-20240706144737512"></p></li><li><p>输入你的邮箱和得到的激活码</p><p><img src="image-20240706144851917.png" alt="image-20240706144851917"></p></li><li><p>完美激活！</p></li></ol><p>这里也提供几个可以用的激活码</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">VMLM7G</span>-<span class="hljs-number">2</span>A45QN-DBM3UZ-GSC7U3<br><span class="hljs-attribute">NXYAC8</span>-NQLVG3-<span class="hljs-number">4</span>ZMB4Z-W4APQA<br><span class="hljs-attribute">7UMJ6D</span>-BWHGKL-KD7ZN9-DNFA3E<br><span class="hljs-attribute">6TFNEN</span>-EFC3MK-QC5VC7-XHWY6A<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>工具</category>
      
      <category>Markdown</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Typero</tag>
      
      <tag>破解</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo Quick Start</title>
    <link href="/post/a6c23c07bd1b/"/>
    <url>/post/a6c23c07bd1b/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    <categories>
      
      <category>工具</category>
      
      <category>Markdown</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
      <tag>Markdown</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>计算机图形学期末复习题</title>
    <link href="/post/9ae56c810397/"/>
    <url>/post/9ae56c810397/</url>
    
    <content type="html"><![CDATA[<p><strong>单项选择题：</strong></p><p>1．计算机的最小存储单位是   A    。</p><p>  A． 位  B． 字节   C． 字  D． 双字 </p><p>2．关于计算机图形学研究内容，不正确的说法是    D 。</p><p>  A． 几何模型构造及图形生成技术       B． 图形的操作与处理方法  </p><p>C． 图形信息的存储、检索与交换技术   D． 人机交互及用户串联技术</p><ol start="3"><li>C&#x2F;C++ Windows 应用程序的入口函数名称是    B   。</li></ol><p>A． main    B． WinMain    C． mian     D． winMain</p><ol start="4"><li>本学期的计算机图形学课程选用的编程语言是   A   。</li></ol><p>A． C&#x2F;C++      B． Java     C． C#      D． Python</p><ol start="5"><li>以下属于本课程选用的编程语言的特点是   B    。</li></ol><p>A． 不支持多继承    B．执行效率高    </p><p>C． 需要解释执行    D． 不适合编写系统软件</p><ol start="6"><li>在Win32 Application平台上绘制图形的类型是   A   。</li></ol><p>A． HDC      B．DCC      C．PDC       D．CDD</p><ol start="7"><li>本学期本课程介绍的绘制直线段的算法共有    D  种。</li></ol><p>A． 1      B． 2      C． 3       D． 4</p><p>8．平面直角坐标系的第一象限有两点A（x0,y0）、B（x1,y1），其中x0、y0、x1、y1均是正整数，则用逐点比较法绘制直线段AB共需执行   A  次画点命令。</p><p>A. | x1-x0| + | y1-y0| + 1    B. | x1-x0| + | y1-y0| </p><p>C. | x1-x0| + | y1-y0| - 1     D. 无法确定</p><p>9．若用逐点比较法在平面直角坐标系的第一象限内绘制直线段，则需要该线段的斜率K的绝对值   A   。</p><p>A. ≥0  B. ≥1  C. 没有要求  D. 无法确定</p><p>10．在平面直角坐标系的第一象限内绘制直线段，下列  D   算法对线段的斜率K没有限制。</p><p>A. 逐点比较  B. DDA  C. 中点 D. Bresenham</p><p>11．不属于Bresenham算法绘制直线段效率高的原因是    D   。</p><p>A. 斜率K不大于1  B. 减少了绘制次数  C. 避免了浮点数运用算 D. 不可进行移位运算</p><p>12．采用Bresenham算法绘制从点A（10,10）到点B（20,15）的直线段，共需执行 A     次画点命令。</p><p>A. 11  B. 15  C. 10  D. 12</p><p>13．计算机图形学中表达一条曲线的方程一般有    C   种形式。</p><p>A. 一  B. 二  C. 三 D. 无穷</p><p>14．解算三次样条插值函数需要额外补充    B   个条件。</p><p>   A. 1  B. 2  C. 3 D. 0</p><p>15．下列不属于曲线插值方法的是  D     。</p><p>A.多项式插值 B.分段多项式插值 C.样条函数插值 D.最小二乘插值</p><p>16．最小二乘法曲线拟合的原理是：使型值点的坐标值与曲线上对应点的坐标值的偏差的平方和达到     B  。</p><p>A.最大  B.最小  C.给定的取值范围 D.以上说法均不正确</p><p>17．区域内部点的判断方法可以是：射线法、检验夹角之和</p><p>18．    B   不属于简单种子填充算法的特点。</p><p>A.操作过程简单  B.需进行深度递归  C.算法的效率低 D.仅需少量的内存空间</p><p>19．二维图形的几何变换共有   B   种基本变换形式。</p><p>A． 2     B． 3     C． 5      D． 4</p><p>20．对于任意一条直线段，它相对于一个已定义的窗口位置关系最多有   D   种情况。</p><p>A． 2     B． 3     C． 5      D． 4</p><p>21．编码裁剪法中，每个区域用一个    D  位代码来表示。</p><p>A． 2     B． 3     C． 5      D． 4</p><p>22．编码裁剪法中，每个点的编码从高到低位依次分别代表   A   。</p><p>A．上下右左     B．右左上下    C．上下左右     D．下上左右</p><p>23．编码裁剪法中，每位的编码只有    A  状态。</p><p>A． 1    B． 3     C． 2      D． 4</p><p>24．编码裁剪法中，若线段两端点编码均为零，则两点    A  。</p><p>A．在窗口外    B．在窗口内    C． 不可见      D． 不能确定</p><p>25．要判断两端点所构成的线段与窗口对应关系，可用两个端点编码进行  C   运算。</p><p>A．逻辑“非”    B．逻辑“或”    C．逻辑“与”      D．逻辑“异或”</p><p>26．若线段两端点的编码的逻辑   C  不为0，则这两个端点必然位于某条边界的同侧，故必在窗口外，应不可见。</p><p>A．非    B． 或    C． 与       D． 异或</p><p>27．多边形的逐边裁剪算法中需要设置   C   个顶点表。</p><p>A． 1    B． 3     C． 2      D． 4</p><p>28．计算机图形学中，一般有   B   种表示三维图形的方法。</p><p>A． 1    B． 3     C． 2      D． 4 (线框模型、表面模型、实体模型)</p><p>29．在三维空间里，给定(n＋l)×(m+1)个空间点,可生成   D   次Bezier曲面。</p><p>A． (n＋l)×(m+1)    B． n ×(m+1)     C．(n＋l)×m      D． n×m</p><p>30．在三维空间中，,生成双三次Bezier曲面，需要    B  个控制顶点。</p><p>A． 9    B． 16     C．25      D． 20</p><p>31．以下不属于正轴测投影的是   D   。</p><p>A． 正等测    B． 正二测    C．正三测      D．正四测</p><ol start="32"><li>透视投影是透视变换与   A   的组合。</li></ol><p>A．平行投影变换    B． 正二测    C．正三测      D．正四测</p><ol start="33"><li>影响真实感图形因素有   D   。</li></ol><p>A．物体本身形状及物体表面特征  B．照射物体光源及物体与光源相对位置</p><p>C. 物体周围环境        D. 以上都是</p><ol start="34"><li>光照在物体表面上通常有   C    种情况。</li></ol><p>A． 1      B． 2      C． 3       D． 4</p><ol start="35"><li>Lambert光照模型主要考虑漫反射光和   A   的影响。</li></ol><p>A. 环境光      B． 镜面光     C． 透射光       D． 高光</p><ol start="36"><li>Phong光照模型有  C    种类型的光的影响。</li></ol><p>A． 1      B． 2      C． 3       D． 4</p><p>37．下列有关投影的叙述语句中,正确的论述为    D  。</p><p>A. 透视投影与平行投影相比，能真实地反映物体的精确的尺寸和形状</p><p>B. 平行投影的投影中心到投影面的距离是无限的</p><p>C. 透视投影变换中，一组平行于投影面的线的投影产生一个灭点</p><p>D. 灭点可以看作是有限远处的一个点在投影面上的投影</p><p>38．以下    D  不是贝塞尔曲线的特点。</p><p> A.贝塞尔曲线只要给出数据点就可构造曲线</p><p> B.贝塞尔曲线次数严格依赖于确定该段曲线的数据点个数</p><p> C.贝塞尔曲线不完全通过数据点</p><p>D.贝塞尔曲线处处可以调整</p><p>39．三维图形是相对于    A   作旋转变换。</p><p>A. 点   B. 直线    C. 平面   D. 曲线</p><p>40．三维空间XYZ中的图形绕x轴的逆时针旋转可看成是图形在  B   绕原点O的二维旋转变换。 </p><p>A．XOY平面  B．YOZ 平面  C．ZOX 平面  D．都不是</p><p>41．已知平面裁剪矩形域的左下角点(50,60)及右上角点(200，200)，利用编码裁剪算法对某线段的端点(56,115)进行编码，其编码是   D  。</p><p>A．1100  B．0000   C．0101  D．1001</p><p>42．在进行扫描线多边形区域填充时，若位于扫描线异侧的两相邻边与扫描线相交于同一点，则该点应视为    C  个交点。</p><p>  A．舍弃  B．1  C．2  D．3</p><p>43．下面哪一项是Bezier曲线的特性    A   。</p><p>A．局部可调性     B．凹凸性    C．对称性    D．中点性</p><p>44．在透视投影中，主灭点的个数最多是   C    。</p><p>A． 1      B． 2     C． 3      D． 0 </p><p>45．下列有关简单光反射模型的描述语句中，正确的是   C  。 </p><p>A．简单光反射模型，又称为Phong模型，它模拟物体表面对光的透射作用</p><p>B．在简单光反射模型中，假定光源是点光源，且仅关注物体表面对光的镜面反射作用 </p><p>C．简单光反射模型主要考虑物体表面对直射光照的漫反射作用</p><p>D．在简单光反射模型中，对物体间的光反射作用，只用一个环境光变量做近似处理</p><p>46．正等轴测图的三个投影轴间的夹角是   D   度。</p><p>A．30     B．60      C．90     D．120</p><p>47．一般情况下，三次B样条曲线需要   B  个控制顶点。 </p><p>A． 5       B． 4      C． 6       D． 3</p><ol start="48"><li>下列设备中，   B    是图形输出设备。</li></ol><p>A． 数字化仪      B． 绘图仪      C．扫描仪       D．键盘</p><ol start="49"><li>直线DDA算法中，当斜率|m|&gt;1时，x方向的增量△x和y方向的增量△y分别</li></ol><p>是   C  。</p><p>A. ±m和±1   B. ±1和±1&#x2F;m   C. ±1和±m   D. ±1&#x2F;m和±1</p><ol start="50"><li>计算机图形学中，CAD是指计算机  B   。</li></ol><p>A. 辅助制造   B. 辅助设计   C. 辅助教学   D. 辅助探测</p><p>51．计算机的基本存储单位是   D   。</p><p>  A． 位  B． 双字   C． 字  D．字节</p><p>52．关于计算机图形学的特点，不正确的说法是    C   。</p><p>A． 计算机产生的图形有规律、光滑 </p><p>B． 计算机产生的图形纯净美观、无噪声干扰</p><p>C．通过计算机产生的图形不能描绘纯粹是想像的主观世界中的各种对象。 </p><p>D．交互式产生的图形可修改性强，且速度快、差错少。</p><ol start="53"><li>关于C&#x2F;C++中的类的说法不正确的是  A     。</li></ol><p>A． 定义类的关键字是struct       B． 类的成员通常具有访问属性</p><p>C． 定义类的对象需要构造函数      D． 类具有封装特性</p><ol start="54"><li>最小二乘法是实际测量值和真实值之差（误差）的平方和达到     B 。</li></ol><p>A． 最大     B． 最小     C． 零       D． 无穷大</p><ol start="55"><li>以下属于本课程选用的编程语言的特点是    A   。</li></ol><p>A． 支持多继承      B． 执行效率低      </p><p>C． 需要解释执行    D． 不适合编写系统软件</p><ol start="56"><li>本学期在MFC平台上绘制图形时通常在   C   类进行实现。</li></ol><p>A． 应用程序类      B．对话框类      C．视图类       D．文档类</p><ol start="57"><li>对于同一条线段而言，Bresenham方法较DDA绘制法的效率   A   。</li></ol><p>A．高     B． 低     C． 相同      D． 没有可比性  </p><p>58．下列有关几何变换的叙述语句中，正确的论述是  C    。</p><p>A．几何变换就是把一个图形从一个位置移到别的位置</p><p>B．几何变换后图形连线次序发生改变</p><p>C．一个正方体经几何变换后可能会变成长方体</p><p>D．几何变换过程中不能让图形产生变形</p><p>59．三维空间XYZ中的图形绕Y轴的正向旋转可以被看作是在 A   绕原点O的二维旋转变换。 </p><p>A．XOY平面  B．YOZ 平面  C．ZOX 平面  D．都不是</p><p>60． 用编码裁剪算法裁剪二维线段时，若直线段两端点M、N的编码分别为1001和1011，则对该线段采用的处理方法是   C    。</p><p>A． 直接保留   B． 直接放弃  C． 对MN在求交分割  D．不能判断</p><p>61．在进行扫描线多边形区域填充时，若位于扫描线同侧的两相邻边与扫描线相交于同一点，则该点应视为   A 个交点。</p><p>  A． 1   B． 2   C． 3   D． 舍弃</p><p>62．下面哪一项不是Bezier曲线的特性   A    。</p><p>A．对称性    B．凸包性    C．局部性可调    D．几何不变性</p><p>63．在透视投影中，投影面仅与两个坐标轴相交,此透视被称为   B   点透视。</p><p>A．1   B．2    C．3   D．4 </p><p>64．下列不属于三视图范围的是      C  。</p><p>A．俯视图       B．主视图      C．正轴测图    D．侧视图</p><p>65．二次B样条曲线具有     B  导数的连续性。 </p><p>A．0阶      B．一阶      C．二阶       D．三阶</p><p>66．MFC应用程序的入口函数名是   C    。 </p><p>A．main      B．mian      C．WinMain       D．winmain</p><p>67．下列有关B样条曲线性质的说明语句中，正确的论述为   B   。</p><p>A． 一条直线与n个顶点控制的B样条曲线可有n个或更多个交点</p><p>B． B样条曲线可构造直线段和切线等特殊情况</p><p>C． 当移动B样条曲线一个顶点时，必定会对整条B样条曲线产生影响</p><p>D． B样条曲线的形状与坐标系的选择无关</p><p>68．下列关于数据的逻辑结构的叙述中，正确的是   A   。</p><p>A．数据的逻辑结构是数据间关系的描述</p><p>B．数据的逻辑结构反映了数据在计算机中的存储方式</p><p>C．数据的逻辑结构分为顺序结构和链式结构</p><p>D．数据的逻辑结构分为静态结构和动态结构</p><p>69．下列有关简单光反射模型的描述中，错误的论述为   D   。</p><p>A．漫反射光是由于表面粗糙不平引起的</p><p>B．环境光是光在物体和环境之间多次反射后最终达到平衡时的一种光</p><p>C．镜面反射光产生的高光区域只反映光源的颜色</p><p>D．该模型中必须考虑透射光</p><p>70．解算平面上5个点所确定的4段自然三次样条函数共需要   C   个附加条件。</p><p>A．1       B．2       C．3       D．4</p><p><strong>判断题：</strong></p><p>( F ) 1. 计算机生成图形时，只能用矢量法而没有其它别的方法。</p><p>( T ) 2. 简单种子填充算法中，选择的种子点必须位于待填充的区域内。 </p><p>( T ) 3. 图形学中可以用线段来近似逼近平面上的曲线。</p><p>( F  ) 4. 两空间向量v1(2，3，4)与v2(4，6，8)可唯一地确定一个平面。</p><p>(  F ) 5.由RGB颜色模型所定义的量所需存储空间是15位。</p><p>( F ) 6. 活动边表AET是多边形所有边记录链表。 </p><p>( T ) 7. 用齐次坐标表示法可以非常方便地处理平移变换。</p><p>(  T  ) 8. 一般情况下，透视投影的投影中心到投影面之间的距离是有限的。   </p><p>（ T  ）9. 由于物体表面凹凸不平而向四周均匀反射的光叫漫射光。 </p><p>（  T ）10.可以通过适当的变换将三点透视转换为一点透视。 </p><p>（  T ）11.计算机生成的直线在显示时往往呈现锯齿状，这种现象叫走样。   </p><p>（ F  ）12.在构建B样条曲线时，绝不允许出现重结点，否则将出错。</p><p>（  T  ）13.平面点P的齐次坐标为(16,6,2)，其对应的实际坐标为（8,3）。</p><p>（ T ）14.移动一个控制点时，可以调整B样条曲线的局部形状。</p><p>（ T ）15.平面上两个点是否位于某直线的同侧可用向量的叉乘进行判断。</p><p>（  F ）16.绘图仪绘制线段是笔在X,Y方向移动，画线时单方向的一次移动距离称为步矩，设备的步矩越小，绘出的图形越精确。</p><p>（  F ）17.自由曲线是一条无法用标准代数方程来描述的曲线。</p><p>曲线插值方法可使用使用高次多项式，因为次数越高，曲线越精确。</p><p>（ T ）18.三次样条曲线要求通过所有指定的数据点，但曲线的形状依赖于边界条件.</p><p>（  T ）19.曲线的形状由特征多边形的顶点Pi（i＝0，l，……，n）唯一确定，与坐标系的选取无关。这就是几何不变性，Bezier曲线的几何作图法就是一个很好的例证。</p><p>（ T ）20.区域填充就是将区域内的像素置成新的颜色值或图案。</p><p>（ T ）21.平面上的区域通常由一个封闭的轮廓来定义，处于一个封闭轮廓线内的所有像素点即构成一个区域。</p><p>（ T ）22.多边形区域填充就是将区域内的像素置成新的颜色值或图案。</p><p>（  T ）23.任何一个封闭曲线都可以用多边形来逼近。</p><p>（  T ）24.对于一个给定的多边形区域而言，显示平面上每个像素点内外特性是互相关联的，即相邻像素间具有相关属性。</p><p>（  T ）25.活动边表AET是一个只与当前扫描线相交的边记录链表。随着扫描线从一条到另一条的转换，AET表的内容也应随之变动。</p><p>（  T ）26.几何变换的规则可以用函数来表示。</p><p>（  T ）27.一般而言，复杂的图形变换都可以基本交换的适当组合来实现。</p><p>（  T ）28.对图形作几何变换，其实质是对点的几何变换。</p><p>（ T ）29.齐次坐标的应用，扩大了变换矩阵功能，只要对矩阵中有关元素赋以不同的 值，即可达到预期变换目的。</p><p>（  T ）30.组合变换顺序不能颠倒，顺序不同，则变换结果不同。</p><p>（  T ）31.裁剪就是将指定窗口作为图形边界，从一幅大的画面中抽取所需的具体信息，以显示某一局部画面或视图。</p><p>（ T ）32.裁剪实质上是从数据集合中抽取信息的过程。</p><p>（  T ）33.视图区（视图Viewport），是在屏幕上定义的一个小于或等于屏幕区域一个矩形块。</p><p>（  T ）34.窗口—视图变换是比例变换和平移变换的组合变换。</p><p>（ F ）35.中点分割裁剪法也叫最远（或近）的可见点算法。</p><p>（  T ）36.线段裁剪确良的多边形裁剪的基础。</p><p>（ T ）37.裁剪多边形要解决两个问题。其一是一个完整的封闭多边形经裁剪后一般不再是封闭的，需要用窗口边界适当部分来封闭它。其二是矩形窗口的四个角点在裁剪中是否要与其它交点连线。</p><p>（ T ）38.计算机图形学中，可以用曲线网格来近似地表示自由曲面。</p><p>（ T ）39.在产生一张自由曲面时，可以利用一系列的纵横交错且相互平行的样条曲线来构造。</p><p>（ T ）40.在空间解析几何中，三维空间内一张任意曲面片用两个参数曲面矢量方程或参数方程表示。</p><p>（  T ）41.在三维空间里，给定(n＋l)×(m+1)个空间点,可生成n×m次参数曲面。</p><p>（ F ）42.双二次Bezier曲面由四条抛物线段包围而，中间的一个顶点的变化对边界曲线不产生影响，这意味着在周边八点不变的情况下，适当选择中心顶点的位置可以控制曲面凹凸，这种控制方式是极其直观的，而且极其简易。</p><p>（ T ）43.双三次Bezier曲面中间的四个顶点的变化对边界曲线不产生影响，但影响曲面片的形状。</p><p>（  T ）44.NURBS曲面拥有非常良好的性质，目前已经成为曲面造型中最为广泛应用的技术。</p><p>（  T ）45.三维图形几何变换后仍然是三维图形。</p><p>（  T ）46. 三维图形旋转变换前后立体的大小和形状不发生变化，只是空间位置相对原位置发生了变化。</p><p>（ T ）47.通常图形输出设备（显示器、绘图仪等）都是二维的，用这些二维设备来输出三维图形，就得把三维坐标系下图形上各点的坐标转化为某一平面坐标系下的二维坐标。</p><p>（  T ）48.把三维物体用二维图形表示的过程称为三维投影变换。</p><p>（  T ）49.斜轴测投影是先将立体沿两个方向产生错切，再向投影面作正投影而得到。</p><p>（ T ）50.透视图是一种将三维物体用二维平面来表达的立体图。</p><p>（ T ）51. 将立体上各点与视点相连所得到的投影线分别与投影面相交，其交点就是立体上相应点的透视投影，再将其依次相连，即获得具有真实立体感的透视图。</p><p>（ F ）52.透视变换是将空间中的物体透视成空间中的另一物体，然后再把这一物体形投影到一个平面上，从而得到透视投影图。</p><p>（  F ）53.透视投影是透视变换与平行投影变换的组合。</p><p>（ T ）54.当视点位于Y轴上时,Y轴上的无限远点［0 1 0 0］进行透视变换后成为有限远点［0 l／q 0 1］。由此可以证明，原来平行于X轴和Z轴直线变换后仍平行于对应坐标轴，但原与Y轴平行直线，透视变换后不再与Y轴平行，而是汇交于Y轴上一点（0，1／q，0） ，该点称为透视的灭点。</p><p>（ T ）55.三点透视: 投影面α与X、Y、Z轴均有交点。三点透视可转换为一点透视进行计算。</p><p>（  T ）56.透视投影符合人类的生理机制，即离视点近的物体大，离视点远的物体小，远到极点即为消失，成为灭点。</p><p>（ T ）57.一个物体离观察点越远，那么它越有可能被其他物体所遮挡。</p><p>（ T ）58.物体空间算法有比较高的精度，生成的图形即使放大一定倍数后仍有令人满意的观感，因此在比较精密的对象显示方面有较多的应用。</p><p>（ T ）59.图像空间的算法在精度上不及前者，它最多到屏幕分辨率时就无法再提高精度，但计算效率较高，因为在图像空间中各种相关性可以得到充分应用，所以也有许多方法是在图像空间中实现的。</p><p>（ T ）60.背面消除算法不是一个完整的隐面消除方法，但它是隐面消除算法中的关键部分。</p><p>（ T ）61.凸多面体是指连接形体上不属于同一表面的任意两点的线段完全位于形体的内部的形体。</p><p>（ T ）62.若点A、B、C三个点中的任意两点所构成的两个向量的叉乘为0，则三点共线。</p><p>（ F ）63.根据三角形面积的坐标表示法所得到的面积的符号可判别顶点的排列顺序，若符号为正是逆序排列，为负则为顺序排列。</p><p>（ T ）64.场景坐标系通常是右手坐标系。</p><p>（ F ）65.观察坐标系通常是左手坐标系。</p><p>（ T ）66.镜面反射光与物体颜色无关，即镜面反射光产生的高光区域只反映光源的颜色。</p><p>（ T ）67.阴影是指景物中没有被光源直接照射的暗区。</p><p>（ T ）68. 纹理：物体表面的细节，分颜色纹理和几何纹理。</p><p>（ T ）69. 颜色纹理：指光滑表面上附加花纹和图案</p><p>（ T ）70. 几何纹理：景物表面微观上呈现的起伏不平；</p><p>(  T ) 71. 一般而言，矢量图所需要的存储空间要比位图小得多。</p><p>(  T ) 72. 若生成的曲线必须通过给定的每个型值点，这种生成曲线的方法叫插值法。</p><p>(  T ) 73. 用射线与多边形边界的交点个数可判数一个点是否是该多边形的内点。</p><p>(  T ) 74. 一般情况下,两个空间三维向量v1与v2的叉积是一个新的向量。</p><p>(  T ) 75. 在视点坐标系中，视点是原点O(0，0，0)，投影面经过点V(0，1，1)，则与OV垂直的投影面方程是y+z-1&#x3D;0。</p><p>( T ) 76. 齐次坐标表示法可以在计算机中表示无穷远点。</p><p>( T ) 77. 可以用梯形法来计算机平面多边形的面积。</p><p>( F ) 78. 在进行扫描线多边形区域填充时，通常需要构建边结点，边结点的数据结构一般有包含该边斜率信息在内的4个域。</p><p>( T ) 79. 由于物体表面的粗糙因素造成入射光向周围均匀反射的光叫环境光。</p><p>( F ) 80.给定平面上4个不同点可以生成一段4次贝塞尔曲线。</p><p>( T ) 81. Windows经经常用句柄（Handle）来标识对象。 </p><p>( T ) 82.基于单文档的MFC应用程序会自动生成包括应用程序类在内的基本类。</p><p>( T ) 83.C++中类的析构函数可完成一些清理性的任务。</p><p>( T ) 84.Z_Buffer算法是一种消隐算法。 </p><p>(  T ) 85.复杂变换通常可以用一系列的基本变换的组合来实现。</p><p>(  T ) 86. 颜色纹理用纹理映射来处理，几何纹理用扰动函数来描述。</p><p>(  T ) 87.图形显示器是由一个个排列有序的像素所构成，画一条直线实际上</p><p>是根据一系列计算出来并与该线靠近的像素而绘制。</p><p>Phong光照明模型中，反射光是由哪几部分组成的？</p><p>答：环境光（Ambient Light）：环境光模拟了场景中所有物体都会接收到的间接光照，即使它们没有被直接的光源照射。这种光照通常用来提供场景的基本亮度，使得物体即使在阴影中也能被看到。</p><p>漫反射光（Diffuse Light）：漫反射光模拟了光线照射到粗糙表面时向各个方向散射的现象。这种光照取决于物体表面的材质属性（如漫反射系数）和光线与表面法线之间的角度。漫反射光照使得物体表面看起来均匀受光，并且颜色取决于物体材质的颜色。</p><p>镜面反射光（Specular Light）：镜面反射光模拟了光线照射到光滑表面时反射的现象。这种光照产生高光（specular highlights），其强度和位置取决于光源、观察者、物体表面法线以及表面材质的镜面反射系数。镜面反射光照使得物体表面看起来有光泽，并且高光的亮度随着观察角度的变化而变化。</p><p>问题：什么是正轴测投影变换？</p><p>答案：正轴测投影变换是一种将三维物体投影到二维平面上的方法，它保持了物体各个轴之间的比例关系。在正轴测投影中，投影线（光线）与投影面（通常是二维平面）垂直，且投影线与物体的三个主要坐标轴（通常是x、y、z轴）成相同的夹角。这种投影方法通常用于工程制图和计算机图形学中，因为它可以提供一个物体的三维视图，同时保持各个方向的比例一致。</p><p>正轴测投影可以进一步分为几种类型，包括：</p><ol><li><p>正等测投影（Isometric Projection）：在正等测投影中，三个轴之间的夹角都是120度，且每个轴的长度在投影中都被缩短到原始长度的√2&#x2F;2倍（大约是原始长度的70.7%）。这种投影保持了三个轴之间的比例关系，使得物体在二维视图上看起来是等比例的。</p></li><li><p>正二测投影（Dimetric Projection）：在正二测投影中，两个轴之间的夹角是120度，而第三个轴与这两个轴的夹角不同。这种投影保持了两个轴之间的比例关系，但第三个轴的比例可能不同。</p></li><li><p>正三测投影（Trimetric Projection）：在正三测投影中，三个轴之间的夹角都不相同，且每个轴的长度在投影中都被缩短到不同的比例。这种投影不保持任何轴之间的比例关系，因此物体的形状在二维视图上可能看起来有些扭曲。</p></li></ol><p>正轴测投影变换在工程制图中非常有用，因为它可以提供一个清晰的、易于理解的物体三维视图，同时避免了透视投影中由于距离造成的尺寸变化。在计算机图形学中，正轴测投影也用于创建技术图和概念设计图，因为它可以提供一种直观的方式来展示物体的三维结构。</p><p>问题：背面消除算法的基本步骤。</p><p>答案：</p><p>1.确定多边形的法线： 对于每个多边形，计算其法线向量。法线向量是垂直于多边形平面的向量，可以通过取多边形上两个非共线边的叉积来得到。</p><p>2.计算观察者到多边形的向量： 确定观察者的位置（通常为摄像机位置），并计算从观察者位置到多边形中心的向量。</p><p>3.计算法线与观察者向量的点积： 将多边形的法线向量与观察者到多边形中心的向量进行点积运算。点积的结果是一个标量，表示两个向量的夹角的余弦值。</p><p>4.判断多边形的可见性：</p><p>如果点积结果大于0，则表示法线向量与观察者向量之间的夹角小于90度，即多边形面向观察者，因此是可见的。</p><p>如果点积结果小于或等于0，则表示法线向量与观察者向量之间的夹角大于或等于90度，即多边形背向观察者，因此是不可见的。</p><p>5.消除背面多边形： 对于那些被判定为不可见的多边形，跳过它们的渲染过程，不进行进一步的绘制操作。</p><p>6.渲染可见多边形： 对于那些被判定为可见的多边形，继续进行渲染过程，包括光照计算、纹理映射等。</p><p>请写出扫描线多边形区域填充的算法过程。</p><p>答案：<strong>预处理多边形，构建活动边表（<strong><strong>AET</strong></strong>），扫描线遍历，处理活动边表，更新活动边表，重复步骤<strong><strong>3-5</strong></strong>，结束</strong></p><p>三次贝塞尔曲线段的有关计算</p><p>答：</p><p>二维、三维几何变换</p><p>答：</p><p>二维几何变换：</p><p>平移变换：将图形沿着x轴和y轴移动一定的距离</p><p>旋转变换：围绕原点或任意点旋转图形</p><p>缩放变换：放大或缩小图形。</p><p>剪切变换：沿x轴或y轴方向倾斜图形</p><p>反射变换：沿x轴或y轴翻转图形</p><p>三位几何变换：</p><p>平移变换：将图形沿着x轴、y轴和z轴移动。</p><p>旋转变换：将图形沿着x轴、y轴和z轴移动。</p><p>缩放变换：放大或缩小图形</p><p>剪切变换：将图形沿着x轴、y轴和z轴移动。</p><p>反射变换：沿x轴、y轴或z轴翻转图形。</p><p>DDA、逐点比较法画直线段</p><p>答：</p><p>DDA步骤：</p><p><img src="clip_image002-1719382350883-1.png" alt="屏幕截图 2024-06-13 115224"></p><p>逐点比较法;</p><p><img src="clip_image004-1719382350883-2.png" alt="屏幕截图 2024-06-13 115634"></p><p><strong>已知平面四点依次是P0(0,0)，P1(1,1)，P2(2,1)，P3(3,0)。用其作为特征多边形P0P1P2P3来构造一条三次贝塞尔曲线段，请写出该曲线的参数化表达式，并分别计算参数为1、2&#x2F;3时曲线上点的值。</strong></p><p><strong>答：表达式：<img src="clip_image005-1719382350884-5.png" alt="屏幕截图 2024-06-13 120039"></strong></p><p><strong>计算<img src="clip_image007-1719382350884-3.png" alt="屏幕截图 2024-06-13 120154"></strong></p><p><strong>简述Gouraud双线性插值算法的基本步骤。</strong></p><p><strong>答：</strong>1.顶点着色：首先，为多边形的每个顶点分配颜色值。</p><p>2.计算边上的颜色梯度：对于多边形的每条边，计算两个顶点之间的颜色梯度，即颜色变化率。</p><p>3.线性插值：沿着每条边，根据参数 𝑡（通常是从0到1的值，表示从一个顶点到另一个顶点的位置），使用线性插值计算边上的每个点的颜色。</p><p>4.填充多边形：使用扫描线算法填充多边形内部。对于扫描线上的每个点，根据该点所在的水平位置，使用相邻边的颜色插值结果来计算该点的颜色。</p><p><strong>如下图所示三角形ABC，将其关于A点顺时针旋转2700，写出其变换矩阵和变换后图形各点的坐标。</strong></p><p><img src="clip_image009-1719382350884-4.png" alt="img"></p><p><strong>简述计算机图形的分类及其特点</strong><strong>:</strong></p><p>计算机图形主要分为两大类：基于线条信息的图形和真实感图形。</p><p>基于线条信息的图形：</p><p>特点：这类图形主要使用线条来表示物体的轮廓和结构，例如工程图、等高线地图、曲面的线框图等。</p><p>应用：常用于工程设计和地理信息系统等领域，强调物体的结构和几何形状。</p><p>真实感图形：</p><p>特点：这类图形通过模拟光线在物体表面的反射、折射、散射等现象，来创建具有真实感的图像。它们通常包含明暗、纹理、阴影等细节。</p><p>应用：广泛应用于电影、游戏、虚拟现实等领域，用于创建逼真的视觉效果。</p><p>计算机图形的这两类各有特点，基于线条信息的图形强调结构和轮廓，而真实感图形则注重图像的真实性和细节。</p><p>问题：请写出多边形区域填充的算法过程:</p><p>1.<strong>多边形表示</strong>：</p><p>使用顶点列表来表示多边形，每个顶点包含其坐标（x, y）。</p><p>2.<strong>排序顶点</strong>：</p><p>将多边形的顶点按照y坐标进行排序，如果y坐标相同，则按照x坐标排序。</p><p>3.<strong>扫描线处理</strong>：</p><p>从y坐标最小的顶点开始，沿着y轴向上扫描。</p><p>对于每条扫描线，找到与该扫描线相交的所有多边形边。</p><p>这些边将扫描线分成若干个区间，每个区间对应多边形内部的一个水平线段。</p><p>4.<strong>边表（ET）和活动边表（AET）</strong>：</p><p>创建边表（Edge Table, ET），用于存储每条扫描线与多边形边相交的信息。</p><p>创建活动边表（Active Edge Table, AET），用于存储当前扫描线上的所有活动边。</p><p>5.<strong>处理交点</strong>：</p><p>对于每条扫描线，将所有与扫描线相交的边的交点按x坐标排序。</p><p>将交点添加到AET中，并更新ET中的边信息。</p><p>6.<strong>填充像素</strong>：</p><p>对于AET中的每一对相邻交点，填充它们之间的所有像素点。</p><p>如果多边形是闭合的，则不需要考虑交点的奇偶性；如果不是闭合的，则只填充交点为奇数个的区间。</p><p>7.<strong>更新AET</strong>：</p><p>在填充完一个区间后，更新AET，移除已经离开扫描线的边，并添加新的进入扫描线的边。</p><p>8.<strong>重复步骤</strong>：</p><p>重复步骤3到7，直到处理完所有扫描线。</p><p>9.<strong>结束</strong>：</p><p>当所有扫描线都处理完毕后，多边形填充完成。</p><p><strong>在如下图所示的坐标系中，有一空间点A绕直线L旋转θ角后到点B，试分析利用基本的平移及旋转矩阵解算B点位置的步骤。</strong></p><p><img src="image-20240705232433572.png" alt="image-20240705232433572"></p><p><img src="image-20240705232446420.png" alt="image-20240705232446420"></p><p>写出逐点比较法画线算法的原理,并编写从点（20，10）到点（60，20）的C程序。</p><p>写出DDA画直线算法的原理，并写出实现该算法的C程序</p><p><img src="clip_image015-1719382350884-8.png" alt="屏幕截图 2024-06-13 171637"><img src="clip_image017-1719382350884-9.png" alt="屏幕截图 2024-06-13 171714"></p><p>写出扫描线种子填充算法的步骤</p><p>答：</p><p>1.初始化种子点：首先，选择一个种子点作为填充过程的起点。这个种子位于需要填充的区域内部。</p><p>2.填充种子点所在的扫描线：从种子点开始，向左和向右填充种子点所在的扫描线上的像素，直到遇到边界像素。</p><p>3.记录填充区域的边界：在填充过程中，记录下填充区域的左边界和右边界，这些边界是填充过程中遇到的第一个非填充像素。</p><p>4.检查相邻的扫描线：对于当前扫描线上的填充区域，检查与它相邻的上一个扫描线和下一个扫描线。在相邻的扫描线上，从记录的左边界开始向右搜索，直到遇到边界像素或已填充的像素。</p><p>5.找到新的种子点：如果在相邻的扫描线上找到了未填充的像素，那么这个像素将成为新的种子点。将这个种子点压入一个栈中，用于后续的填充过程。</p><p>6.重复填充过程：重复步骤4和步骤5，直到栈为空，即所有的种子点都已经处理完毕。</p><p>7.结束填充：当栈为空时，填充过程结束。</p><p>试推导在笛卡尔坐标系中，空间点A（x,y,z）绕Z轴旋转θ角的旋转矩阵.</p><p>什么是正轴测投影变换？试推导正轴测投影变换的变换矩阵</p><p>写出贝塞尔曲面的定义及其矩阵表示形式</p><p>简述三维投影变换分类</p><p>写出Z_Buffer算法的基本步骤.</p><p>Phong光照明模型中，反射光是由哪几部分组成的？写出Phong模型的表达形式.</p><p>组成：</p><ol><li>环境光反射（Ambient Reflection）：这是由环境光引起的均匀照明，它模拟了光线在场景中多次反射后形成的柔和光线。环境光反射不依赖于光源的位置和方向。</li><li>漫反射（Diffuse Reflection）：这是由光源直接照射在物体表面后，由于表面粗糙不平而向各个方向散射的光线。漫反射光的强度与光源的位置和方向有关，但与观察者的位置无关。</li></ol><p>3.镜面反射（Specular Reflection）：这是由光源直接照射在物体表面后，由于表面光滑而向特定方向反射的光线。镜面反射光的强度与光源的位置、观察者的位置以及物体表面的光滑程度有关。</p><p>表达形式：<img src="clip_image019-1719382350884-10.png" alt="屏幕截图 2024-06-13 172531"></p>]]></content>
    
    
    <categories>
      
      <category>学校课程</category>
      
      <category>复习题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>复习题</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>算法设计复习题</title>
    <link href="/post/0194fff0752e/"/>
    <url>/post/0194fff0752e/</url>
    
    <content type="html"><![CDATA[<h3 id="第1章-算法概述"><a href="#第1章-算法概述" class="headerlink" title="第1章 算法概述"></a>第1章 算法概述</h3><h4 id="算法的概念及性质"><a href="#算法的概念及性质" class="headerlink" title="算法的概念及性质"></a>算法的概念及性质</h4><p>算法是解决问题的一系列清晰指令的有限序列，具有输入、输出和明确定义的操作步骤。算法应具备正确性、可行性、确定性和有穷性等性质。</p><h4 id="程序的概念"><a href="#程序的概念" class="headerlink" title="程序的概念"></a>程序的概念</h4><p>程序是由编程语言编写的一组指令，用于实现特定功能或解决特定问题的计算机软件。</p><h4 id="算法举例"><a href="#算法举例" class="headerlink" title="算法举例"></a>算法举例</h4><ul><li><strong>调度问题</strong>：如作业调度、任务分配等问题。</li><li><strong>排序算法</strong>：如冒泡排序、快速排序、归并排序等。</li></ul><h4 id="P类问题、NP类问题概念"><a href="#P类问题、NP类问题概念" class="headerlink" title="P类问题、NP类问题概念"></a>P类问题、NP类问题概念</h4><ul><li><strong>P类问题</strong>：指在多项式时间内可解决的问题。</li><li><strong>NP类问题</strong>：指可以在多项式时间内验证解的问题。NP问题不一定可以在多项式时间内求解。</li></ul><h4 id="算法复杂性的概念"><a href="#算法复杂性的概念" class="headerlink" title="算法复杂性的概念"></a>算法复杂性的概念</h4><p>算法复杂性描述了算法在解决问题时所需的计算资源。主要包括时间复杂性和空间复杂性两个方面。</p><h4 id="时间复杂性的分析"><a href="#时间复杂性的分析" class="headerlink" title="时间复杂性的分析"></a>时间复杂性的分析</h4><p>时间复杂性是指算法运行所需时间的度量，通常用大O记号来表示。常见的时间复杂度包括O(1)、O(log n)、O(n)、O(n log n)、O(n^2)等。</p><h4 id="常见的算法复杂度的大O阶"><a href="#常见的算法复杂度的大O阶" class="headerlink" title="常见的算法复杂度的大O阶"></a>常见的算法复杂度的大O阶</h4><ul><li>**O(1)**：常数时间复杂度，如哈希表的插入和查找操作。</li><li>**O(log n)**：对数时间复杂度，如二分查找。</li><li>**O(n)**：线性时间复杂度，如简单查找。</li><li>**O(n log n)**：如快速排序、归并排序等。</li><li>**O(n^2)**：平方时间复杂度，如冒泡排序、插入排序等。</li><li><h2 id="O-1-O-logn-O-n-O-nlogn-O-n-2-O-2-n-O-n"><a href="#O-1-O-logn-O-n-O-nlogn-O-n-2-O-2-n-O-n" class="headerlink" title="O(1) &lt; O(logn) &lt; O(n) &lt; O(nlogn) &lt; O(n^2) &lt; O(2^n) &lt; O(n!)"></a><strong><code>O(1) &lt; O(logn) &lt; O(n) &lt; O(nlogn) &lt; O(n^2) &lt; O(2^n) &lt; O(n!)</code></strong></h2></li></ul><h4 id="h函数的渐进表达式计算"><a href="#h函数的渐进表达式计算" class="headerlink" title="h函数的渐进表达式计算"></a>h函数的渐进表达式计算</h4><p>函数的渐进表达式用来描述函数在自变量趋向于无穷大时的增长趋势。常见的有O大O、Ω大Omega、Θ大Theta等。</p><p>希望这些回答能帮到你！如有其他问题，请继续提问。</p><h3 id="第2章-递归与分治"><a href="#第2章-递归与分治" class="headerlink" title="第2章 递归与分治"></a>第2章 递归与分治</h3><h4 id="递归的概念"><a href="#递归的概念" class="headerlink" title="递归的概念"></a>递归的概念</h4><p>递归是指一个函数在定义中调用自身的过程。递归函数通常包括两部分：基本情况（递归的结束条件）和递归情况（调用自身以解决更小的子问题）。</p><h4 id="递归方程求解"><a href="#递归方程求解" class="headerlink" title="递归方程求解"></a>递归方程求解</h4><p>递归方程用来描述递归算法的时间复杂度。通常通过递推关系式来表示，可以使用递归树或主定理来求解复杂度。</p><h4 id="经典递归实例"><a href="#经典递归实例" class="headerlink" title="经典递归实例"></a>经典递归实例</h4><ul><li><strong>求和</strong>：例如计算1到n的和。</li><li><strong>求阶乘</strong>：如计算n的阶乘，即n!。</li><li><strong>Fibonacci数列</strong>：例如计算第n个斐波那契数。</li><li><strong>整数划分问题</strong>：例如将整数n划分成若干个整数的和。</li><li><strong>汉诺塔问题</strong>：经典的递归问题，将圆盘从一根柱子移动到另一根柱子，要求小圆盘必须在大圆盘上方。</li></ul><h4 id="递归的特点及优缺点"><a href="#递归的特点及优缺点" class="headerlink" title="递归的特点及优缺点"></a>递归的特点及优缺点</h4><p><strong>特点：</strong></p><ul><li>简洁、直观，能够简化问题的表达和解决。</li><li>适用于问题的分而治之，能够自然地描述一些具有递归结构的问题。</li></ul><p><strong>优点：</strong></p><ul><li>简化复杂问题，使问题更易理解和实现。</li><li>有助于实现分治策略，使问题的分解和解决更加自然和高效。</li></ul><p><strong>缺点：</strong></p><ul><li>可能会导致堆栈溢出的问题，尤其是在递归层数很深时。</li><li>可能存在重复计算，效率较低。</li></ul><h4 id="分治法的基本思想"><a href="#分治法的基本思想" class="headerlink" title="分治法的基本思想"></a>分治法的基本思想</h4><p>分治法将原问题分解成若干个规模较小但结构与原问题相似的子问题，递归地求解这些子问题，然后合并子问题的解来得到原问题的解。</p><h4 id="分治法实例"><a href="#分治法实例" class="headerlink" title="分治法实例"></a>分治法实例</h4><ul><li><strong>二分搜索算法</strong>：在有序数组中查找特定元素。</li><li><strong>合并排序（Merge Sort）</strong>：将数组分成两半，分别排序后再合并。</li><li><strong>快速排序（Quick Sort）</strong>：选取一个基准元素，将数组分为比基准元素小和比基准元素大的两部分，然后递归地对这两部分进行排序。</li></ul><h2 id="第3章-动态规划"><a href="#第3章-动态规划" class="headerlink" title="第3章 动态规划"></a>第3章 动态规划</h2><h3 id="动态规划总体思想"><a href="#动态规划总体思想" class="headerlink" title="动态规划总体思想"></a>动态规划总体思想</h3><p>动态规划（Dynamic Programming，简称DP）是一种通过将复杂问题拆分为更简单的子问题，并存储其子问题的解，以避免重复计算，从而提高效率的算法设计方法。它通常用于解决具有重叠子问题和最优子结构性质的问题。</p><ol><li><strong>重叠子问题（Overlapping Subproblems）</strong>：原问题可以分解为多个子问题，这些子问题会重复出现。</li><li><strong>最优子结构（Optimal Substructure）</strong>：原问题的最优解可以通过其子问题的最优解构造得到。</li></ol><h3 id="动态规划基本步骤"><a href="#动态规划基本步骤" class="headerlink" title="动态规划基本步骤"></a>动态规划基本步骤</h3><ol><li><strong>定义子问题</strong>：明确要解决的子问题是什么，把一个大问题分解成若干个相同类型的小问题。</li><li><strong>确定状态（State）</strong>：用一个数组或表格来表示每个子问题的解。</li><li><strong>设置边界条件（Initialization）</strong>：初始化最简单的子问题的解。</li><li><strong>状态转移方程（Recurrence Relation）</strong>：找到子问题和原问题之间的递推关系。</li><li><strong>计算结果</strong>：根据状态转移方程，迭代计算每个子问题的解，最终得到原问题的解。</li></ol><h3 id="动态规划基本要素"><a href="#动态规划基本要素" class="headerlink" title="动态规划基本要素"></a>动态规划基本要素</h3><ol><li><strong>状态定义</strong>：描述一个子问题的解，例如 <code>dp[i]</code> 表示前 i 个元素的某种状态。</li><li><strong>状态转移方程</strong>：描述如何从一个状态转移到另一个状态，例如 <code>dp[i] = dp[i-1] + something</code>。</li><li><strong>初始状态和边界条件</strong>：为递推提供基础，例如 <code>dp[0] = 0</code> 或其他初始值。</li><li><strong>计算顺序</strong>：根据状态转移方程的依赖关系，通常是从小到大的顺序计算。</li></ol><h3 id="动态规划实例"><a href="#动态规划实例" class="headerlink" title="动态规划实例"></a>动态规划实例</h3><h4 id="1-最长公共子序列（Longest-Common-Subsequence-LCS）"><a href="#1-最长公共子序列（Longest-Common-Subsequence-LCS）" class="headerlink" title="1. 最长公共子序列（Longest Common Subsequence, LCS）"></a>1. 最长公共子序列（Longest Common Subsequence, LCS）</h4><p><strong>问题描述</strong>：给定两个字符串，找到它们的最长公共子序列的长度。</p><p><strong>状态定义</strong>：<code>dp[i][j]</code> 表示字符串 A 的前 i 个字符和字符串 B 的前 j 个字符的最长公共子序列的长度。</p><p><strong>状态转移方程</strong>：</p><ul><li>如果 <code>A[i-1] == B[j-1]</code>，则 <code>dp[i][j] = dp[i-1][j-1] + 1</code></li><li>否则，<code>dp[i][j] = max(dp[i-1][j], dp[i][j-1])</code></li></ul><p><strong>初始化</strong>：<code>dp[0][j] = 0</code> 和 <code>dp[i][0] = 0</code>，因为任何字符串和空字符串的最长公共子序列长度都是 0。</p><h4 id="2-最大子段和问题（Maximum-Subarray-Sum）"><a href="#2-最大子段和问题（Maximum-Subarray-Sum）" class="headerlink" title="2. 最大子段和问题（Maximum Subarray Sum）"></a>2. 最大子段和问题（Maximum Subarray Sum）</h4><p><strong>问题描述</strong>：给定一个整数数组，找到具有最大和的连续子数组，并返回其最大和。</p><p><strong>状态定义</strong>：<code>dp[i]</code> 表示以第 i 个元素结尾的最大子数组和。</p><p><strong>状态转移方程</strong>：</p><ul><li><code>dp[i] = max(nums[i], dp[i-1] + nums[i])</code></li></ul><p><strong>初始化</strong>：<code>dp[0] = nums[0]</code>，因为只有一个元素时，最大子数组和就是该元素本身。</p><h4 id="3-0-1-背包问题（0-1-Knapsack-Problem）"><a href="#3-0-1-背包问题（0-1-Knapsack-Problem）" class="headerlink" title="3. 0-1 背包问题（0-1 Knapsack Problem）"></a>3. 0-1 背包问题（0-1 Knapsack Problem）</h4><p><strong>问题描述</strong>：给定一个容量为 W 的背包和一组物品，每个物品有重量和价值，求解如何选择物品使得总价值最大且总重量不超过背包容量。</p><p><strong>状态定义</strong>：<code>dp[i][w]</code> 表示前 i 个物品在总重量不超过 w 时的最大价值。</p><p><strong>状态转移方程</strong>：</p><ul><li>如果不选第 i 个物品：<code>dp[i][w] = dp[i-1][w]</code></li><li>如果选第 i 个物品：<code>dp[i][w] = dp[i-1][w-weight[i]] + value[i]</code></li><li>综合起来：<code>dp[i][w] = max(dp[i-1][w], dp[i-1][w-weight[i]] + value[i])</code></li></ul><p><strong>初始化</strong>：<code>dp[0][w] = 0</code> 对所有 w，因为没有物品时，价值为 0。</p><p>这些实例展示了动态规划在不同领域中的应用，通过定义状态、确定转移方程以及初始化，可以有效地解决许多复杂问题。</p><h3 id="第4章-贪心算法"><a href="#第4章-贪心算法" class="headerlink" title="第4章 贪心算法"></a>第4章 贪心算法</h3><h4 id="贪心算法的概念"><a href="#贪心算法的概念" class="headerlink" title="贪心算法的概念"></a>贪心算法的概念</h4><p>贪心算法（Greedy Algorithm）是一种在每一步选择中都采取在当前状态下最好或最优的选择，以期望通过局部最优解达到全局最优解的算法设计方法。贪心算法不一定能保证求得全局最优解，但对于某些特定问题，它可以提供高效且正确的解。</p><h4 id="用贪心算法求解的问题需具备的两个基本要素"><a href="#用贪心算法求解的问题需具备的两个基本要素" class="headerlink" title="用贪心算法求解的问题需具备的两个基本要素"></a>用贪心算法求解的问题需具备的两个基本要素</h4><ol><li><strong>贪心选择性质（Greedy Choice Property）</strong>：在当前步骤中，选择局部最优解不会影响到后续的选择能够构成全局最优解。这意味着可以通过局部最优策略来构建全局最优解。</li><li><strong>最优子结构性质（Optimal Substructure）</strong>：一个问题的全局最优解包含其子问题的全局最优解。也就是说，问题的最优解可以由其子问题的最优解递归地构建出来。</li></ol><h4 id="贪心算法与动态规划算法的差异"><a href="#贪心算法与动态规划算法的差异" class="headerlink" title="贪心算法与动态规划算法的差异"></a>贪心算法与动态规划算法的差异</h4><ul><li><strong>选择标准</strong>：<ul><li><strong>贪心算法</strong>：在每一步选择中做出局部最优的选择，不回溯、不考虑后续可能的选择。</li><li><strong>动态规划</strong>：考虑所有可能的选择，通过比较不同选择的结果来确保全局最优解。</li></ul></li><li><strong>适用问题类型</strong>：<ul><li><strong>贪心算法</strong>：通常适用于具有贪心选择性质和最优子结构性质的问题。</li><li><strong>动态规划</strong>：适用于更广泛的问题类型，特别是那些具有重叠子问题和最优子结构性质的问题。</li></ul></li><li><strong>计算复杂度</strong>：<ul><li><strong>贪心算法</strong>：通常较简单且高效，适用于大多数实际情况。</li><li><strong>动态规划</strong>：可能需要存储子问题的解，空间和时间复杂度一般较高。</li></ul></li></ul><h4 id="贪心算法实例"><a href="#贪心算法实例" class="headerlink" title="贪心算法实例"></a>贪心算法实例</h4><h5 id="1-活动安排问题（Activity-Selection-Problem）"><a href="#1-活动安排问题（Activity-Selection-Problem）" class="headerlink" title="1. 活动安排问题（Activity Selection Problem）"></a>1. 活动安排问题（Activity Selection Problem）</h5><p><strong>问题描述</strong>：给定一组活动，每个活动有一个开始时间和结束时间。要求选择尽可能多的互不重叠的活动。</p><p><strong>贪心策略</strong>：每次选择结束时间最早且与已选活动不冲突的活动。</p><p><strong>算法描述</strong>：</p><ol><li>按照活动的结束时间从小到大排序。</li><li>选择第一个活动。</li><li>从剩余活动中选择开始时间不早于上一个选择的活动结束时间的活动。</li><li>重复步骤3直到没有可选活动。</li></ol><h5 id="2-部分背包问题（Fractional-Knapsack-Problem）"><a href="#2-部分背包问题（Fractional-Knapsack-Problem）" class="headerlink" title="2. 部分背包问题（Fractional Knapsack Problem）"></a>2. 部分背包问题（Fractional Knapsack Problem）</h5><p><strong>问题描述</strong>：给定一组物品，每个物品有重量和价值，在允许部分取物的情况下，选择装入容量为 W 的背包，使得总价值最大。</p><p><strong>贪心策略</strong>：按照单位重量的价值（value&#x2F;weight）从大到小选择物品，尽可能多地装入背包。</p><p><strong>算法描述</strong>：</p><ol><li>计算每个物品的单位重量价值，并按其从大到小排序。</li><li>依次选择物品，直到背包装满或无法再装入更多物品。</li></ol><h5 id="3-最优装载问题（Optimal-Load-Problem）"><a href="#3-最优装载问题（Optimal-Load-Problem）" class="headerlink" title="3. 最优装载问题（Optimal Load Problem）"></a>3. 最优装载问题（Optimal Load Problem）</h5><p><strong>问题描述</strong>：在一个货运航班中，如何装载货物使得总重量不超过最大承载重量且装载的货物总价值最大。</p><p><strong>贪心策略</strong>：按照单位重量的价值（value&#x2F;weight）从大到小选择货物，尽可能多地装入航班。</p><h5 id="4-哈夫曼编码（Huffman-Coding）"><a href="#4-哈夫曼编码（Huffman-Coding）" class="headerlink" title="4. 哈夫曼编码（Huffman Coding）"></a>4. 哈夫曼编码（Huffman Coding）</h5><p><strong>问题描述</strong>：给定一组字符及其对应的频率，构建一个二进制前缀码（哈夫曼码）使得编码后的字符总长度最短。</p><p><strong>贪心策略</strong>：每次选择频率最小的两个节点合并，直到所有节点合并成一棵树。</p><p><strong>算法描述</strong>：</p><ol><li>将所有字符构建成叶子节点，并按照频率构建一个优先队列。</li><li>每次从队列中取出频率最小的两个节点，合并成一个新节点，并将新节点的频率设为两个节点频率之和。</li><li>将新节点重新放入队列。</li><li>重复步骤2和3，直到队列中只剩一个节点，这个节点即为哈夫曼树的根。</li></ol><h5 id="5-最小生成树（Minimum-Spanning-Tree-MST）"><a href="#5-最小生成树（Minimum-Spanning-Tree-MST）" class="headerlink" title="5. 最小生成树（Minimum Spanning Tree, MST）"></a>5. 最小生成树（Minimum Spanning Tree, MST）</h5><p><strong>问题描述</strong>：给定一个带权无向图，找到一个树，使得树包含所有节点且边的权值和最小。</p><p><strong>常用贪心算法</strong>：Kruskal算法和Prim算法。</p><p><strong>Kruskal算法</strong>：</p><ol><li>将所有边按权重从小到大排序。</li><li>初始化一个森林（每个顶点各自为树）。</li><li>依次选择权重最小的边，若该边连接的两个顶点属于不同的树，则将其加入生成树，并合并这两个顶点所在的树。</li><li>重复步骤3，直到生成树包含所有顶点。</li></ol><p><strong>Prim算法</strong>：</p><ol><li>从任意一个顶点开始，将其标记为已访问。</li><li>在已访问顶点和未访问顶点之间选择权重最小的边，将该边和其连接的未访问顶点加入生成树。</li><li>重复步骤2，直到生成树包含所有顶点。</li></ol><h5 id="6-多机调度问题（Job-Scheduling-Problem）"><a href="#6-多机调度问题（Job-Scheduling-Problem）" class="headerlink" title="6. 多机调度问题（Job Scheduling Problem）"></a>6. 多机调度问题（Job Scheduling Problem）</h5><p><strong>问题描述</strong>：给定一组作业和多个机器，安排作业到机器上，使得所有作业完成的总时间最短。</p><p><strong>贪心策略</strong>：每次选择最短作业时间或将作业分配到当前负载最轻的机器上。</p><p><strong>算法描述</strong>：</p><ol><li>按作业时间从短到长排序。</li><li>依次将作业分配到当前负载最轻的机器上。</li></ol><p>贪心算法通过简洁有效的策略解决了许多实际问题，但并非适用于所有情况。在使用贪心算法时，需要确保问题具备贪心选择性质和最优子结构性质。</p><h1 id="试卷结构"><a href="#试卷结构" class="headerlink" title="试卷结构"></a><strong>试卷结构</strong></h1><p>试卷共4页，5大题，满分 100分， 120 分钟完卷。</p><h4 id="一、单项选择题：-每小题2分，共30分"><a href="#一、单项选择题：-每小题2分，共30分" class="headerlink" title="一、单项选择题：(每小题2分，共30分)"></a>一、<strong>单项选择题：</strong>(每小题2分，共30分)</h4><p>在下列每小题的四个备选答案中选出一个正确的答案，并将其字母标号填入下面的表格中，填入题干的括号内无效。</p><h4 id="二、判断题：-每小题1分，共10分）"><a href="#二、判断题：-每小题1分，共10分）" class="headerlink" title="二、判断题：(每小题1分，共10分）"></a>二、<strong>判断题：</strong>(每小题1分，共10分）</h4><p>以下描述正确的打“√”，错误的打“×”，并将答案填在下面的表格中。</p><h4 id="三、计算题：-每小题10分，共30分"><a href="#三、计算题：-每小题10分，共30分" class="headerlink" title="三、计算题：(每小题10分，共30分)"></a><strong>三、计算题：</strong>(每小题10分，共30分)</h4><p>函数的渐进表达式计算（递归方程求解）、解空间树（子集树或排列树）、哈夫曼编码（构造哈夫曼树及编码）</p><h4 id="四、简答题：-每小题5分，共10分"><a href="#四、简答题：-每小题5分，共10分" class="headerlink" title="四、简答题：(每小题5分，共10分)"></a>四、<strong>简答题：</strong>(每小题5分，共10分)</h4><h5 id="动态规划总体思想、基本步骤、基本要素"><a href="#动态规划总体思想、基本步骤、基本要素" class="headerlink" title="动态规划总体思想、基本步骤、基本要素"></a>动态规划总体思想、基本步骤、基本要素</h5><ul><li><p>动态规划通过将原问题分解为相对简单的子问题来解决复杂问题，通过存储子问题的解，避免重复计算，从而提高效率。其关键在于将问题分解为子问题，并确定子问题之间的递推关系，以便逐步求解原问题。</p><h3 id="基本步骤："><a href="#基本步骤：" class="headerlink" title="基本步骤："></a>基本步骤：</h3><p>（1）</p><p>（2）递归地定义最优值。 </p><p>（3）以自底向上的方式或自顶向下的记忆化方法（备忘录法）计算出最优值。 </p><p>（4）根据计算最优值时得到的信息，构造一个最优解。 </p><h3 id="基本要素："><a href="#基本要素：" class="headerlink" title="基本要素："></a>基本要素：</h3><ul><li>最优子结构</li><li>状态转移方程</li><li>边界条件</li><li>状态存储</li><li>状态压缩</li></ul></li></ul><h5 id="回溯法的概念及基本思想、应用步骤及剪枝函数"><a href="#回溯法的概念及基本思想、应用步骤及剪枝函数" class="headerlink" title="回溯法的概念及基本思想、应用步骤及剪枝函数"></a>回溯法的概念及基本思想、应用步骤及剪枝函数</h5><p>概念：回溯法（Backtracking）是一种通过试探所有可能的解来求解问题的算法</p><p>基本思想：逐步构建问题的解决方案，并在搜索过程中进行选择和回退，直到找到解或确定问题无解为止</p><p>应用步骤：</p><ul><li>定义问题1</li><li>选择状态表示</li><li>编写回溯函数<ul><li>递归参数</li><li>递归终止条件</li><li>递归主体</li></ul></li><li>执行回溯搜索</li></ul><h5 id="分支限界法与回溯法的比较"><a href="#分支限界法与回溯法的比较" class="headerlink" title="分支限界法与回溯法的比较"></a>分支限界法与回溯法的比较</h5><p><strong>分支限界法与回溯法的相同点是：</strong>都是一种在问题的解空间树T中搜索问题解的算法。</p><p><strong>不同点：</strong>（1）求解目标不同； </p><p>（2）搜索方式不同； </p><p>（3）对扩展结点的扩展方式不同； </p><p>（4）存储空间的要求不同。</p><h4 id="分支限界法的基本思想、分支限界法的两种实现方式"><a href="#分支限界法的基本思想、分支限界法的两种实现方式" class="headerlink" title="分支限界法的基本思想、分支限界法的两种实现方式"></a>分支限界法的基本思想、分支限界法的两种实现方式</h4><p>基本思想：分支限界法通常以广度优先或者以最小耗费优先的方式搜索问题的解空间树</p><p>两种实现方式：</p><p>队列式分支限界法（队列式分支限界法将活结点表组织成一个队列，并按照队列先进先出的原则选取下一个结点为当前扩展结点）</p><p>优先队列式分支限界法（优先队列式的分支限界法将活结点表组织成一个优先队列，并按照优先队列中规定的结点优先级选取优先级最高的下一个结点成为当前的扩展结点）</p><h3 id="五、算法设计题：-每小题10分，共20分"><a href="#五、算法设计题：-每小题10分，共20分" class="headerlink" title="五、算法设计题：(每小题10分，共20分)"></a><strong>五、算法设计题：</strong>(每小题10分，共20分)</h3><p>最大子段和、二分搜索算法</p><h6 id="最大子段和"><a href="#最大子段和" class="headerlink" title="最大子段和"></a>最大子段和</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">maxSubArray</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums)</span> &#123;<br>    <span class="hljs-keyword">if</span> (nums == <span class="hljs-literal">null</span> || nums.length == <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <br>    <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> nums.length;<br>    <span class="hljs-type">int</span>[] dp = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[n];<br>    dp[<span class="hljs-number">0</span>] = nums[<span class="hljs-number">0</span>];<br>    <span class="hljs-type">int</span> <span class="hljs-variable">maxSum</span> <span class="hljs-operator">=</span> dp[<span class="hljs-number">0</span>];<br>    <br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt; n; i++) &#123;<br>        dp[i] = Math.max(dp[i - <span class="hljs-number">1</span>] + nums[i], nums[i]);<br>        maxSum = Math.max(maxSum, dp[i]);<br>    &#125;<br>    <br>    <span class="hljs-keyword">return</span> maxSum;<br>&#125;<br>解释：<br>dp[i] 数组用来存储以第 i 个元素结尾的最大子段和。<br>maxSum 变量用来记录 dp 数组中的最大值，即为最终的结果。<br>时间复杂度为 O(n)，空间复杂度为 O(n)，其中 n 是数组 nums 的长度。<br>这种动态规划算法在实现上简单直观，并且能够有效地解决最大子段和问题。<br></code></pre></td></tr></table></figure><h6 id="二分搜索算法"><a href="#二分搜索算法" class="headerlink" title="二分搜索算法"></a>二分搜索算法</h6><p><img src="clip_image002-1718613963237-2.png" alt="img">                                                                 </p>]]></content>
    
    
    <categories>
      
      <category>学校课程</category>
      
      <category>复习题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>复习题</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>基于AOP实现简单日志记录</title>
    <link href="/post/4771d0ae83fb/"/>
    <url>/post/4771d0ae83fb/</url>
    
    <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">package</span> org.example.springaoplog.log;<br><br><span class="hljs-keyword">import</span> com.fasterxml.jackson.core.JsonProcessingException;<br><span class="hljs-keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;<br><span class="hljs-keyword">import</span> org.aspectj.lang.ProceedingJoinPoint;<br><span class="hljs-keyword">import</span> org.aspectj.lang.annotation.Around;<br><span class="hljs-keyword">import</span> org.aspectj.lang.annotation.Aspect;<br><span class="hljs-keyword">import</span> org.aspectj.lang.annotation.Pointcut;<br><span class="hljs-keyword">import</span> org.aspectj.lang.reflect.MethodSignature;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><span class="hljs-keyword">import</span> org.springframework.util.StopWatch;<br><br><span class="hljs-keyword">import</span> javax.annotation.Resource;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> java.util.Date;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 日志切面</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> 14237</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@Aspect</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LogAspect</span> &#123;<br>    <span class="hljs-meta">@Pointcut</span> ( <span class="hljs-string">&quot;@annotation(org.example.springaoplog.log.Log)&quot;</span>)<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">pointcut</span><span class="hljs-params">()</span> &#123;&#125;<br><br>    <span class="hljs-meta">@Resource</span><br>    HttpServletRequest request;<br>    <span class="hljs-keyword">final</span> <span class="hljs-type">ObjectMapper</span> <span class="hljs-variable">mapper</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectMapper</span>();<br><br>    <span class="hljs-meta">@Around</span> ( <span class="hljs-string">&quot;pointcut()&quot;</span>)<br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">around</span><span class="hljs-params">(ProceedingJoinPoint pjp)</span> <span class="hljs-keyword">throws</span> JsonProcessingException &#123;<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">MethodSignature</span> <span class="hljs-variable">signature</span> <span class="hljs-operator">=</span> ((MethodSignature) pjp.getSignature());<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">Log</span> <span class="hljs-variable">annotation</span> <span class="hljs-operator">=</span> signature.getMethod().getAnnotation(Log.class);<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">StopWatch</span> <span class="hljs-variable">stopWatch</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StopWatch</span>();<br>        stopWatch.start();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">errorMsg</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br>        <span class="hljs-keyword">final</span> Object proceed;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            proceed = pjp.proceed();<br>            result = mapper.writeValueAsString(proceed);<span class="hljs-comment">//返回结果</span><br>            <span class="hljs-keyword">return</span> proceed;<br>        &#125; <span class="hljs-keyword">catch</span>(Throwable e) &#123;<br>            errorMsg = e.getLocalizedMessage();<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            stopWatch.stop();<br><br>            <span class="hljs-keyword">final</span> <span class="hljs-type">SysLog</span> <span class="hljs-variable">sysLog</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SysLog</span>()<br>                    .setId(<span class="hljs-literal">null</span>)<br>                    .setRequestMethod(request.getMethod())<br>                    .setName(annotation.value())<br>                    .setType(annotation.type().getValue())<br>                    .setOperator(<span class="hljs-string">&quot;sessionId: &quot;</span> + request.getSession().getId())<br>                    .setOperatingTime(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>())<br>                    .setIp(request.getRemoteHost())<br>                    .setUrl(request.getRequestURL().toString())<br>                    .setMethod(signature.toString())<br>                    .setArgs(mapper.writeValueAsString(pjp.getArgs()))<br>                    .setMillisecond(stopWatch.getTotalTimeMillis())<br>                    .setResult(result)<br>                    .setError(errorMsg);<br>            <span class="hljs-comment">//记录日志</span><br>            recordLog(sysLog);<br>        &#125;<br><br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 记录日志</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> log 日志</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">recordLog</span><span class="hljs-params">(SysLog log)</span> &#123;<br>        <span class="hljs-comment">//保存到数据库</span><br>        System.err.println(log);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example.springaoplog.log;<br><br><span class="hljs-keyword">import</span> java.lang.annotation.Retention;<br><span class="hljs-keyword">import</span> java.lang.annotation.RetentionPolicy;<br><br><span class="hljs-meta">@Retention</span> ( RetentionPolicy.RUNTIME)<br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> Log &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 日志类型</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> &#123;<span class="hljs-doctag">@link</span> LogType &#125;</span><br><span class="hljs-comment">     */</span><br>    LogType <span class="hljs-title function_">type</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> LogType.DEFAULT;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 日志名称</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> &#123;<span class="hljs-doctag">@link</span> String &#125;</span><br><span class="hljs-comment">     */</span><br>    String <span class="hljs-title function_">value</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> <span class="hljs-string">&quot;&quot;</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example.springaoplog.log;<br><br><span class="hljs-keyword">import</span> lombok.AllArgsConstructor;<br><span class="hljs-keyword">import</span> lombok.Getter;<br><br><span class="hljs-meta">@Getter</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">enum</span> <span class="hljs-title class_">LogType</span> &#123;<br>    DEFAULT(<span class="hljs-string">&quot;默认&quot;</span>),<br>    SYSTEM(<span class="hljs-string">&quot;系统日志&quot;</span>),<br>    BUSINESS(<span class="hljs-string">&quot;业务日志&quot;</span>),<br>    OPERATE(<span class="hljs-string">&quot;操作日志&quot;</span>),<br>    TEST(<span class="hljs-string">&quot;测试日志&quot;</span>);<br>    <span class="hljs-keyword">final</span> String value;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example.springaoplog.log;<br><br><span class="hljs-keyword">import</span> lombok.Data;<br><span class="hljs-keyword">import</span> lombok.experimental.Accessors;<br><br><span class="hljs-keyword">import</span> java.util.Date;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 系统日志</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> inyxin</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@Accessors</span> ( chain = <span class="hljs-literal">true</span>)<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SysLog</span> &#123;<br>    <span class="hljs-comment">/** 日志ID */</span><br>    <span class="hljs-keyword">private</span> Integer id;<br>    <span class="hljs-comment">/** 日志名字 */</span><br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-comment">/** 日志类型 */</span><br>    <span class="hljs-keyword">private</span> String type;<br>    <span class="hljs-comment">/** 请求路径 */</span><br>    <span class="hljs-keyword">private</span> String url;<br>    <span class="hljs-comment">/** 请求方式 */</span><br>    <span class="hljs-keyword">private</span> String requestMethod;<br>    <span class="hljs-comment">/** 操作者 */</span><br>    <span class="hljs-keyword">private</span> String operator;<br>    <span class="hljs-comment">/** 方法 */</span><br>    <span class="hljs-keyword">private</span> String method;<br>    <span class="hljs-comment">/** 参数 */</span><br>    <span class="hljs-keyword">private</span> String args;<br>    <span class="hljs-comment">/** 远程IP */</span><br>    <span class="hljs-keyword">private</span> String ip;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 操作时间</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> Date operatingTime;<br>    <span class="hljs-comment">/** 异常信息 */</span><br>    <span class="hljs-keyword">private</span> String error;<br>    <span class="hljs-comment">/** 结果 */</span><br>    <span class="hljs-keyword">private</span> String result;<br>    <span class="hljs-comment">/** 方法执行时间 毫秒 */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">long</span> millisecond;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><p>测试:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Copyright 2013-2018 the original author or authors.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);</span><br><span class="hljs-comment"> * you may not use this file except in compliance with the License.</span><br><span class="hljs-comment"> * You may obtain a copy of the License at</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> *      https://www.apache.org/licenses/LICENSE-2.0</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * Unless required by applicable law or agreed to in writing, software</span><br><span class="hljs-comment"> * distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span><br><span class="hljs-comment"> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span><br><span class="hljs-comment"> * See the License for the specific language governing permissions and</span><br><span class="hljs-comment"> * limitations under the License.</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">package</span> org.example.springaoplog.demos.web;<br><br><span class="hljs-keyword">import</span> org.example.springaoplog.log.Log;<br><span class="hljs-keyword">import</span> org.example.springaoplog.log.LogType;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Controller;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.ModelAttribute;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestParam;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> &lt;a href=&quot;mailto:chenxilzx1@gmail.com&quot;&gt;theonefx&lt;/a&gt;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BasicController</span> &#123;<br><br>    <span class="hljs-comment">// http://127.0.0.1:8080/hello?name=lisi</span><br>    <span class="hljs-meta">@RequestMapping</span> ( <span class="hljs-string">&quot;/hello&quot;</span>)<br>    <span class="hljs-meta">@ResponseBody</span><br>    <span class="hljs-meta">@Log</span> (<br>            value = <span class="hljs-string">&quot;Hello&quot;</span>,<br>            type = LogType.TEST<br>    )<br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">hello</span><span class="hljs-params">(</span><br><span class="hljs-params">            <span class="hljs-meta">@RequestParam</span> (</span><br><span class="hljs-params">                    name = <span class="hljs-string">&quot;name&quot;</span>,</span><br><span class="hljs-params">                    defaultValue = <span class="hljs-string">&quot;unknown user&quot;</span></span><br><span class="hljs-params">            )</span> String name) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Hello &quot;</span> + name;<br>    &#125;<br><br>    <span class="hljs-comment">// http://127.0.0.1:8080/errortest</span><br>    <span class="hljs-meta">@RequestMapping</span> ( <span class="hljs-string">&quot;/errortest&quot;</span>)<br>    <span class="hljs-meta">@ResponseBody</span><br>    <span class="hljs-meta">@Log</span> (<br>            value = <span class="hljs-string">&quot;异常测试&quot;</span>,<br>            type = LogType.TEST<br>    )<br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">errortest</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-number">1</span> / <span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;12321&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// http://127.0.0.1:8080/user</span><br>    <span class="hljs-meta">@RequestMapping</span> ( <span class="hljs-string">&quot;/user&quot;</span>)<br>    <span class="hljs-meta">@ResponseBody</span><br>    <span class="hljs-meta">@Log</span> ( value = <span class="hljs-string">&quot;查询用户&quot;</span>)<br>    <span class="hljs-keyword">public</span> User <span class="hljs-title function_">user</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br>        user.setName(<span class="hljs-string">&quot;theonefx&quot;</span>);<br>        user.setAge(<span class="hljs-number">666</span>);<br>        <span class="hljs-keyword">return</span> user;<br>    &#125;<br><br><br>    <span class="hljs-comment">// http://127.0.0.1:8080/save_user?name=newName&amp;age=11</span><br>    <span class="hljs-meta">@RequestMapping</span> ( <span class="hljs-string">&quot;/save_user&quot;</span>)<br>    <span class="hljs-meta">@ResponseBody</span><br>    <span class="hljs-meta">@Log</span> (<br>            value = <span class="hljs-string">&quot;保存用户&quot;</span>,<br>            type = LogType.OPERATE<br>    )<br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">saveUser</span><span class="hljs-params">(User u)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;user will save: name=&quot;</span> + u.getName() + <span class="hljs-string">&quot;, age=&quot;</span> + u.getAge();<br>    &#125;<br><br>    <span class="hljs-comment">// http://127.0.0.1:8080/html</span><br>    <span class="hljs-meta">@RequestMapping</span> ( <span class="hljs-string">&quot;/html&quot;</span>)<br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">html</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;index.html&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@ModelAttribute</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">parseUser</span><span class="hljs-params">(</span><br><span class="hljs-params">            <span class="hljs-meta">@RequestParam</span> (</span><br><span class="hljs-params">                    name = <span class="hljs-string">&quot;name&quot;</span>,</span><br><span class="hljs-params">                    defaultValue = <span class="hljs-string">&quot;unknown user&quot;</span></span><br><span class="hljs-params">            )</span> String name<br>            ,<br>            <span class="hljs-meta">@RequestParam</span> (<br>                    name = <span class="hljs-string">&quot;age&quot;</span>,<br>                    defaultValue = <span class="hljs-string">&quot;12&quot;</span><br>            ) Integer age, User user) &#123;<br>        user.setName(<span class="hljs-string">&quot;zhangsan&quot;</span>);<br>        user.setAge(<span class="hljs-number">18</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>输出:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">SysLog(id=<span class="hljs-literal">null</span>, name=查询用户, type=默认, url=http:<span class="hljs-comment">//127.0.0.1:8080/user, requestMethod=GET, operator=sessionId: 2F552A00DA410EEE3047B4AEE36927B1, method=User org.example.springaoplog.demos.web.BasicController.user(), args=[], ip=127.0.0.1, operatingTime=Fri Jun 14 10:02:11 CST 2024, error=, result=&#123;&quot;name&quot;:&quot;theonefx&quot;,&quot;age&quot;:666&#125;, millisecond=7)</span><br>SysLog(id=<span class="hljs-literal">null</span>, name=查询用户, type=默认, url=http:<span class="hljs-comment">//10.120.1.193:8080/user, requestMethod=GET, operator=sessionId: 39EA319EFCC022E1973A1C9DA452DAE2, method=User org.example.springaoplog.demos.web.BasicController.user(), args=[], ip=10.120.1.193, operatingTime=Fri Jun 14 10:06:46 CST 2024, error=, result=&#123;&quot;name&quot;:&quot;theonefx&quot;,&quot;age&quot;:666&#125;, millisecond=0)</span><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
      <category>Java</category>
      
      <category>Spring</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Aop</tag>
      
      <tag>Log</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MapStruct 对象转换框架</title>
    <link href="/post/3d9faf4a4bcd/"/>
    <url>/post/3d9faf4a4bcd/</url>
    
    <content type="html"><![CDATA[<h1 id="MapStruct-对象转换框架"><a href="#MapStruct-对象转换框架" class="headerlink" title="MapStruct 对象转换框架"></a>MapStruct 对象转换框架</h1><h2 id="导入依赖"><a href="#导入依赖" class="headerlink" title="导入依赖"></a>导入依赖</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml">        <span class="hljs-tag">&lt;<span class="hljs-name">mapstruct.version</span>&gt;</span>1.4.1.Final<span class="hljs-tag">&lt;/<span class="hljs-name">mapstruct.version</span>&gt;</span><br><br><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mapstruct<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mapstruct<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;mapstruct.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mapstruct<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mapstruct-processor<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;mapstruct.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>原理与 <code>lomback</code> 类似&#96; , 都是通过自动生成代码;</p><h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><h3 id="普通使用"><a href="#普通使用" class="headerlink" title="普通使用"></a>普通使用</h3><h5 id="定义映射接口"><a href="#定义映射接口" class="headerlink" title="定义映射接口"></a>定义映射接口</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">GoodsInfoMapper</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 无状态且线程安全</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-type">GoodsInfoMapper</span> <span class="hljs-variable">INSTANCE</span> <span class="hljs-operator">=</span> Mappers.getMapper(GoodsInfoMapper.class);<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">GoodsInfoPO</span> <span class="hljs-variable">goodsInfoPO</span> <span class="hljs-operator">=</span> GoodsInfoMapper.INSTANCE.goodsInfoDtoToPo(goodsInfoDTO);<br></code></pre></td></tr></table></figure><h3 id="在-Spring-中使用"><a href="#在-Spring-中使用" class="headerlink" title="在 Spring 中使用"></a>在 Spring 中使用</h3><h5 id="定义映射接口-1"><a href="#定义映射接口-1" class="headerlink" title="定义映射接口"></a>定义映射接口</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Mapper(componentModel = &quot;spring&quot;)</span> <span class="hljs-comment">// 设置为 spring</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">GoodsInfoMapper</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 无状态且线程安全</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-type">GoodsInfoMapper</span> <span class="hljs-variable">INSTANCE</span> <span class="hljs-operator">=</span> Mappers.getMapper(GoodsInfoMapper.class);<br>&#125;<br></code></pre></td></tr></table></figure><p>有了 <code>@Mapper(componentModel = &quot;spring)</code> 这个后.生成的实现类上会自动加上  <code>@Component</code> 注解</p><h4 id="Mapping"><a href="#Mapping" class="headerlink" title="@Mapping"></a>@Mapping</h4><p><code>@Mapping</code> 注解是 MapStruct 框架中的一个关键注解，用于定义两个 bean 之间的字段映射关系。它可以应用在 Mapper 接口的方法上，指定源（source）字段到目标（target）字段的映射关系。</p><h3 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Mapper</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">CarMapper</span> &#123;<br><br>    <span class="hljs-meta">@Mapping(source = &quot;make&quot;, target = &quot;manufacturer&quot;)</span><br>    CarDto <span class="hljs-title function_">carToCarDto</span><span class="hljs-params">(Car car)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>在上述示例中，<code>@Mapping(source = &quot;make&quot;, target = &quot;manufacturer&quot;)</code> 表示将 <code>Car</code> 对象的 <code>make</code> 字段映射到 <code>CarDto</code> 对象的 <code>manufacturer</code> 字段上。</p><h3 id="常见属性"><a href="#常见属性" class="headerlink" title="常见属性"></a>常见属性</h3><ul><li><p><strong>source</strong>：源对象的字段名。</p></li><li><p><strong>target</strong>：目标对象的字段名。</p></li><li><p><strong>qualifiedByName</strong>：通过一个命名转换器来转换字段值。</p></li><li><p><strong>defaultValue</strong>：指定目标字段的默认值。</p></li><li><p><strong>ignore</strong>：忽略某个字段，不进行映射。</p></li><li><p><strong>expression</strong>：使用 SpEL 表达式定义映射规则。</p><p><code>This attribute can not be used together with source(), defaultValue(), defaultExpression() or expression().</code></p></li></ul><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><ol><li><strong>简单映射</strong></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Mapping(source = &quot;name&quot;, target = &quot;fullName&quot;)</span><br>PersonDto <span class="hljs-title function_">personToPersonDto</span><span class="hljs-params">(Person person)</span>;<br></code></pre></td></tr></table></figure><p>这个示例将 <code>Person</code> 对象的 <code>name</code> 字段映射到 <code>PersonDto</code> 对象的 <code>fullName</code> 字段。</p><ol><li><strong>使用转换器</strong></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs jaVA"><span class="hljs-meta">@Mapping(source = &quot;birthDate&quot;, target = &quot;birthDate&quot;, dateFormat = &quot;dd-MM-yyyy&quot;)</span><br>PersonDto <span class="hljs-title function_">personToPersonDto</span><span class="hljs-params">(Person person)</span>;<br></code></pre></td></tr></table></figure><p>这个示例中，<code>dateFormat</code> 属性指定了日期格式，MapStruct 会自动将 <code>Person</code> 对象的 <code>birthDate</code> 字段按照指定的格式转换为 <code>PersonDto</code> 对象的 <code>birthDate</code> 字段。</p><ol><li><strong>忽略字段</strong></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-meta">@Mapping(target = &quot;id&quot;, ignore = true)</span><br>PersonDto <span class="hljs-title function_">personToPersonDto</span><span class="hljs-params">(Person person)</span>;<br></code></pre></td></tr></table></figure><p>这个示例中，<code>ignore = true</code> 表示忽略 <code>PersonDto</code> 对象的 <code>id</code> 字段，不进行映射。</p><h3 id="高级用法"><a href="#高级用法" class="headerlink" title="高级用法"></a>高级用法</h3><ul><li><strong>多字段映射</strong>：可以同时映射多个字段，通过多个 <code>@Mapping</code> 注解实现。</li><li><strong>复杂类型映射</strong>：支持复杂对象类型，如集合、嵌套对象等。</li><li><strong>条件映射</strong>：通过 SpEL 表达式在 <code>@Mapping</code> 的 <code>expression</code> 属性中定义条件，根据条件动态进行映射。</li></ul><p><code>@Mapping</code> 注解使得 MapStruct 在生成映射代码时具有灵活性和可配置性，能够应对多种复杂的映射需求。</p>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MapStruct</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ElasticSearch</title>
    <link href="/post/352024ded5b8/"/>
    <url>/post/352024ded5b8/</url>
    
    <content type="html"><![CDATA[<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="docker-安装"><a href="#docker-安装" class="headerlink" title="docker 安装"></a>docker 安装</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker run -d \<br>        --name es \<br>        -e <span class="hljs-string">&quot;ES_JAVA_OPTS=-Xms512m -Xmx512m&quot;</span> \<br>        -e <span class="hljs-string">&quot;discovery.type=single-node&quot;</span> \<br>        -v es-data:/usr/share/elasticsearch/data \<br>        -v es-plugins:/usr/share/elasticsearch/plugins \<br>        -v es-logs:/usr/share/elasticsearch/logs \<br>        --privileged \ --network es-net \<br>        -p 9200:9200 \<br>        -p 9300:9300 \<br>elasticsearch:7.12.1<br></code></pre></td></tr></table></figure><h3 id="docker-compose-yml"><a href="#docker-compose-yml" class="headerlink" title="docker-compose.yml"></a>docker-compose.yml</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">services:</span><br>  <span class="hljs-attr">es:</span><br>    <span class="hljs-attr">container_name:</span> <span class="hljs-string">es</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">elasticsearch:7.12.1</span><br>    <span class="hljs-attr">environment:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;discovery.type=single-node&quot;</span> <span class="hljs-comment"># 非集群模块</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;ES_JAVA_OPTS=-Xms512m -Xmx512m&quot;</span><br>    <span class="hljs-attr">ports:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;9200:9200&quot;</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;9300:9300&quot;</span><br>    <span class="hljs-attr">volumes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;es-data:/usr/share/elasticsearch/data&quot;</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;es-plugins:/usr/share/elasticsearch/plugins&quot;</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;es-logs:/usr/share/elasticsearch/logs&quot;</span><br>    <span class="hljs-attr">networks:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">1panel-network</span><br><span class="hljs-attr">networks:</span><br>  <span class="hljs-attr">1panel-network:</span><br>    <span class="hljs-attr">external:</span> <span class="hljs-literal">true</span><br><span class="hljs-attr">volumes:</span><br>  <span class="hljs-attr">es-logs:</span><br>  <span class="hljs-attr">es-data:</span><br>  <span class="hljs-attr">es-plugins:</span><br></code></pre></td></tr></table></figure><h3 id="ELK-compose"><a href="#ELK-compose" class="headerlink" title="ELK compose"></a>ELK compose</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">networks:</span><br>  <span class="hljs-attr">1panel-network:</span><br>    <span class="hljs-attr">external:</span> <span class="hljs-literal">true</span><br><span class="hljs-attr">volumes:</span><br>  <span class="hljs-attr">es-logs:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">es-log</span><br>  <span class="hljs-attr">es-data:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">es-data</span><br>  <span class="hljs-attr">es-plugins:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">es-plugins</span><br><span class="hljs-attr">services:</span><br>  <span class="hljs-attr">elasticsearch:</span><br>    <span class="hljs-attr">container_name:</span> <span class="hljs-string">elk_elasticsearch</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">elasticsearch:7.12.1</span><br>    <span class="hljs-attr">environment:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;discovery.type=single-node&quot;</span> <span class="hljs-comment"># 非集群模块</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;ES_JAVA_OPTS=-Xms512m -Xmx512m&quot;</span><br>    <span class="hljs-attr">ports:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;9200:9200&quot;</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;9300:9300&quot;</span><br>    <span class="hljs-attr">volumes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;es-data:/usr/share/elasticsearch/data&quot;</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;es-plugins:/usr/share/elasticsearch/plugins&quot;</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;es-logs:/usr/share/elasticsearch/logs&quot;</span><br>    <span class="hljs-attr">networks:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">1panel-network</span><br>  <span class="hljs-attr">kibana:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">kibana:7.12.1</span><br>    <span class="hljs-attr">container_name:</span> <span class="hljs-string">elk_kibana</span><br>    <span class="hljs-attr">restart:</span> <span class="hljs-string">always</span><br>    <span class="hljs-attr">depends_on:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">elasticsearch</span> <span class="hljs-comment">#kibana在elasticsearch启动之后再启动</span><br>    <span class="hljs-attr">environment:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">ELASTICSEARCH_URL=http://elasticsearch:9200</span> <span class="hljs-comment">#设置访问elasticsearch的地址</span><br>    <span class="hljs-attr">ports:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-number">5601</span><span class="hljs-string">:5601</span><br>    <span class="hljs-attr">networks:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">1panel-network</span><br>  <span class="hljs-attr">logstash:</span><br>      <span class="hljs-attr">image:</span> <span class="hljs-string">logstash:7.7.0</span><br>      <span class="hljs-attr">container_name:</span> <span class="hljs-string">elk_logstash</span><br>      <span class="hljs-attr">restart:</span> <span class="hljs-string">always</span><br>      <span class="hljs-attr">volumes:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">/opt/1panel/docker/compose/elasticsearch/logstash-springboot.conf:/usr/share/logstash/pipeline/logstash.conf</span> <span class="hljs-comment">#挂载logstash的配置文件</span><br>      <span class="hljs-attr">depends_on:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">elasticsearch</span> <span class="hljs-comment">#kibana在elasticsearch启动之后再启动</span><br>      <span class="hljs-attr">links:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">elasticsearch:es</span> <span class="hljs-comment">#可以用es这个域名访问elasticsearch服务</span><br>      <span class="hljs-attr">ports:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-number">4560</span><span class="hljs-string">:4560</span><br>      <span class="hljs-attr">networks:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">1panel-network</span><br></code></pre></td></tr></table></figure><h3 id="部署地址"><a href="#部署地址" class="headerlink" title="部署地址:"></a>部署地址:</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">ES : http:<span class="hljs-regexp">//</span><span class="hljs-number">172.19</span>.<span class="hljs-number">143.22</span>:<span class="hljs-number">9200</span>/<br>Kibanna http:<span class="hljs-regexp">//</span><span class="hljs-number">172.19</span>.<span class="hljs-number">143.22</span>:<span class="hljs-number">5601</span><span class="hljs-regexp">/app/</span>dev_tools<span class="hljs-comment">#/console</span><br></code></pre></td></tr></table></figure><p><a href="http://172.19.143.22:9200/">ES</a></p><p><a href="http://172.19.143.22:5601/app/dev_tools#/console">KibanaDev Tools - Elastic </a></p><h2 id="IK分词器插件安装"><a href="#IK分词器插件安装" class="headerlink" title="IK分词器插件安装"></a>IK分词器插件安装</h2><h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><p><a href="https://github.com/infinilabs/analysis-ik/tags?after=v7.12.1">IK分词器插件Tags · infinilabs&#x2F;analysis-ik (github.com)</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">将对于版本的插件 如 <span class="hljs-number">7.12</span><span class="hljs-number">.1</span> 版本的ik <span class="hljs-built_in">zip</span>解压 放在 es 的plugins目录下<br></code></pre></td></tr></table></figure><h3 id="分词测试"><a href="#分词测试" class="headerlink" title="分词测试"></a>分词测试</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs json">POST /_analyze<br><span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;analyzer&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;ik_smart&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;text&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;这个到秦始皇就是非好像是被那种高层吧高层想消灭他，然后就用那个他的软肋，就因为它已经变成掌控了掌控他有个软肋是他婆娘。复生者，对，但是掌控可以影响啊在宾馆里面是吧？嗯，对，但是。会影响他的那个秦始皇然后反正之后就相当于是自爆我靠晕了自己，把自己给灭了。用腿狼。不用推导与他人。自己是秦始皇，然后他本来是是天外的那种修行者然后到地球来寻找突破之法然后地球灵气不够，他传不回去了，然后反正秦始皇那些秦始皇就是它几千年后他被人挖了起来，走了。&quot;</span><br><span class="hljs-punctuation">&#125;</span><br><br></code></pre></td></tr></table></figure><h2 id="索引库"><a href="#索引库" class="headerlink" title="索引库"></a>索引库</h2><h3 id="Mapping"><a href="#Mapping" class="headerlink" title="Mapping"></a>Mapping</h3><ul><li>type <ul><li>字符串 : <code>text</code>(可分词)   <code>keyword</code>(精确值 , 不可分词, 如IP, 地址, 品牌)</li><li>数值 : <code>long integer short byte  double float number</code></li><li>布尔 : <code>boolean</code></li><li>日期 : <code>date</code></li><li>对象 : <code>object</code></li></ul></li><li>index : 是否创建索引 , 默认值 <code>true</code></li><li>analyzer : 使用哪种分词器</li><li>properties : 该字段的子字段</li></ul><h3 id="索引库-的CRUD"><a href="#索引库-的CRUD" class="headerlink" title="索引库 的CRUD"></a>索引库 的CRUD</h3><ul><li><p>创建索引库</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs json">PUT /索引库<br><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;mappings&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;field1&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;text&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;analyzer&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;ik_smart&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs json">PUT /inyxin<br><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;mappings&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;properties&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;keyword&quot;</span><br>            <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;age&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;integer&quot;</span><br>            <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;address&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;properties&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                    <span class="hljs-attr">&quot;city&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                        <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;text&quot;</span><br>                    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>                    <span class="hljs-attr">&quot;details&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                        <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;text&quot;</span><br>                    <span class="hljs-punctuation">&#125;</span><br>                <span class="hljs-punctuation">&#125;</span><br>            <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;description&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;text&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;analyzer&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;ik_smart&quot;</span><br>            <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br><br></code></pre></td></tr></table></figure></li><li><p>查询索引库</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">GET</span> /索引库<br></code></pre></td></tr></table></figure></li><li><p>修改索引库 <code>只支持新增字段 </code> </p><p>如果字段已经存在 , 则会报错</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">PUT <span class="hljs-regexp">/索引库/</span>_mapping<br></code></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs json">PUT /inyxin/_mapping<br><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;properties&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;username&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;keyword&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;index&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;true&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure></li><li><p>删除索引库</p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gauss"><span class="hljs-keyword">DELETE</span> /索引库<br></code></pre></td></tr></table></figure></li></ul><h2 id="文档的CRUD"><a href="#文档的CRUD" class="headerlink" title="文档的CRUD"></a>文档的CRUD</h2><ul><li><p>新增</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk">PUT <span class="hljs-regexp">/索引库/</span>_doc/文档ID<br>&#123;<br>文档数据<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs json">PUT /inyxin/_doc/<span class="hljs-number">1</span><br><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;inyxin&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;username&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;inyxin&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;age&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;20&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;description&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;确实是描述&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;address&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;city&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;四川·达州&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;details&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;四川文理学院·南坝校区&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>添加成功后响应</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;_index&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;inyxin&quot;</span><span class="hljs-punctuation">,</span>  索引库名<br>  <span class="hljs-attr">&quot;_type&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;_doc&quot;</span><span class="hljs-punctuation">,</span>文档名<br>  <span class="hljs-attr">&quot;_id&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;1&quot;</span><span class="hljs-punctuation">,</span>文档ID<br>  <span class="hljs-attr">&quot;_version&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;result&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;created&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;_shards&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;total&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">2</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;successful&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;failed&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;_seq_no&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;_primary_term&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><br><span class="hljs-punctuation">&#125;</span><br><br></code></pre></td></tr></table></figure></li><li><p>读取</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">GET</span> /索引库/_doc/文档ID<br></code></pre></td></tr></table></figure><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">GET</span> /inyxin/_doc/1<br></code></pre></td></tr></table></figure><p>查询结果</p><p><code>_source</code> : 原始文档</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;_index&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;inyxin&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;_type&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;_doc&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;_id&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;1&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;_version&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;_seq_no&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;_primary_term&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;found&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;_source&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;name&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;inyxin&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;username&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;inyxin&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;age&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;20&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;description&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;确实是描述&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;address&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;city&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;四川·达州&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;details&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;四川文理学院·南坝校区&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure></li><li><p>修改</p><ul><li><p><code> 全量修改 (覆盖修改)</code> </p><p>若文档ID已存在 , 则会先删除旧的文档, 在进行新增 ,</p><p>否则 就是添加一个新的文档</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">PUT <span class="hljs-regexp">/索引库/</span>_doc/文档ID  同新增<br>&#123;&#125;<br></code></pre></td></tr></table></figure></li><li><p><code>增量修改 (局部修改)</code></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs json">UPDATE  /索引库/_update/文档ID<br><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;doc&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;YINIXN&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;age&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">21</span><br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure></li></ul></li><li><p>删除</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-keyword">DELETE</span> <span class="hljs-regexp">/索引库/</span>_doc/<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
      <category>中间件</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ElasticSearch</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux启动脚本</title>
    <link href="/post/fe20cd40b669/"/>
    <url>/post/fe20cd40b669/</url>
    
    <content type="html"><![CDATA[<h2 id="实现用户登录后执行特定启动脚本"><a href="#实现用户登录后执行特定启动脚本" class="headerlink" title="实现用户登录后执行特定启动脚本"></a>实现用户登录后执行特定启动脚本</h2><h3 id="1-使用-bash-profile-或-bashrc"><a href="#1-使用-bash-profile-或-bashrc" class="headerlink" title="1. 使用 .bash_profile 或 .bashrc"></a>1. 使用 <code>.bash_profile</code> 或 <code>.bashrc</code></h3><p>如果使用的是 Bash shell，可以将启动脚本添加到用户主目录下的 <code>.bash_profile</code> 或 <code>.bashrc</code> 文件中。</p><h4 id="bash-profile"><a href="#bash-profile" class="headerlink" title=".bash_profile"></a>.bash_profile</h4><p><code>.bash_profile</code> 在用户登录时运行一次。适用于登录 shell。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">bashCopy Code# 编辑用户主目录下的 .bash_profile 文件<br>nano ~/.bash_profile<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">在文件末尾添加要执行的脚本</span><br>/path/to/your/script.sh<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">保存并退出</span><br></code></pre></td></tr></table></figure><h4 id="bashrc"><a href="#bashrc" class="headerlink" title=".bashrc"></a>.bashrc</h4><p><code>.bashrc</code> 在每次打开一个新的 shell 时运行。适用于非登录 shell。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">bashCopy Code# 编辑用户主目录下的 .bashrc 文件<br>nano ~/.bashrc<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">在文件末尾添加要执行的脚本</span><br>/path/to/your/script.sh<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">保存并退出</span><br></code></pre></td></tr></table></figure><h3 id="2-使用-profile"><a href="#2-使用-profile" class="headerlink" title="2. 使用 .profile"></a>2. 使用 <code>.profile</code></h3><p>某些 Linux 发行版和 shell（如 Dash）使用 <code>.profile</code> 文件。该文件在用户登录时运行。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sh">bashCopy Code<span class="hljs-comment"># 编辑用户主目录下的 .profile 文件</span><br>nano ~/.profile<br><br><span class="hljs-comment"># 在文件末尾添加要执行的脚本</span><br>/path/to/your/script.sh<br><br><span class="hljs-comment"># 保存并退出</span><br></code></pre></td></tr></table></figure><h3 id="3-使用-etc-profile-和-etc-profile-d"><a href="#3-使用-etc-profile-和-etc-profile-d" class="headerlink" title="3. 使用 /etc/profile 和 /etc/profile.d"></a>3. 使用 <code>/etc/profile</code> 和 <code>/etc/profile.d</code></h3><p>对于全系统范围内的配置，可以编辑 <code>/etc/profile</code> 文件，或在 <code>/etc/profile.d</code> 目录下创建一个新的脚本。</p><h4 id="etc-profile"><a href="#etc-profile" class="headerlink" title="&#x2F;etc&#x2F;profile"></a>&#x2F;etc&#x2F;profile</h4><p>在所有用户登录时运行。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sh">bashCopy Code<span class="hljs-comment"># 编辑 /etc/profile 文件（需要root权限）</span><br>sudo nano /etc/profile<br><br><span class="hljs-comment"># 在文件末尾添加要执行的脚本</span><br>/path/to/your/script.sh<br><br><span class="hljs-comment"># 保存并退出</span><br></code></pre></td></tr></table></figure><h4 id="etc-profile-d"><a href="#etc-profile-d" class="headerlink" title="&#x2F;etc&#x2F;profile.d"></a>&#x2F;etc&#x2F;profile.d</h4><p>在 <code>/etc/profile.d</code> 目录下创建一个新的脚本文件（必须以 <code>.sh</code> 结尾）。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sh">bashCopy Code<span class="hljs-comment"># 创建一个新的脚本文件（需要root权限）</span><br>sudo nano /etc/profile.d/myscript.sh<br><br><span class="hljs-comment"># 添加要执行的内容</span><br>/path/to/your/script.sh<br><br><span class="hljs-comment"># 保存并退出</span><br></code></pre></td></tr></table></figure><h3 id="4-使用-xinitrc-或-xsession"><a href="#4-使用-xinitrc-或-xsession" class="headerlink" title="4. 使用 .xinitrc 或 .xsession"></a>4. 使用 <code>.xinitrc</code> 或 <code>.xsession</code></h3><p>如果使用图形界面并希望在 X 会话启动时运行脚本，可以使用 <code>.xinitrc</code> 或 <code>.xsession</code> 文件。</p><h4 id="xinitrc"><a href="#xinitrc" class="headerlink" title=".xinitrc"></a>.xinitrc</h4><p>适用于使用 <code>startx</code> 启动 X 会话的用户。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sh">bashCopy Code<span class="hljs-comment"># 编辑用户主目录下的 .xinitrc 文件</span><br>nano ~/.xinitrc<br><br><span class="hljs-comment"># 在文件末尾添加要执行的脚本</span><br>/path/to/your/script.sh<br><br><span class="hljs-comment"># 保存并退出</span><br></code></pre></td></tr></table></figure><h4 id="xsession"><a href="#xsession" class="headerlink" title=".xsession"></a>.xsession</h4><p>适用于使用显示管理器（如 GDM、LightDM）启动 X 会话的用户。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sh">bashCopy Code<span class="hljs-comment"># 编辑用户主目录下的 .xsession 文件</span><br>nano ~/.xsession<br><br><span class="hljs-comment"># 在文件末尾添加要执行的脚本</span><br>/path/to/your/script.sh<br><br><span class="hljs-comment"># 保存并退出</span><br></code></pre></td></tr></table></figure><p>选择合适的方法取决于具体需求和系统环境。通常情况下，对于单个用户和命令行环境，修改 <code>.bash_profile</code> 或 <code>.bashrc</code> 是最常用的方法。</p>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>default</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Docker</title>
    <link href="/post/8a8dcb035543/"/>
    <url>/post/8a8dcb035543/</url>
    
    <content type="html"><![CDATA[<h2 id="镜像"><a href="#镜像" class="headerlink" title="镜像"></a>镜像</h2><ul><li><p><code>docker version</code> 显示 docekr 的详细信息</p></li><li><p><code>docker info</code> 显示 docker 的系统信息</p></li><li><p><code>docker --help</code> docker 的命令帮助手册</p></li><li><p><code>docker search &#123;关键字&#125;</code> 搜索镜像</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker search nginx <span class="hljs-comment">#搜索nginx镜像</span><br>docker search openjdk <span class="hljs-comment">#搜索openjdk镜像</span><br></code></pre></td></tr></table></figure></li><li><p><code>docker pull &#123;镜像名[标签]&#125;</code> 拉取镜像</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker pull nginx <span class="hljs-comment">#拉取 nginx镜像</span><br>docker pull openjdk:latest <span class="hljs-comment">#拉取 openjdk镜像</span><br></code></pre></td></tr></table></figure></li><li><p><code>docker images</code> 查看已经下载的镜像</p></li><li><p><code>docker rmi &#123;镜像名或镜像ID&#125;</code> 删除镜像</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker rmi nginx <span class="hljs-comment"># 删除镜像名为nginx的镜像</span><br>docker rmi e235nd <span class="hljs-comment"># 根据镜像ID删除</span><br></code></pre></td></tr></table></figure></li><li><p><code>docker tag &#123;原来的镜像名[:标签]&#125; &#123;新的镜像名[:标签]&#125;</code> 复制镜像并修改名称</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker tag SOURCE_IMAGE[:TAG] TARGET_IMAGE[:TAG]<br><span class="hljs-comment">#SOURCE_IMAGE 是要标记的现有镜像的名称或 ID。</span><br><span class="hljs-comment">#TARGET_IMAGE 是为现有镜像指定的新标签的名称。</span><br><span class="hljs-comment">#TAG 是可选的标签，用于指定版本或其他特定标识符。</span><br>例如:<br>docker tag nginx inyxin/nginx:beta  <br></code></pre></td></tr></table></figure></li><li><p><code>docker load -i &#123;镜像的tar&#125;</code>  导入镜像</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker load -i /root/docker-centos-httpd.tar<br></code></pre></td></tr></table></figure></li><li><p><code>docker save -o &#123;镜像的tar&#125; &#123;镜像名&#125;</code>  导出镜像</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker save -o xxx.tar 镜像名<br>docker save -o my_image.tar my_image <br></code></pre></td></tr></table></figure></li></ul><h2 id="容器"><a href="#容器" class="headerlink" title="容器"></a>容器</h2><ul><li><p><code>docker run [参数] &#123;镜像&#125; [COMMAND] [ARG...]</code> <strong>启动容器 (重点)</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#语法</span><br>docker run [OPTIONS] IMAGE [COMMAND] [ARG...]<br><span class="hljs-comment">#[OPTIONS]</span><br>-d, --detach：在后台运行容器。<br>--name：为容器指定一个名称。<br>-p, --publish：将容器端口映射到宿主机端口。<br>-v, --volume：挂载宿主机目录到容器内部。<br>-e, --<span class="hljs-built_in">env</span>：设置环境变量。<br>--network：连接容器到指定的网络。<br>--restart：在容器退出时指定重启策略。<br>--<span class="hljs-built_in">rm</span>：容器退出时自动删除。<br>-it：交互式操作，通常与 -i（标准输入）和 -t（终端）一起使用。<br><span class="hljs-comment"># [COMMAND] [ARG...]</span><br><span class="hljs-comment">#可以覆盖默认的命令和参数。例如，你可以执行以下命令来覆盖默认的命令：</span><br>docker run my_image <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Hello, Docker!&quot;</span><br><span class="hljs-comment">#在这个例子中，echo &quot;Hello, Docker!&quot; 将覆盖镜像中定义的默认命令，容器将输出 Hello, Docker! 而不是 Hello, World!。</span><br></code></pre></td></tr></table></figure></li><li><p><code>docker build [OPTIONS]</code> 创建镜像</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker build [OPTIONS]<br><span class="hljs-comment">#[OPTIONS]</span><br>-f : 指定dockerfile文件路径 , 默认就是当前目录的 Dockerfile 文件<br>-t : 构建后的镜像名以及标签<br><span class="hljs-comment">#[EXAMPLE]</span><br>docker build -t inyxin/openjdk:1.8 <br></code></pre></td></tr></table></figure></li><li><p><code>docker logs &#123;容器ID&#125;</code>  查看容器日志</p></li><li><p><code>docker rename &#123;旧名字&#125; &#123;新名字&#125;</code> 容器重命名</p></li><li><p><code>docker ps [-a]</code>  查看正在运行的容器 [ -a 查看全部容器 ] </p></li><li><p><code>docekr kill &#123;容器名 或 容器ID&#125;</code> 杀死一个容器</p></li><li><p><code>docker rm &#123;容器名 或 容器ID&#125;</code> 删除容器</p></li></ul><p>[^{容器名 或 容器 ID}]: 以下简称 {容器ID}</p><ul><li><p><code>docker history &#123;容器ID&#125;</code>  查看 docker 镜像的变更历史</p></li><li><p><code>docker start &#123;容器ID&#125;</code> 启动一个容器</p></li><li><p><code>docker restart &#123;容器ID&#125;</code>  重启容器</p></li><li><p><code>docker stop</code> 停止容器</p></li><li><p><code>doceker image inspect &#123;容器ID&#125;</code>  查看容器内源数据</p></li><li><p><code>docker cp &#123;容器ID&#125;:路径 主机路径</code> 从容器内拷贝文件到主机</p></li><li><p><code>docker exec -it &#123;容器名ID&#125; /bin/bash</code> 进入容器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker <span class="hljs-built_in">exec</span> -it 1Panel-minio-UuPy /bin/bash<br></code></pre></td></tr></table></figure></li><li><p><code>docker commit -m=&quot;提交的描述信息&quot;  -a=&quot;作者&quot;  &#123;容器id&#125;  &#123;目标镜像名:[TAG]&#125;</code></p></li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker run \<br>--name inyxin-minio \ <br>-v <span class="hljs-string">&quot;/opt/1panel/apps/minio/minio/data:/data&quot;</span> \ <br>-v <span class="hljs-string">&quot;/opt/1panel/apps/minio/minio/certs:/root/.minio/certs&quot;</span> \<br>-p <span class="hljs-string">&quot;9001:9001&quot;</span> \ <br>-p <span class="hljs-string">&quot;9000:9000&quot;</span> \<br>--restart always \ <br>-e MINIO_ROOT_PASSWORD=<span class="hljs-string">&quot;1423716216@qq.com&quot;</span> \ <br>-e MINIO_ROOT_USER=<span class="hljs-string">&quot;1423716216@qq.com&quot;</span> \<br>-e MINIO_SERVER_URL=<span class="hljs-string">&quot;http://127.0.0.1:9000&quot;</span> \<br>-e MINIO_BROWSER=on \<br>-e MINIO_BROWSER_LOGIN_ANIMATION=on \<br>-e MINIO_BROWSER_REDIRECT_URL=<span class="hljs-string">&quot;http://127.0.0.1:9001&quot;</span> \<br>-e MINIO_BROWSER_SESSION_DURATION=12h \<br>-e PATH=/opt/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin \<br>-e container=oci \<br>-e MINIO_ACCESS_KEY_FILE=access_key \<br>-e MINIO_SECRET_KEY_FILE=secret_key \<br>-e MINIO_ROOT_USER_FILE=access_key \<br>-e MINIO_ROOT_PASSWORD_FILE=secret_key \<br>-e MINIO_KMS_SECRET_KEY_FILE=kms_master_key \<br>-e MINIO_UPDATE_MINISIGN_PUBKEY=RWTx5Zr1tiHQLwG9keckT0c45M3AGeHD6IvimQHpyRywVWGbP1aVSGav \<br>-e MINIO_CONFIG_ENV_FILE=config.env \<br>minio/minio <br><br></code></pre></td></tr></table></figure><h2 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 指定基础镜像，例如 node:14。这是 Dockerfile 的第一条指令，定义了新镜像是基于哪个已有镜像创建的。</span><br>FROM &lt;base_image&gt;<br><br><span class="hljs-comment"># 设置作者信息 (可选)</span><br>LABEL maintainer=<span class="hljs-string">&quot;&lt;your_name&gt; &lt;your_email&gt;&quot;</span><br><br><span class="hljs-comment"># 设置工作目录。所有后续的 COPY, ADD, RUN 等指令都将在这个目录下执行。例如 WORKDIR /usr/src/app</span><br>WORKDIR /usr/src/app<br><br><span class="hljs-comment"># 复制文件到镜像中</span><br>COPY &lt;<span class="hljs-built_in">source</span>&gt; &lt;destination&gt;<br><br><span class="hljs-comment"># 下载并安装依赖包</span><br>RUN &lt;<span class="hljs-built_in">command</span>&gt;<br><br><span class="hljs-comment"># 设置环境变量 (可选)</span><br>ENV &lt;key&gt;=&lt;value&gt;<br><br><span class="hljs-comment"># 暴露端口 (可选)</span><br>EXPOSE &lt;port&gt;<br><br><span class="hljs-comment"># 运行容器启动时的命令 ,与 CMD 类似，但 ENTRYPOINT 不会被 docker run 提供的参数覆盖。例如：</span><br>ENTRYPOINT [<span class="hljs-string">&quot;&lt;command&gt;&quot;</span>]<br><br><span class="hljs-comment"># 指定默认参数 (可选) 指定容器启动时要执行的命令。例如，CMD [&quot;npm&quot;, &quot;start&quot;]。注意，CMD 只会有一个生效，如果存在多个 CMD 指令，只有最后一个会被执行。</span><br>CMD [<span class="hljs-string">&quot;&lt;args&gt;&quot;</span>]<br></code></pre></td></tr></table></figure><p>通过 &#96;docker build -t {镜像: 标签} 即可构建</p><h2 id=""><a href="#" class="headerlink" title=""></a></h2><h2 id="存储卷"><a href="#存储卷" class="headerlink" title="存储卷"></a>存储卷</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">Usage:</span>  <span class="hljs-string">docker</span> <span class="hljs-string">volume</span> <span class="hljs-string">COMMAND</span><br><br><span class="hljs-string">Manage</span> <span class="hljs-string">volumes</span><br><br><span class="hljs-attr">Commands:</span><br>  <span class="hljs-string">create</span>      <span class="hljs-string">Create</span> <span class="hljs-string">a</span> <span class="hljs-string">volume</span><br>  <span class="hljs-string">inspect</span>     <span class="hljs-string">Display</span> <span class="hljs-string">detailed</span> <span class="hljs-string">information</span> <span class="hljs-string">on</span> <span class="hljs-string">one</span> <span class="hljs-string">or</span> <span class="hljs-string">more</span> <span class="hljs-string">volumes</span><br>  <span class="hljs-string">ls</span>          <span class="hljs-string">List</span> <span class="hljs-string">volumes</span><br>  <span class="hljs-string">prune</span>       <span class="hljs-string">Remove</span> <span class="hljs-string">unused</span> <span class="hljs-string">local</span> <span class="hljs-string">volumes</span><br>  <span class="hljs-string">rm</span>          <span class="hljs-string">Remove</span> <span class="hljs-string">one</span> <span class="hljs-string">or</span> <span class="hljs-string">more</span> <span class="hljs-string">volumes</span><br></code></pre></td></tr></table></figure><h2 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">Usage:</span>  <span class="hljs-string">docker</span> <span class="hljs-string">network</span> <span class="hljs-string">COMMAND</span><br><br><span class="hljs-string">Manage</span> <span class="hljs-string">networks</span><br><br><span class="hljs-attr">Commands:</span><br>  <span class="hljs-string">connect</span>     <span class="hljs-string">Connect</span> <span class="hljs-string">a</span> <span class="hljs-string">container</span> <span class="hljs-string">to</span> <span class="hljs-string">a</span> <span class="hljs-string">network</span><br>  <span class="hljs-string">create</span>      <span class="hljs-string">Create</span> <span class="hljs-string">a</span> <span class="hljs-string">network</span><br>  <span class="hljs-string">disconnect</span>  <span class="hljs-string">Disconnect</span> <span class="hljs-string">a</span> <span class="hljs-string">container</span> <span class="hljs-string">from</span> <span class="hljs-string">a</span> <span class="hljs-string">network</span><br>  <span class="hljs-string">inspect</span>     <span class="hljs-string">Display</span> <span class="hljs-string">detailed</span> <span class="hljs-string">information</span> <span class="hljs-string">on</span> <span class="hljs-string">one</span> <span class="hljs-string">or</span> <span class="hljs-string">more</span> <span class="hljs-string">networks</span><br>  <span class="hljs-string">ls</span>          <span class="hljs-string">List</span> <span class="hljs-string">networks</span><br>  <span class="hljs-string">prune</span>       <span class="hljs-string">Remove</span> <span class="hljs-string">all</span> <span class="hljs-string">unused</span> <span class="hljs-string">networks</span><br>  <span class="hljs-string">rm</span>          <span class="hljs-string">Remove</span> <span class="hljs-string">one</span> <span class="hljs-string">or</span> <span class="hljs-string">more</span> <span class="hljs-string">networks</span><br></code></pre></td></tr></table></figure><h2 id="DockerCompose"><a href="#DockerCompose" class="headerlink" title="DockerCompose"></a>DockerCompose</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">Usage:</span>  <span class="hljs-string">docker</span> <span class="hljs-string">compose</span> [<span class="hljs-string">OPTIONS</span>] <span class="hljs-string">COMMAND</span><br><br><span class="hljs-string">Define</span> <span class="hljs-string">and</span> <span class="hljs-string">run</span> <span class="hljs-string">multi-container</span> <span class="hljs-string">applications</span> <span class="hljs-string">with</span> <span class="hljs-string">Docker</span><br><br><span class="hljs-attr">Options:</span><br>      <span class="hljs-string">--all-resources</span>              <span class="hljs-string">Include</span> <span class="hljs-string">all</span> <span class="hljs-string">resources,</span> <span class="hljs-string">even</span> <span class="hljs-string">those</span> <span class="hljs-string">not</span> <span class="hljs-string">used</span> <span class="hljs-string">by</span> <span class="hljs-string">services</span><br>      <span class="hljs-string">--ansi</span> <span class="hljs-string">string</span>                <span class="hljs-string">Control</span> <span class="hljs-string">when</span> <span class="hljs-string">to</span> <span class="hljs-string">print</span> <span class="hljs-string">ANSI</span> <span class="hljs-string">control</span> <span class="hljs-string">characters</span> <span class="hljs-string">(&quot;never&quot;|&quot;always&quot;|&quot;auto&quot;)</span> <span class="hljs-string">(default</span> <span class="hljs-string">&quot;auto&quot;</span><span class="hljs-string">)</span><br>      <span class="hljs-string">--compatibility</span>              <span class="hljs-string">Run</span> <span class="hljs-string">compose</span> <span class="hljs-string">in</span> <span class="hljs-string">backward</span> <span class="hljs-string">compatibility</span> <span class="hljs-string">mode</span><br>      <span class="hljs-string">--dry-run</span>                    <span class="hljs-string">Execute</span> <span class="hljs-string">command</span> <span class="hljs-string">in</span> <span class="hljs-string">dry</span> <span class="hljs-string">run</span> <span class="hljs-string">mode</span><br>      <span class="hljs-string">--env-file</span> <span class="hljs-string">stringArray</span>       <span class="hljs-string">Specify</span> <span class="hljs-string">an</span> <span class="hljs-string">alternate</span> <span class="hljs-string">environment</span> <span class="hljs-string">file</span><br>  <span class="hljs-string">-f,</span> <span class="hljs-string">--file</span> <span class="hljs-string">stringArray</span>           <span class="hljs-string">Compose</span> <span class="hljs-string">configuration</span> <span class="hljs-string">files</span><br>      <span class="hljs-string">--parallel</span> <span class="hljs-string">int</span>               <span class="hljs-string">Control</span> <span class="hljs-string">max</span> <span class="hljs-string">parallelism,</span> <span class="hljs-number">-1</span> <span class="hljs-string">for</span> <span class="hljs-string">unlimited</span> <span class="hljs-string">(default</span> <span class="hljs-number">-1</span><span class="hljs-string">)</span><br>      <span class="hljs-string">--profile</span> <span class="hljs-string">stringArray</span>        <span class="hljs-string">Specify</span> <span class="hljs-string">a</span> <span class="hljs-string">profile</span> <span class="hljs-string">to</span> <span class="hljs-string">enable</span><br>      <span class="hljs-string">--progress</span> <span class="hljs-string">string</span>            <span class="hljs-string">Set</span> <span class="hljs-string">type</span> <span class="hljs-string">of</span> <span class="hljs-string">progress</span> <span class="hljs-string">output</span> <span class="hljs-string">(auto,</span> <span class="hljs-string">tty,</span> <span class="hljs-string">plain,</span> <span class="hljs-string">quiet)</span> <span class="hljs-string">(default</span> <span class="hljs-string">&quot;auto&quot;</span><span class="hljs-string">)</span><br>      <span class="hljs-string">--project-directory</span> <span class="hljs-string">string</span>   <span class="hljs-string">Specify</span> <span class="hljs-string">an</span> <span class="hljs-string">alternate</span> <span class="hljs-string">working</span> <span class="hljs-string">directory</span><br>                                   <span class="hljs-string">(default:</span> <span class="hljs-string">the</span> <span class="hljs-string">path</span> <span class="hljs-string">of</span> <span class="hljs-string">the,</span> <span class="hljs-string">first</span> <span class="hljs-string">specified,</span> <span class="hljs-string">Compose</span> <span class="hljs-string">file)</span><br>  <span class="hljs-string">-p,</span> <span class="hljs-string">--project-name</span> <span class="hljs-string">string</span>        <span class="hljs-string">Project</span> <span class="hljs-string">name</span><br><br><span class="hljs-attr">Commands:</span><br>  <span class="hljs-string">attach</span>      <span class="hljs-string">Attach</span> <span class="hljs-string">local</span> <span class="hljs-string">standard</span> <span class="hljs-string">input,</span> <span class="hljs-string">output,</span> <span class="hljs-string">and</span> <span class="hljs-string">error</span> <span class="hljs-string">streams</span> <span class="hljs-string">to</span> <span class="hljs-string">a</span> <span class="hljs-string">service&#x27;s</span> <span class="hljs-string">running</span> <span class="hljs-string">container</span><br>  <span class="hljs-string">build</span>       <span class="hljs-string">Build</span> <span class="hljs-string">or</span> <span class="hljs-string">rebuild</span> <span class="hljs-string">services</span><br>  <span class="hljs-string">config</span>      <span class="hljs-string">Parse,</span> <span class="hljs-string">resolve</span> <span class="hljs-string">and</span> <span class="hljs-string">render</span> <span class="hljs-string">compose</span> <span class="hljs-string">file</span> <span class="hljs-string">in</span> <span class="hljs-string">canonical</span> <span class="hljs-string">format</span><br>  <span class="hljs-string">cp</span>          <span class="hljs-string">Copy</span> <span class="hljs-string">files/folders</span> <span class="hljs-string">between</span> <span class="hljs-string">a</span> <span class="hljs-string">service</span> <span class="hljs-string">container</span> <span class="hljs-string">and</span> <span class="hljs-string">the</span> <span class="hljs-string">local</span> <span class="hljs-string">filesystem</span><br>  <span class="hljs-string">create</span>      <span class="hljs-string">Creates</span> <span class="hljs-string">containers</span> <span class="hljs-string">for</span> <span class="hljs-string">a</span> <span class="hljs-string">service</span><br>  <span class="hljs-string">down</span>        <span class="hljs-string">Stop</span> <span class="hljs-string">and</span> <span class="hljs-string">remove</span> <span class="hljs-string">containers,</span> <span class="hljs-string">networks</span><br>  <span class="hljs-string">events</span>      <span class="hljs-string">Receive</span> <span class="hljs-string">real</span> <span class="hljs-string">time</span> <span class="hljs-string">events</span> <span class="hljs-string">from</span> <span class="hljs-string">containers</span><br>  <span class="hljs-string">exec</span>        <span class="hljs-string">Execute</span> <span class="hljs-string">a</span> <span class="hljs-string">command</span> <span class="hljs-string">in</span> <span class="hljs-string">a</span> <span class="hljs-string">running</span> <span class="hljs-string">container</span><br>  <span class="hljs-string">images</span>      <span class="hljs-string">List</span> <span class="hljs-string">images</span> <span class="hljs-string">used</span> <span class="hljs-string">by</span> <span class="hljs-string">the</span> <span class="hljs-string">created</span> <span class="hljs-string">containers</span><br>  <span class="hljs-string">kill</span>        <span class="hljs-string">Force</span> <span class="hljs-string">stop</span> <span class="hljs-string">service</span> <span class="hljs-string">containers</span><br>  <span class="hljs-string">logs</span>        <span class="hljs-string">View</span> <span class="hljs-string">output</span> <span class="hljs-string">from</span> <span class="hljs-string">containers</span><br>  <span class="hljs-string">ls</span>          <span class="hljs-string">List</span> <span class="hljs-string">running</span> <span class="hljs-string">compose</span> <span class="hljs-string">projects</span><br>  <span class="hljs-string">pause</span>       <span class="hljs-string">Pause</span> <span class="hljs-string">services</span><br>  <span class="hljs-string">port</span>        <span class="hljs-string">Print</span> <span class="hljs-string">the</span> <span class="hljs-string">public</span> <span class="hljs-string">port</span> <span class="hljs-string">for</span> <span class="hljs-string">a</span> <span class="hljs-string">port</span> <span class="hljs-string">binding</span><br>  <span class="hljs-string">ps</span>          <span class="hljs-string">List</span> <span class="hljs-string">containers</span><br>  <span class="hljs-string">pull</span>        <span class="hljs-string">Pull</span> <span class="hljs-string">service</span> <span class="hljs-string">images</span><br>  <span class="hljs-string">push</span>        <span class="hljs-string">Push</span> <span class="hljs-string">service</span> <span class="hljs-string">images</span><br>  <span class="hljs-string">restart</span>     <span class="hljs-string">Restart</span> <span class="hljs-string">service</span> <span class="hljs-string">containers</span><br>  <span class="hljs-string">rm</span>          <span class="hljs-string">Removes</span> <span class="hljs-string">stopped</span> <span class="hljs-string">service</span> <span class="hljs-string">containers</span><br>  <span class="hljs-string">run</span>         <span class="hljs-string">Run</span> <span class="hljs-string">a</span> <span class="hljs-string">one-off</span> <span class="hljs-string">command</span> <span class="hljs-string">on</span> <span class="hljs-string">a</span> <span class="hljs-string">service</span><br>  <span class="hljs-string">scale</span>       <span class="hljs-string">Scale</span> <span class="hljs-string">services</span><br>  <span class="hljs-string">start</span>       <span class="hljs-string">Start</span> <span class="hljs-string">services</span><br>  <span class="hljs-string">stats</span>       <span class="hljs-string">Display</span> <span class="hljs-string">a</span> <span class="hljs-string">live</span> <span class="hljs-string">stream</span> <span class="hljs-string">of</span> <span class="hljs-string">container(s)</span> <span class="hljs-string">resource</span> <span class="hljs-string">usage</span> <span class="hljs-string">statistics</span><br>  <span class="hljs-string">stop</span>        <span class="hljs-string">Stop</span> <span class="hljs-string">services</span><br>  <span class="hljs-string">top</span>         <span class="hljs-string">Display</span> <span class="hljs-string">the</span> <span class="hljs-string">running</span> <span class="hljs-string">processes</span><br>  <span class="hljs-string">unpause</span>     <span class="hljs-string">Unpause</span> <span class="hljs-string">services</span><br>  <span class="hljs-string">up</span>          <span class="hljs-string">Create</span> <span class="hljs-string">and</span> <span class="hljs-string">start</span> <span class="hljs-string">containers</span><br>  <span class="hljs-string">version</span>     <span class="hljs-string">Show</span> <span class="hljs-string">the</span> <span class="hljs-string">Docker</span> <span class="hljs-string">Compose</span> <span class="hljs-string">version</span> <span class="hljs-string">information</span><br>  <span class="hljs-string">wait</span>        <span class="hljs-string">Block</span> <span class="hljs-string">until</span> <span class="hljs-string">the</span> <span class="hljs-string">first</span> <span class="hljs-string">service</span> <span class="hljs-string">container</span> <span class="hljs-string">stops</span><br>  <span class="hljs-string">watch</span>       <span class="hljs-string">Watch</span> <span class="hljs-string">build</span> <span class="hljs-string">context</span> <span class="hljs-string">for</span> <span class="hljs-string">service</span> <span class="hljs-string">and</span> <span class="hljs-string">rebuild/refresh</span> <span class="hljs-string">containers</span> <span class="hljs-string">when</span> <span class="hljs-string">files</span> <span class="hljs-string">are</span> <span class="hljs-string">updated</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Minio</title>
    <link href="/post/9eadc0045e29/"/>
    <url>/post/9eadc0045e29/</url>
    
    <content type="html"><![CDATA[<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="通过-1panel-快速安装-minio-略"><a href="#通过-1panel-快速安装-minio-略" class="headerlink" title="通过 1panel 快速安装 minio (略)"></a>通过 1panel 快速安装 minio (略)</h3><h3 id="使用-image-20240617162518125"><a href="#使用-image-20240617162518125" class="headerlink" title="使用! [image-20240617162518125]("></a>使用! [image-20240617162518125](</h3><h5 id="创建桶"><a href="#创建桶" class="headerlink" title="创建桶"></a>创建桶</h5><p><img src="image-20240611102448868.png" alt="image-20240611102448868"></p><h5 id="设置为公开-私有无法访问"><a href="#设置为公开-私有无法访问" class="headerlink" title="设置为公开, 私有无法访问"></a>设置为公开, 私有无法访问</h5><h5 id=""><a href="#" class="headerlink" title=""></a><img src="image-20240611102707639.png" alt="image-20240611102707639"></h5><h5 id="配置访问规则-前缀"><a href="#配置访问规则-前缀" class="headerlink" title="配置访问规则, 前缀"></a>配置访问规则, 前缀</h5><p><img src="image-20240611102812724.png" alt="image-20240611102812724"></p><h5 id="创建服务账号"><a href="#创建服务账号" class="headerlink" title="创建服务账号"></a>创建服务账号</h5><p><img src="image-20240611102921408.png" alt="image-20240611102921408"></p><p><img src="image-20240611102939916.png" alt="image-20240611102939916"></p><h5 id="代码中使用"><a href="#代码中使用" class="headerlink" title="代码中使用"></a>代码中使用</h5><p><img src="image-20240611102958006.png" alt="image-20240611102958006"></p><h2 id="2-通过-Docker-自己安装"><a href="#2-通过-Docker-自己安装" class="headerlink" title="2.通过 Docker 自己安装"></a>2.通过 Docker 自己安装</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker pull docker://minio/minio <span class="hljs-comment"># 拉取minio镜像</span><br></code></pre></td></tr></table></figure><p><img src="image-20240612091412567.png" alt="image-20240612091412567"></p>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
      <category>中间件</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Minio</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringBoot自定义 Starter</title>
    <link href="/post/13bb5bc745e1/"/>
    <url>/post/13bb5bc745e1/</url>
    
    <content type="html"><![CDATA[<p>适用于将独立模块,封装成spring-boot-stater 自动配置的模块</p><h3 id="1-创建-Maven-项目"><a href="#1-创建-Maven-项目" class="headerlink" title="1. 创建 Maven 项目"></a>1. 创建 Maven 项目</h3><p>创建一个普通的 Maven 项目 <code>custom-example-starter</code>。</p><h3 id="2-导入-Spring-Boot-相关依赖"><a href="#2-导入-Spring-Boot-相关依赖" class="headerlink" title="2. 导入 Spring Boot 相关依赖"></a>2. 导入 Spring Boot 相关依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">java.version</span>&gt;</span>17<span class="hljs-tag">&lt;/<span class="hljs-name">java.version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">project.build.sourceEncoding</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">project.reporting.outputEncoding</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">spring-boot.version</span>&gt;</span>3.0.2<span class="hljs-tag">&lt;/<span class="hljs-name">spring-boot.version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-autoconfigure<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>provided<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependencyManagement</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-dependencies<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;spring-boot.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">type</span>&gt;</span>pom<span class="hljs-tag">&lt;/<span class="hljs-name">type</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>import<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencyManagement</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="3-声明需要配置的属性和配置名前缀"><a href="#3-声明需要配置的属性和配置名前缀" class="headerlink" title="3. 声明需要配置的属性和配置名前缀"></a>3. 声明需要配置的属性和配置名前缀</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * admin 属性</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@ConfigurationProperties(prefix = &quot;custom.user.admin&quot;)</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AdminProperties</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">Integer</span> <span class="hljs-variable">id</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">String</span> <span class="hljs-variable">username</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;admin&quot;</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">String</span> <span class="hljs-variable">password</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;password&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-创建自定义配置类，并配置-Bean"><a href="#4-创建自定义配置类，并配置-Bean" class="headerlink" title="4. 创建自定义配置类，并配置 Bean"></a>4. 创建自定义配置类，并配置 Bean</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@EnableConfigurationProperties(AdminProperties.class)</span><br><span class="hljs-meta">@ComponentScan(&quot;com.example.utils&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserAutoConfiguration</span> &#123;<br>    <span class="hljs-meta">@Bean</span><br>    User <span class="hljs-title function_">admin</span><span class="hljs-params">(AdminProperties adminProperties)</span> &#123;<br>        System.err.println(<span class="hljs-string">&quot;adminProperties: &quot;</span> + adminProperties);<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br>        user.setId(adminProperties.getId());<br>        user.setUsername(adminProperties.getUsername());<br>        user.setPassword(adminProperties.getPassword());<br>        <span class="hljs-keyword">return</span> user;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="5-导入指定的配置类"><a href="#5-导入指定的配置类" class="headerlink" title="5. 导入指定的配置类"></a>5. 导入指定的配置类</h3><p>创建文件：<code>resources/META-INF/spring/org.springframework.boot.autoconfigure.AutoConfiguration.imports</code>，并添加以下内容：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">com<span class="hljs-selector-class">.example</span><span class="hljs-selector-class">.utils</span>.UserAutoConfiguration<br></code></pre></td></tr></table></figure><p>SpringBoot 2.7前后配置有所差异</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs stylus">示例 <br>原spring.factories文件<br>org<span class="hljs-selector-class">.springframework</span><span class="hljs-selector-class">.boot</span><span class="hljs-selector-class">.autoconfigure</span>.EnableAutoConfiguration=\<br>com<span class="hljs-selector-class">.xxx</span><span class="hljs-selector-class">.iot</span><span class="hljs-selector-class">.common</span><span class="hljs-selector-class">.config</span><span class="hljs-selector-class">.SaTokenConfigure</span>,\<br>com<span class="hljs-selector-class">.xxx</span><span class="hljs-selector-class">.iot</span><span class="hljs-selector-class">.common</span><span class="hljs-selector-class">.config</span><span class="hljs-selector-class">.SecurityProperties</span><br><br>在resource/META-INF目录下新建spring目录，并添加org<span class="hljs-selector-class">.springframework</span><span class="hljs-selector-class">.boot</span><span class="hljs-selector-class">.autoconfigure</span><span class="hljs-selector-class">.AutoConfiguration</span>.imports文件<br>com<span class="hljs-selector-class">.xxx</span><span class="hljs-selector-class">.iot</span><span class="hljs-selector-class">.common</span><span class="hljs-selector-class">.config</span><span class="hljs-selector-class">.SaTokenConfigure</span><br>com<span class="hljs-selector-class">.xxx</span><span class="hljs-selector-class">.iot</span><span class="hljs-selector-class">.common</span><span class="hljs-selector-class">.config</span>.SecurityProperties<br></code></pre></td></tr></table></figure><h3 id="6-在其他-Spring-Boot-项目中引用此模块直接使用-Bean"><a href="#6-在其他-Spring-Boot-项目中引用此模块直接使用-Bean" class="headerlink" title="6. 在其他 Spring Boot 项目中引用此模块直接使用 Bean"></a>6. 在其他 Spring Boot 项目中引用此模块直接使用 Bean</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">ConfigurableApplicationContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> SpringApplication.run(Main.class, args);<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> context.getBean(User.class);<br>        System.out.println(<span class="hljs-string">&quot;user = &quot;</span> + user);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="7-在-YAML-文件中修改默认值"><a href="#7-在-YAML-文件中修改默认值" class="headerlink" title="7. 在 YAML 文件中修改默认值"></a>7. 在 YAML 文件中修改默认值</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">custom:</span><br><span class="hljs-attr">user:</span><br><span class="hljs-attr">admin:</span><br><span class="hljs-attr">id:</span> <span class="hljs-number">22</span><br><span class="hljs-attr">username:</span> <span class="hljs-string">inyxin</span><br></code></pre></td></tr></table></figure><p>通过以上步骤，你就创建了一个自定义的 Spring Boot Starter，并能在其他项目中直接使用对应的 Bean。</p>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
      <category>Java</category>
      
      <category>Spring</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>Spring</tag>
      
      <tag>SpringBoot</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>电力巡检实训项目</title>
    <link href="/post/52efb45fb389/"/>
    <url>/post/52efb45fb389/</url>
    
    <content type="html"><![CDATA[<h2 id="角色"><a href="#角色" class="headerlink" title="角色"></a>角色</h2><ul><li><p>超级管理员</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">维护整个系统的正常运行,不参与任何用户的业务<br></code></pre></td></tr></table></figure></li><li><p>线路管理员</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">对于线路进行管理, 巡检任务的指定, 分配, 审核以及消缺任务的指定, 分配和审核<br></code></pre></td></tr></table></figure></li><li><p>巡检员 </p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gcode">执行巡检任务并返回回执信息 <span class="hljs-comment">(巡检回执)</span><br></code></pre></td></tr></table></figure></li><li><p>消缺员</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gcode">执行消缺任务 , 消除线路中的缺陷, 并反馈回执信息 <span class="hljs-comment">(消缺回执)</span><br></code></pre></td></tr></table></figure></li></ul><h2 id="RBAC"><a href="#RBAC" class="headerlink" title="RBAC"></a>RBAC</h2><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs diff">电力巡检系统应该设计一个RBAC权限模型, 来控制角色的操作<br><span class="hljs-deletion">-用户表(user)</span><br><span class="hljs-deletion">-用户角色表(user_role)</span><br><span class="hljs-deletion">-角色表(role)</span><br><span class="hljs-deletion">-角色资源表(role_resource)  </span><br><span class="hljs-deletion">-资源表(reource)</span><br></code></pre></td></tr></table></figure><p>可以基于 <code>Spring MVC</code> 中的 <code>拦截器</code> 或者使用 <code>AOP</code> 实现简单的权限控制效果</p>]]></content>
    
    
    <categories>
      
      <category>default</category>
      
    </categories>
    
    
    <tags>
      
      <tag>default</tag>
      
    </tags>
    
  </entry>
  
  
  
  
  
  
  <entry>
    <title>about</title>
    <link href="/"/>
    <url>/</url>
    
    <content type="html"><![CDATA[<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">这里写关于页的正文，支持 Markdown, <span class="hljs-selector-tag">HTML</span><br></code></pre></td></tr></table></figure>]]></content>
    
  </entry>
  
  
  
  <entry>
    <title>friends</title>
    <link href="/"/>
    <url>/</url>
    
    <content type="html"><![CDATA[]]></content>
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/"/>
    <url>/</url>
    
    <content type="html"><![CDATA[!(function() {  /** 计时起始时间，自行修改 **/  var start = new Date("2024/07/04 00:00:00");  function update() {    var now = new Date();    now.setTime(now.getTime()+250);    days = (now - start) / 1000 / 60 / 60 / 24;    dnum = Math.floor(days);    hours = (now - start) / 1000 / 60 / 60 - (24 * dnum);    hnum = Math.floor(hours);    if(String(hnum).length === 1 ){      hnum = "0" + hnum;    }    minutes = (now - start) / 1000 /60 - (24 * 60 * dnum) - (60 * hnum);    mnum = Math.floor(minutes);    if(String(mnum).length === 1 ){      mnum = "0" + mnum;    }    seconds = (now - start) / 1000 - (24 * 60 * 60 * dnum) - (60 * 60 * hnum) - (60 * mnum);    snum = Math.round(seconds);    if(String(snum).length === 1 ){      snum = "0" + snum;    }    document.getElementById("timeDate").innerHTML = "本站安全运行&nbsp"+dnum+"&nbsp天";    document.getElementById("times").innerHTML = hnum + "&nbsp小时&nbsp" + mnum + "&nbsp分&nbsp" + snum + "&nbsp秒";  }  update();  setInterval(update, 1000);})();]]></content>
    
  </entry>
  
  
  
  <entry>
    <title>categories</title>
    <link href="/"/>
    <url>/</url>
    
    <content type="html"><![CDATA[]]></content>
    
  </entry>
  
  
  
  <entry>
    <title>tags</title>
    <link href="/"/>
    <url>/</url>
    
    <content type="html"><![CDATA[]]></content>
    
  </entry>
  
  
  
</search>
