<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>hexo主题安装</title>
    <link href="/post/a6d7b86486ae/"/>
    <url>/post/a6d7b86486ae/</url>
    
    <content type="html"><![CDATA[<p><code>千里之行，始于足下。</code></p><p><a href="https://hexo.io/themes/">Themes | Hexo</a></p><h1 id="选择主题"><a href="#选择主题" class="headerlink" title="选择主题"></a>选择主题</h1><p>可以预览 , 和 查看源码</p><p><img src="image-20240706173855293.png" alt="image-20240706173855293"></p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">git clone git<span class="hljs-meta">@github</span>.com:sabrinaluo/hexo-theme-replica.git themes/replica<br></code></pre></td></tr></table></figure><p><img src="image-20240706174104639.png" alt="image-20240706174104639"></p><p>主题将 安装在 themes&#x2F;主题名 </p><h3 id="修改-config-yml"><a href="#修改-config-yml" class="headerlink" title="修改_config.yml"></a>修改_config.yml</h3><p><img src="image-20240706174218073.png" alt="image-20240706174218073"></p><p>备份主题配置</p><p> <a href="........%5Cthemes%5Creplica_config.yml">_config.yml</a>  -&gt; [_config - 副本.yml](........\themes\replica_config - 副本.yml) </p><p>修改配置 <a href="........%5Cthemes%5Creplica_config.yml">_config.yml</a> </p>]]></content>
    
    
    <categories>
      
      <category>工具</category>
      
      <category>Markdown</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
      <tag>Markdown</tag>
      
      <tag>Theme</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>花生壳</title>
    <link href="/post/d2322c4d3105/"/>
    <url>/post/d2322c4d3105/</url>
    
    <content type="html"><![CDATA[<p><code>千里之行，始于足下。</code></p><p><a href="https://hsk.oray.com/download">花生壳客户端官方下载 - 贝锐花生壳官网 (oray.com)</a></p><p>优点: 固定IP</p><p>缺点: 限流1M , 只有2条隧道</p><h1 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h1><p><img src="image-20240706164818305.png" alt="image-20240706164818305"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">wget <span class="hljs-string">&quot;https://dl.oray.com/hsk/linux/phddns_5.3.0_amd64.deb&quot;</span> -O phddns_5.3.0_amd64.deb<br></code></pre></td></tr></table></figure><p><a href="https://service.oray.com/question/11630.html">Linux版使用教程-贝锐官网 (oray.com)</a></p><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs bash">root@beelink:~<span class="hljs-comment"># apt install ./phddns_5.3.0_amd64.deb</span><br>正在读取软件包列表... 完成<br>正在分析软件包的依赖关系树... 完成<br>正在读取状态信息... 完成<br>注意，选中 <span class="hljs-string">&#x27;phddns&#x27;</span> 而非 <span class="hljs-string">&#x27;./phddns_5.3.0_amd64.deb&#x27;</span><br>下列【新】软件包将被安装：<br>  phddns<br>升级了 0 个软件包，新安装了 1 个软件包，要卸载 0 个软件包，有 48 个软件包未 被升级。<br>需要下载 0 B/270 kB 的归档。<br>解压缩后会消耗 12.5 MB 的额外空间。<br>获取:1 /root/phddns_5.3.0_amd64.deb phddns amd64 5.3.0 [270 kB]<br>正在选中未选择的软件包 phddns。<br>(正在读取数据库 ... 系统当前共安装有 224640 个文件和目录。)<br>准备解压 /root/phddns_5.3.0_amd64.deb  ...<br>正在解压 phddns (5.3.0) ...<br>正在设置 phddns (5.3.0) ...<br><span class="hljs-keyword">in</span> systemv<br>Installation, please later...<br>Successful installation of Phddns Service.<br><br> +--------------------------------------------------+<br> |             Oray PeanutHull Linux 5.3.0          |<br> +--------------------------------------------------+<br> |  SN: orayf7285ff174f3   Default password: admin  |<br> +--------------------------------------------------+<br> |    Remote Management Address http://b.oray.com   |<br> +--------------------------------------------------+<br>N: 由于文件<span class="hljs-string">&#x27;/root/phddns_5.3.0_amd64.deb&#x27;</span>无法被用户<span class="hljs-string">&#x27;_apt&#x27;</span>访问，已脱离沙盒并 提权为根用户来进行下载。 - pkgAcquire::Run (13: 权限不够)<br>root@beelink:~<span class="hljs-comment">#</span><br></code></pre></td></tr></table></figure><h3 id="卸载"><a href="#卸载" class="headerlink" title="卸载"></a>卸载</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs bash">root@beelink:~<span class="hljs-comment"># apt remove phddns</span><br>正在读取软件包列表... 完成<br>正在分析软件包的依赖关系树... 完成<br>正在读取状态信息... 完成<br>下列软件包将被【卸载】：<br>  phddns<br>升级了 0 个软件包，新安装了 0 个软件包，要卸载 1 个软件包，有 48 个软件包未 被升级。<br>解压缩后将会空出 12.5 MB 的空间。<br>您希望继续执行吗？ [Y/n] y<br>(正在读取数据库 ... 系统当前共安装有 224651 个文件和目录。)<br>正在卸载 phddns (5.3.0) ...<br>phdaemon: 未找到进程<br>phtunnel: 未找到进程<br>phddns_mini_httpd: 未找到进程<br>Remove Phtunnel Service Success.<br>Thanks For Using Phtunnel Service.<br>root@beelink:~<span class="hljs-comment">#</span><br></code></pre></td></tr></table></figure><h1 id="扩展功能"><a href="#扩展功能" class="headerlink" title="扩展功能"></a>扩展功能</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">root@beelink:~<span class="hljs-comment"># phddns</span><br>Phtunnel Serive called with  unknown argument<br>(phddns  |start|status|stop|restart|reset|<span class="hljs-built_in">enable</span>|<span class="hljs-built_in">disable</span>|version)<br></code></pre></td></tr></table></figure><ul><li>start 启动</li><li>stop 停止</li><li>status 状态</li><li>restart 重启</li><li>reset 重置</li><li>enable 开机自启</li><li>disable 取消开机自启</li><li>version 查看版本号</li></ul><p><strong>注意: 除phddns version命令不需要管理员权限外,其他命令均需要管理员权限</strong></p><p><img src="image-20240706165746108.png" alt="image-20240706165746108"></p><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><p>1、浏览器访问<a href="http://b.oray.com/">http://b.oray.com</a> ，输入花生壳Linux 5.0在安装时产生<strong>SN码与默认登录密码admin</strong>登录。</p><p><img src="image-20240706165910674.png" alt="image-20240706165910674"></p><p><img src="image-20240706165936080.png" alt="image-20240706165936080"></p><p><img src="image-20240706170003456.png" alt="image-20240706170003456"></p><p>激活成功后就可以正常使用了</p><h1 id="添加映射"><a href="#添加映射" class="headerlink" title="添加映射"></a>添加映射</h1><table><thead><tr><th>选项</th><th>描述</th></tr></thead><tbody><tr><td>应用名称</td><td>自定义</td></tr><tr><td>应用图标</td><td>自行选择</td></tr><tr><td>映射类型</td><td>选择TCP</td></tr><tr><td>映射模板</td><td>暂不选择模板</td></tr><tr><td>外网<a href="https://domain.oray.com/">域名</a></td><td>选择用作外网访问的域名</td></tr><tr><td>外网端口</td><td>选择动态端口</td></tr><tr><td>内网主机</td><td>映射的Ubuntu系统内网IP地址</td></tr><tr><td>内网端口</td><td>映射的服务类型对应端口22</td></tr><tr><td>访问控制</td><td>设置在指定条件下才可访问映射 , 提升应用安全。针对网页类映射可支持设置访问密码</td></tr><tr><td>带宽</td><td>购买映射带宽后，可支持给映射分配额外带宽，这里保存默认</td></tr><tr><td>夜间带宽</td><td>18:00-次日8:00带宽速度提升100%，速度不低于5Mbps；带宽基数越大，夜间越快</td></tr></tbody></table><p><a href="https://console.hsk.oray.com/forward">贝锐花生壳管理 - 内网穿透 (oray.com)</a></p><p><img src="image-20240706170558042.png" alt="image-20240706170558042"></p><p><strong>内网主机</strong> : 127.0.0.1也行</p><p>访问部署在linux 80 端口上的nginx </p><p><img src="image-20240706172025539.png" alt="image-20240706172025539"></p><p>穿透成功</p>]]></content>
    
    
    <categories>
      
      <category>工具</category>
      
      <category>内网穿透</category>
      
    </categories>
    
    
    <tags>
      
      <tag>内网穿透</tag>
      
      <tag>花生壳</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Cpolar-使用教程</title>
    <link href="/post/cb717c9eae02/"/>
    <url>/post/cb717c9eae02/</url>
    
    <content type="html"><![CDATA[<p><code>千里之行，始于足下。</code></p><p><a href="https://dashboard.cpolar.com/">cpolar - secure introspectable tunnels to localhost</a></p><p>优点: 不限流量 , 4条隧道</p><p>缺点: CPU占用高 , 随机IP</p><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">curl</span> <span class="hljs-literal">-L</span> https://www.cpolar.com/<span class="hljs-keyword">static</span>/downloads/<span class="hljs-built_in">install-release</span><span class="hljs-literal">-cpolar</span>.sh | sudo bash<br><br></code></pre></td></tr></table></figure><p><img src="image-20240706160413788.png" alt="image-20240706160413788"></p><h3 id="查看版本"><a href="#查看版本" class="headerlink" title="查看版本"></a>查看版本</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">inyxin<span class="hljs-meta">@beelink</span>:~$ cpolar version<br>cpolar version <span class="hljs-number">3.3</span><span class="hljs-number">.12</span><br></code></pre></td></tr></table></figure><h3 id="token认证"><a href="#token认证" class="headerlink" title="token认证"></a>token认证</h3><p>登录<a href="https://dashboard.cpolar.com/get-started">cpolar官网后台</a>，点击左侧的验证，查看自己的认证token，之后将token贴在命令行里</p><p><img src="image-20240706160658210.png" alt="image-20240706160658210"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">inyxin@beelink:~$ cpolar authtoken YWVmMDQ0NGEtMTEyZC00Yjg2LTk4ZjktZDRlOThi<br>Authtoken saved to configuration file: /usr/local/etc/cpolar/cpolar.yml<br></code></pre></td></tr></table></figure><h3 id="简单穿透测试一下"><a href="#简单穿透测试一下" class="headerlink" title="简单穿透测试一下"></a>简单穿透测试一下</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java">cpolar <span class="hljs-number">9998</span><br>    cpolar by <span class="hljs-meta">@bestexpresser</span>                                    (Ctrl+C to quit)                                                                            Tunnel Status       online<br>Account             <span class="hljs-title function_">inyxin</span> <span class="hljs-params">(Plan: Free)</span><br>Version             <span class="hljs-number">3.12</span>/<span class="hljs-number">3.22</span><br>Web Interface       <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">4040</span><br>Forwarding          http:<span class="hljs-comment">//31526c8c.r25.cpolar.top -&gt; http://localhost:9998 Forwarding          https://31526c8c.r25.cpolar.top -&gt; http://localhost:9998# Conn              0</span><br>Avg Conn Time       <span class="hljs-number">0.</span>00ms                                 <br>    <br>    <br></code></pre></td></tr></table></figure><p>穿透成功 , 只是IP不固定</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">https:<span class="hljs-comment">//31526c8c.r25.cpolar.top/#/</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>工具</category>
      
      <category>内网穿透</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Cpolar</tag>
      
      <tag>内网穿透</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo中Typero图片插入问题</title>
    <link href="/post/93bcae3db381/"/>
    <url>/post/93bcae3db381/</url>
    
    <content type="html"><![CDATA[<p><strong><a href="https://hexo.io/zh-cn/">Hexo 官网</a></strong></p><p><strong>Question :</strong> </p><p>​hexo 处理 本地编写的带有图片的markdown时, 无法正确加载图片的路径</p><p><strong>Solution :</strong></p><ol><li><p>安装插件 <code>hexo-typora-img</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install hexo-typora-img --save<br></code></pre></td></tr></table></figure><p><img src="image-20240706153100037.png" alt="image-20240706153100037"></p></li><li><p>修改_config.yml</p><p><img src="image-20240706153226789.png" alt="image-20240706153226789"></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">post_asset_folder:</span> <span class="hljs-literal">true</span> <span class="hljs-comment">#启用 资源文件夹</span><br><span class="hljs-attr">relative_link:</span> <span class="hljs-literal">true</span> <span class="hljs-comment">#把链接改为与根目录的相对位址</span><br></code></pre></td></tr></table></figure></li><li><p>修改typora图片配置</p></li></ol><p><img src="image-20240706145214903.png" alt="image-20240706145214903"></p>]]></content>
    
    
    <categories>
      
      <category>工具</category>
      
      <category>Markdown</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
      <tag>Markdown</tag>
      
      <tag>Typero</tag>
      
      <tag>Bug</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Typero v1.8.10 破解</title>
    <link href="/post/2133649565eb/"/>
    <url>/post/2133649565eb/</url>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h2 id="Download"><a href="#Download" class="headerlink" title="Download"></a>Download</h2><p><a href="https://pan.baidu.com/share/init?surl=AXfxqM9KBSp7fvbpkeQ8KA&pwd=9sla"> 👉百度网盘下载 </a></p><h2 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h2><p><strong>解压密码</strong></p><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lasso">www.ittel.<span class="hljs-literal">cn</span><br></code></pre></td></tr></table></figure><p><img src="image-20240706144336808.png" alt="image-20240706144336808"></p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p><img src="image-20240706144510255.png" alt="image-20240706144510255"></p><h2 id="激活"><a href="#激活" class="headerlink" title="激活"></a>激活</h2><h3 id="方式1-亲测可行"><a href="#方式1-亲测可行" class="headerlink" title="方式1 (亲测可行)"></a>方式1 (亲测可行)</h3><p>将 <code>ittel/winmm.dll</code> 复制到Typora安装目录下</p><p><img src="image-20240706150128143.png" alt="image-20240706150128143"></p><p> <img src="image-20240706145801712.png" alt="image-20240706145801712"></p><p>最后重启 查看许可证</p><p><img src="image-20240706150207507.png" alt="image-20240706150207507"></p><h3 id="方式2-我不行"><a href="#方式2-我不行" class="headerlink" title="方式2  (我不行)"></a>方式2  (我不行)</h3><p>How to use?</p><ol><li><p>运行 typora-setup-x64-1.7.0-dev-cracked.exe 安装Typora</p></li><li><p>运行 LicenseGen.exe 获得激活码</p><p><img src="image-20240706144737512.png" alt="image-20240706144737512"></p></li><li><p>输入你的邮箱和得到的激活码</p><p><img src="image-20240706144851917.png" alt="image-20240706144851917"></p></li><li><p>完美激活！</p></li></ol><p>这里也提供几个可以用的激活码</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">VMLM7G</span>-<span class="hljs-number">2</span>A45QN-DBM3UZ-GSC7U3<br><span class="hljs-attribute">NXYAC8</span>-NQLVG3-<span class="hljs-number">4</span>ZMB4Z-W4APQA<br><span class="hljs-attribute">7UMJ6D</span>-BWHGKL-KD7ZN9-DNFA3E<br><span class="hljs-attribute">6TFNEN</span>-EFC3MK-QC5VC7-XHWY6A<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>工具</category>
      
      <category>Markdown</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Typero</tag>
      
      <tag>破解</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo Quick Start</title>
    <link href="/post/c3e3498a29c0/"/>
    <url>/post/c3e3498a29c0/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    <categories>
      
      <category>工具</category>
      
      <category>Markdown</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
      <tag>Markdown</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>计算机图形学期末复习题</title>
    <link href="/post/9ae56c810397/"/>
    <url>/post/9ae56c810397/</url>
    
    <content type="html"><![CDATA[<p><strong>单项选择题：</strong></p><p>1．计算机的最小存储单位是   A    。</p><p>  A． 位  B． 字节   C． 字  D． 双字 </p><p>2．关于计算机图形学研究内容，不正确的说法是    D 。</p><p>  A． 几何模型构造及图形生成技术       B． 图形的操作与处理方法  </p><p>C． 图形信息的存储、检索与交换技术   D． 人机交互及用户串联技术</p><ol start="3"><li>C&#x2F;C++ Windows 应用程序的入口函数名称是    B   。</li></ol><p>A． main    B． WinMain    C． mian     D． winMain</p><ol start="4"><li>本学期的计算机图形学课程选用的编程语言是   A   。</li></ol><p>A． C&#x2F;C++      B． Java     C． C#      D． Python</p><ol start="5"><li>以下属于本课程选用的编程语言的特点是   B    。</li></ol><p>A． 不支持多继承    B．执行效率高    </p><p>C． 需要解释执行    D． 不适合编写系统软件</p><ol start="6"><li>在Win32 Application平台上绘制图形的类型是   A   。</li></ol><p>A． HDC      B．DCC      C．PDC       D．CDD</p><ol start="7"><li>本学期本课程介绍的绘制直线段的算法共有    D  种。</li></ol><p>A． 1      B． 2      C． 3       D． 4</p><p>8．平面直角坐标系的第一象限有两点A（x0,y0）、B（x1,y1），其中x0、y0、x1、y1均是正整数，则用逐点比较法绘制直线段AB共需执行   A  次画点命令。</p><p>A. | x1-x0| + | y1-y0| + 1    B. | x1-x0| + | y1-y0| </p><p>C. | x1-x0| + | y1-y0| - 1     D. 无法确定</p><p>9．若用逐点比较法在平面直角坐标系的第一象限内绘制直线段，则需要该线段的斜率K的绝对值   A   。</p><p>A. ≥0  B. ≥1  C. 没有要求  D. 无法确定</p><p>10．在平面直角坐标系的第一象限内绘制直线段，下列  D   算法对线段的斜率K没有限制。</p><p>A. 逐点比较  B. DDA  C. 中点 D. Bresenham</p><p>11．不属于Bresenham算法绘制直线段效率高的原因是    D   。</p><p>A. 斜率K不大于1  B. 减少了绘制次数  C. 避免了浮点数运用算 D. 不可进行移位运算</p><p>12．采用Bresenham算法绘制从点A（10,10）到点B（20,15）的直线段，共需执行 A     次画点命令。</p><p>A. 11  B. 15  C. 10  D. 12</p><p>13．计算机图形学中表达一条曲线的方程一般有    C   种形式。</p><p>A. 一  B. 二  C. 三 D. 无穷</p><p>14．解算三次样条插值函数需要额外补充    B   个条件。</p><p>   A. 1  B. 2  C. 3 D. 0</p><p>15．下列不属于曲线插值方法的是  D     。</p><p>A.多项式插值 B.分段多项式插值 C.样条函数插值 D.最小二乘插值</p><p>16．最小二乘法曲线拟合的原理是：使型值点的坐标值与曲线上对应点的坐标值的偏差的平方和达到     B  。</p><p>A.最大  B.最小  C.给定的取值范围 D.以上说法均不正确</p><p>17．区域内部点的判断方法可以是：射线法、检验夹角之和</p><p>18．    B   不属于简单种子填充算法的特点。</p><p>A.操作过程简单  B.需进行深度递归  C.算法的效率低 D.仅需少量的内存空间</p><p>19．二维图形的几何变换共有   B   种基本变换形式。</p><p>A． 2     B． 3     C． 5      D． 4</p><p>20．对于任意一条直线段，它相对于一个已定义的窗口位置关系最多有   D   种情况。</p><p>A． 2     B． 3     C． 5      D． 4</p><p>21．编码裁剪法中，每个区域用一个    D  位代码来表示。</p><p>A． 2     B． 3     C． 5      D． 4</p><p>22．编码裁剪法中，每个点的编码从高到低位依次分别代表   A   。</p><p>A．上下右左     B．右左上下    C．上下左右     D．下上左右</p><p>23．编码裁剪法中，每位的编码只有    A  状态。</p><p>A． 1    B． 3     C． 2      D． 4</p><p>24．编码裁剪法中，若线段两端点编码均为零，则两点    A  。</p><p>A．在窗口外    B．在窗口内    C． 不可见      D． 不能确定</p><p>25．要判断两端点所构成的线段与窗口对应关系，可用两个端点编码进行  C   运算。</p><p>A．逻辑“非”    B．逻辑“或”    C．逻辑“与”      D．逻辑“异或”</p><p>26．若线段两端点的编码的逻辑   C  不为0，则这两个端点必然位于某条边界的同侧，故必在窗口外，应不可见。</p><p>A．非    B． 或    C． 与       D． 异或</p><p>27．多边形的逐边裁剪算法中需要设置   C   个顶点表。</p><p>A． 1    B． 3     C． 2      D． 4</p><p>28．计算机图形学中，一般有   B   种表示三维图形的方法。</p><p>A． 1    B． 3     C． 2      D． 4 (线框模型、表面模型、实体模型)</p><p>29．在三维空间里，给定(n＋l)×(m+1)个空间点,可生成   D   次Bezier曲面。</p><p>A． (n＋l)×(m+1)    B． n ×(m+1)     C．(n＋l)×m      D． n×m</p><p>30．在三维空间中，,生成双三次Bezier曲面，需要    B  个控制顶点。</p><p>A． 9    B． 16     C．25      D． 20</p><p>31．以下不属于正轴测投影的是   D   。</p><p>A． 正等测    B． 正二测    C．正三测      D．正四测</p><ol start="32"><li>透视投影是透视变换与   A   的组合。</li></ol><p>A．平行投影变换    B． 正二测    C．正三测      D．正四测</p><ol start="33"><li>影响真实感图形因素有   D   。</li></ol><p>A．物体本身形状及物体表面特征  B．照射物体光源及物体与光源相对位置</p><p>C. 物体周围环境        D. 以上都是</p><ol start="34"><li>光照在物体表面上通常有   C    种情况。</li></ol><p>A． 1      B． 2      C． 3       D． 4</p><ol start="35"><li>Lambert光照模型主要考虑漫反射光和   A   的影响。</li></ol><p>A. 环境光      B． 镜面光     C． 透射光       D． 高光</p><ol start="36"><li>Phong光照模型有  C    种类型的光的影响。</li></ol><p>A． 1      B． 2      C． 3       D． 4</p><p>37．下列有关投影的叙述语句中,正确的论述为    D  。</p><p>A. 透视投影与平行投影相比，能真实地反映物体的精确的尺寸和形状</p><p>B. 平行投影的投影中心到投影面的距离是无限的</p><p>C. 透视投影变换中，一组平行于投影面的线的投影产生一个灭点</p><p>D. 灭点可以看作是有限远处的一个点在投影面上的投影</p><p>38．以下    D  不是贝塞尔曲线的特点。</p><p> A.贝塞尔曲线只要给出数据点就可构造曲线</p><p> B.贝塞尔曲线次数严格依赖于确定该段曲线的数据点个数</p><p> C.贝塞尔曲线不完全通过数据点</p><p>D.贝塞尔曲线处处可以调整</p><p>39．三维图形是相对于    A   作旋转变换。</p><p>A. 点   B. 直线    C. 平面   D. 曲线</p><p>40．三维空间XYZ中的图形绕x轴的逆时针旋转可看成是图形在  B   绕原点O的二维旋转变换。 </p><p>A．XOY平面  B．YOZ 平面  C．ZOX 平面  D．都不是</p><p>41．已知平面裁剪矩形域的左下角点(50,60)及右上角点(200，200)，利用编码裁剪算法对某线段的端点(56,115)进行编码，其编码是   D  。</p><p>A．1100  B．0000   C．0101  D．1001</p><p>42．在进行扫描线多边形区域填充时，若位于扫描线异侧的两相邻边与扫描线相交于同一点，则该点应视为    C  个交点。</p><p>  A．舍弃  B．1  C．2  D．3</p><p>43．下面哪一项是Bezier曲线的特性    A   。</p><p>A．局部可调性     B．凹凸性    C．对称性    D．中点性</p><p>44．在透视投影中，主灭点的个数最多是   C    。</p><p>A． 1      B． 2     C． 3      D． 0 </p><p>45．下列有关简单光反射模型的描述语句中，正确的是   C  。 </p><p>A．简单光反射模型，又称为Phong模型，它模拟物体表面对光的透射作用</p><p>B．在简单光反射模型中，假定光源是点光源，且仅关注物体表面对光的镜面反射作用 </p><p>C．简单光反射模型主要考虑物体表面对直射光照的漫反射作用</p><p>D．在简单光反射模型中，对物体间的光反射作用，只用一个环境光变量做近似处理</p><p>46．正等轴测图的三个投影轴间的夹角是   D   度。</p><p>A．30     B．60      C．90     D．120</p><p>47．一般情况下，三次B样条曲线需要   B  个控制顶点。 </p><p>A． 5       B． 4      C． 6       D． 3</p><ol start="48"><li>下列设备中，   B    是图形输出设备。</li></ol><p>A． 数字化仪      B． 绘图仪      C．扫描仪       D．键盘</p><ol start="49"><li>直线DDA算法中，当斜率|m|&gt;1时，x方向的增量△x和y方向的增量△y分别</li></ol><p>是   C  。</p><p>A. ±m和±1   B. ±1和±1&#x2F;m   C. ±1和±m   D. ±1&#x2F;m和±1</p><ol start="50"><li>计算机图形学中，CAD是指计算机  B   。</li></ol><p>A. 辅助制造   B. 辅助设计   C. 辅助教学   D. 辅助探测</p><p>51．计算机的基本存储单位是   D   。</p><p>  A． 位  B． 双字   C． 字  D．字节</p><p>52．关于计算机图形学的特点，不正确的说法是    C   。</p><p>A． 计算机产生的图形有规律、光滑 </p><p>B． 计算机产生的图形纯净美观、无噪声干扰</p><p>C．通过计算机产生的图形不能描绘纯粹是想像的主观世界中的各种对象。 </p><p>D．交互式产生的图形可修改性强，且速度快、差错少。</p><ol start="53"><li>关于C&#x2F;C++中的类的说法不正确的是  A     。</li></ol><p>A． 定义类的关键字是struct       B． 类的成员通常具有访问属性</p><p>C． 定义类的对象需要构造函数      D． 类具有封装特性</p><ol start="54"><li>最小二乘法是实际测量值和真实值之差（误差）的平方和达到     B 。</li></ol><p>A． 最大     B． 最小     C． 零       D． 无穷大</p><ol start="55"><li>以下属于本课程选用的编程语言的特点是    A   。</li></ol><p>A． 支持多继承      B． 执行效率低      </p><p>C． 需要解释执行    D． 不适合编写系统软件</p><ol start="56"><li>本学期在MFC平台上绘制图形时通常在   C   类进行实现。</li></ol><p>A． 应用程序类      B．对话框类      C．视图类       D．文档类</p><ol start="57"><li>对于同一条线段而言，Bresenham方法较DDA绘制法的效率   A   。</li></ol><p>A．高     B． 低     C． 相同      D． 没有可比性  </p><p>58．下列有关几何变换的叙述语句中，正确的论述是  C    。</p><p>A．几何变换就是把一个图形从一个位置移到别的位置</p><p>B．几何变换后图形连线次序发生改变</p><p>C．一个正方体经几何变换后可能会变成长方体</p><p>D．几何变换过程中不能让图形产生变形</p><p>59．三维空间XYZ中的图形绕Y轴的正向旋转可以被看作是在 A   绕原点O的二维旋转变换。 </p><p>A．XOY平面  B．YOZ 平面  C．ZOX 平面  D．都不是</p><p>60． 用编码裁剪算法裁剪二维线段时，若直线段两端点M、N的编码分别为1001和1011，则对该线段采用的处理方法是   C    。</p><p>A． 直接保留   B． 直接放弃  C． 对MN在求交分割  D．不能判断</p><p>61．在进行扫描线多边形区域填充时，若位于扫描线同侧的两相邻边与扫描线相交于同一点，则该点应视为   A 个交点。</p><p>  A． 1   B． 2   C． 3   D． 舍弃</p><p>62．下面哪一项不是Bezier曲线的特性   A    。</p><p>A．对称性    B．凸包性    C．局部性可调    D．几何不变性</p><p>63．在透视投影中，投影面仅与两个坐标轴相交,此透视被称为   B   点透视。</p><p>A．1   B．2    C．3   D．4 </p><p>64．下列不属于三视图范围的是      C  。</p><p>A．俯视图       B．主视图      C．正轴测图    D．侧视图</p><p>65．二次B样条曲线具有     B  导数的连续性。 </p><p>A．0阶      B．一阶      C．二阶       D．三阶</p><p>66．MFC应用程序的入口函数名是   C    。 </p><p>A．main      B．mian      C．WinMain       D．winmain</p><p>67．下列有关B样条曲线性质的说明语句中，正确的论述为   B   。</p><p>A． 一条直线与n个顶点控制的B样条曲线可有n个或更多个交点</p><p>B． B样条曲线可构造直线段和切线等特殊情况</p><p>C． 当移动B样条曲线一个顶点时，必定会对整条B样条曲线产生影响</p><p>D． B样条曲线的形状与坐标系的选择无关</p><p>68．下列关于数据的逻辑结构的叙述中，正确的是   A   。</p><p>A．数据的逻辑结构是数据间关系的描述</p><p>B．数据的逻辑结构反映了数据在计算机中的存储方式</p><p>C．数据的逻辑结构分为顺序结构和链式结构</p><p>D．数据的逻辑结构分为静态结构和动态结构</p><p>69．下列有关简单光反射模型的描述中，错误的论述为   D   。</p><p>A．漫反射光是由于表面粗糙不平引起的</p><p>B．环境光是光在物体和环境之间多次反射后最终达到平衡时的一种光</p><p>C．镜面反射光产生的高光区域只反映光源的颜色</p><p>D．该模型中必须考虑透射光</p><p>70．解算平面上5个点所确定的4段自然三次样条函数共需要   C   个附加条件。</p><p>A．1       B．2       C．3       D．4</p><p><strong>判断题：</strong></p><p>( F ) 1. 计算机生成图形时，只能用矢量法而没有其它别的方法。</p><p>( T ) 2. 简单种子填充算法中，选择的种子点必须位于待填充的区域内。 </p><p>( T ) 3. 图形学中可以用线段来近似逼近平面上的曲线。</p><p>( F  ) 4. 两空间向量v1(2，3，4)与v2(4，6，8)可唯一地确定一个平面。</p><p>(  F ) 5.由RGB颜色模型所定义的量所需存储空间是15位。</p><p>( F ) 6. 活动边表AET是多边形所有边记录链表。 </p><p>( T ) 7. 用齐次坐标表示法可以非常方便地处理平移变换。</p><p>(  T  ) 8. 一般情况下，透视投影的投影中心到投影面之间的距离是有限的。   </p><p>（ T  ）9. 由于物体表面凹凸不平而向四周均匀反射的光叫漫射光。 </p><p>（  T ）10.可以通过适当的变换将三点透视转换为一点透视。 </p><p>（  T ）11.计算机生成的直线在显示时往往呈现锯齿状，这种现象叫走样。   </p><p>（ F  ）12.在构建B样条曲线时，绝不允许出现重结点，否则将出错。</p><p>（  T  ）13.平面点P的齐次坐标为(16,6,2)，其对应的实际坐标为（8,3）。</p><p>（ T ）14.移动一个控制点时，可以调整B样条曲线的局部形状。</p><p>（ T ）15.平面上两个点是否位于某直线的同侧可用向量的叉乘进行判断。</p><p>（  F ）16.绘图仪绘制线段是笔在X,Y方向移动，画线时单方向的一次移动距离称为步矩，设备的步矩越小，绘出的图形越精确。</p><p>（  F ）17.自由曲线是一条无法用标准代数方程来描述的曲线。</p><p>曲线插值方法可使用使用高次多项式，因为次数越高，曲线越精确。</p><p>（ T ）18.三次样条曲线要求通过所有指定的数据点，但曲线的形状依赖于边界条件.</p><p>（  T ）19.曲线的形状由特征多边形的顶点Pi（i＝0，l，……，n）唯一确定，与坐标系的选取无关。这就是几何不变性，Bezier曲线的几何作图法就是一个很好的例证。</p><p>（ T ）20.区域填充就是将区域内的像素置成新的颜色值或图案。</p><p>（ T ）21.平面上的区域通常由一个封闭的轮廓来定义，处于一个封闭轮廓线内的所有像素点即构成一个区域。</p><p>（ T ）22.多边形区域填充就是将区域内的像素置成新的颜色值或图案。</p><p>（  T ）23.任何一个封闭曲线都可以用多边形来逼近。</p><p>（  T ）24.对于一个给定的多边形区域而言，显示平面上每个像素点内外特性是互相关联的，即相邻像素间具有相关属性。</p><p>（  T ）25.活动边表AET是一个只与当前扫描线相交的边记录链表。随着扫描线从一条到另一条的转换，AET表的内容也应随之变动。</p><p>（  T ）26.几何变换的规则可以用函数来表示。</p><p>（  T ）27.一般而言，复杂的图形变换都可以基本交换的适当组合来实现。</p><p>（  T ）28.对图形作几何变换，其实质是对点的几何变换。</p><p>（ T ）29.齐次坐标的应用，扩大了变换矩阵功能，只要对矩阵中有关元素赋以不同的 值，即可达到预期变换目的。</p><p>（  T ）30.组合变换顺序不能颠倒，顺序不同，则变换结果不同。</p><p>（  T ）31.裁剪就是将指定窗口作为图形边界，从一幅大的画面中抽取所需的具体信息，以显示某一局部画面或视图。</p><p>（ T ）32.裁剪实质上是从数据集合中抽取信息的过程。</p><p>（  T ）33.视图区（视图Viewport），是在屏幕上定义的一个小于或等于屏幕区域一个矩形块。</p><p>（  T ）34.窗口—视图变换是比例变换和平移变换的组合变换。</p><p>（ F ）35.中点分割裁剪法也叫最远（或近）的可见点算法。</p><p>（  T ）36.线段裁剪确良的多边形裁剪的基础。</p><p>（ T ）37.裁剪多边形要解决两个问题。其一是一个完整的封闭多边形经裁剪后一般不再是封闭的，需要用窗口边界适当部分来封闭它。其二是矩形窗口的四个角点在裁剪中是否要与其它交点连线。</p><p>（ T ）38.计算机图形学中，可以用曲线网格来近似地表示自由曲面。</p><p>（ T ）39.在产生一张自由曲面时，可以利用一系列的纵横交错且相互平行的样条曲线来构造。</p><p>（ T ）40.在空间解析几何中，三维空间内一张任意曲面片用两个参数曲面矢量方程或参数方程表示。</p><p>（  T ）41.在三维空间里，给定(n＋l)×(m+1)个空间点,可生成n×m次参数曲面。</p><p>（ F ）42.双二次Bezier曲面由四条抛物线段包围而，中间的一个顶点的变化对边界曲线不产生影响，这意味着在周边八点不变的情况下，适当选择中心顶点的位置可以控制曲面凹凸，这种控制方式是极其直观的，而且极其简易。</p><p>（ T ）43.双三次Bezier曲面中间的四个顶点的变化对边界曲线不产生影响，但影响曲面片的形状。</p><p>（  T ）44.NURBS曲面拥有非常良好的性质，目前已经成为曲面造型中最为广泛应用的技术。</p><p>（  T ）45.三维图形几何变换后仍然是三维图形。</p><p>（  T ）46. 三维图形旋转变换前后立体的大小和形状不发生变化，只是空间位置相对原位置发生了变化。</p><p>（ T ）47.通常图形输出设备（显示器、绘图仪等）都是二维的，用这些二维设备来输出三维图形，就得把三维坐标系下图形上各点的坐标转化为某一平面坐标系下的二维坐标。</p><p>（  T ）48.把三维物体用二维图形表示的过程称为三维投影变换。</p><p>（  T ）49.斜轴测投影是先将立体沿两个方向产生错切，再向投影面作正投影而得到。</p><p>（ T ）50.透视图是一种将三维物体用二维平面来表达的立体图。</p><p>（ T ）51. 将立体上各点与视点相连所得到的投影线分别与投影面相交，其交点就是立体上相应点的透视投影，再将其依次相连，即获得具有真实立体感的透视图。</p><p>（ F ）52.透视变换是将空间中的物体透视成空间中的另一物体，然后再把这一物体形投影到一个平面上，从而得到透视投影图。</p><p>（  F ）53.透视投影是透视变换与平行投影变换的组合。</p><p>（ T ）54.当视点位于Y轴上时,Y轴上的无限远点［0 1 0 0］进行透视变换后成为有限远点［0 l／q 0 1］。由此可以证明，原来平行于X轴和Z轴直线变换后仍平行于对应坐标轴，但原与Y轴平行直线，透视变换后不再与Y轴平行，而是汇交于Y轴上一点（0，1／q，0） ，该点称为透视的灭点。</p><p>（ T ）55.三点透视: 投影面α与X、Y、Z轴均有交点。三点透视可转换为一点透视进行计算。</p><p>（  T ）56.透视投影符合人类的生理机制，即离视点近的物体大，离视点远的物体小，远到极点即为消失，成为灭点。</p><p>（ T ）57.一个物体离观察点越远，那么它越有可能被其他物体所遮挡。</p><p>（ T ）58.物体空间算法有比较高的精度，生成的图形即使放大一定倍数后仍有令人满意的观感，因此在比较精密的对象显示方面有较多的应用。</p><p>（ T ）59.图像空间的算法在精度上不及前者，它最多到屏幕分辨率时就无法再提高精度，但计算效率较高，因为在图像空间中各种相关性可以得到充分应用，所以也有许多方法是在图像空间中实现的。</p><p>（ T ）60.背面消除算法不是一个完整的隐面消除方法，但它是隐面消除算法中的关键部分。</p><p>（ T ）61.凸多面体是指连接形体上不属于同一表面的任意两点的线段完全位于形体的内部的形体。</p><p>（ T ）62.若点A、B、C三个点中的任意两点所构成的两个向量的叉乘为0，则三点共线。</p><p>（ F ）63.根据三角形面积的坐标表示法所得到的面积的符号可判别顶点的排列顺序，若符号为正是逆序排列，为负则为顺序排列。</p><p>（ T ）64.场景坐标系通常是右手坐标系。</p><p>（ F ）65.观察坐标系通常是左手坐标系。</p><p>（ T ）66.镜面反射光与物体颜色无关，即镜面反射光产生的高光区域只反映光源的颜色。</p><p>（ T ）67.阴影是指景物中没有被光源直接照射的暗区。</p><p>（ T ）68. 纹理：物体表面的细节，分颜色纹理和几何纹理。</p><p>（ T ）69. 颜色纹理：指光滑表面上附加花纹和图案</p><p>（ T ）70. 几何纹理：景物表面微观上呈现的起伏不平；</p><p>(  T ) 71. 一般而言，矢量图所需要的存储空间要比位图小得多。</p><p>(  T ) 72. 若生成的曲线必须通过给定的每个型值点，这种生成曲线的方法叫插值法。</p><p>(  T ) 73. 用射线与多边形边界的交点个数可判数一个点是否是该多边形的内点。</p><p>(  T ) 74. 一般情况下,两个空间三维向量v1与v2的叉积是一个新的向量。</p><p>(  T ) 75. 在视点坐标系中，视点是原点O(0，0，0)，投影面经过点V(0，1，1)，则与OV垂直的投影面方程是y+z-1&#x3D;0。</p><p>( T ) 76. 齐次坐标表示法可以在计算机中表示无穷远点。</p><p>( T ) 77. 可以用梯形法来计算机平面多边形的面积。</p><p>( F ) 78. 在进行扫描线多边形区域填充时，通常需要构建边结点，边结点的数据结构一般有包含该边斜率信息在内的4个域。</p><p>( T ) 79. 由于物体表面的粗糙因素造成入射光向周围均匀反射的光叫环境光。</p><p>( F ) 80.给定平面上4个不同点可以生成一段4次贝塞尔曲线。</p><p>( T ) 81. Windows经经常用句柄（Handle）来标识对象。 </p><p>( T ) 82.基于单文档的MFC应用程序会自动生成包括应用程序类在内的基本类。</p><p>( T ) 83.C++中类的析构函数可完成一些清理性的任务。</p><p>( T ) 84.Z_Buffer算法是一种消隐算法。 </p><p>(  T ) 85.复杂变换通常可以用一系列的基本变换的组合来实现。</p><p>(  T ) 86. 颜色纹理用纹理映射来处理，几何纹理用扰动函数来描述。</p><p>(  T ) 87.图形显示器是由一个个排列有序的像素所构成，画一条直线实际上</p><p>是根据一系列计算出来并与该线靠近的像素而绘制。</p><p>Phong光照明模型中，反射光是由哪几部分组成的？</p><p>答：环境光（Ambient Light）：环境光模拟了场景中所有物体都会接收到的间接光照，即使它们没有被直接的光源照射。这种光照通常用来提供场景的基本亮度，使得物体即使在阴影中也能被看到。</p><p>漫反射光（Diffuse Light）：漫反射光模拟了光线照射到粗糙表面时向各个方向散射的现象。这种光照取决于物体表面的材质属性（如漫反射系数）和光线与表面法线之间的角度。漫反射光照使得物体表面看起来均匀受光，并且颜色取决于物体材质的颜色。</p><p>镜面反射光（Specular Light）：镜面反射光模拟了光线照射到光滑表面时反射的现象。这种光照产生高光（specular highlights），其强度和位置取决于光源、观察者、物体表面法线以及表面材质的镜面反射系数。镜面反射光照使得物体表面看起来有光泽，并且高光的亮度随着观察角度的变化而变化。</p><p>问题：什么是正轴测投影变换？</p><p>答案：正轴测投影变换是一种将三维物体投影到二维平面上的方法，它保持了物体各个轴之间的比例关系。在正轴测投影中，投影线（光线）与投影面（通常是二维平面）垂直，且投影线与物体的三个主要坐标轴（通常是x、y、z轴）成相同的夹角。这种投影方法通常用于工程制图和计算机图形学中，因为它可以提供一个物体的三维视图，同时保持各个方向的比例一致。</p><p>正轴测投影可以进一步分为几种类型，包括：</p><ol><li><p>正等测投影（Isometric Projection）：在正等测投影中，三个轴之间的夹角都是120度，且每个轴的长度在投影中都被缩短到原始长度的√2&#x2F;2倍（大约是原始长度的70.7%）。这种投影保持了三个轴之间的比例关系，使得物体在二维视图上看起来是等比例的。</p></li><li><p>正二测投影（Dimetric Projection）：在正二测投影中，两个轴之间的夹角是120度，而第三个轴与这两个轴的夹角不同。这种投影保持了两个轴之间的比例关系，但第三个轴的比例可能不同。</p></li><li><p>正三测投影（Trimetric Projection）：在正三测投影中，三个轴之间的夹角都不相同，且每个轴的长度在投影中都被缩短到不同的比例。这种投影不保持任何轴之间的比例关系，因此物体的形状在二维视图上可能看起来有些扭曲。</p></li></ol><p>正轴测投影变换在工程制图中非常有用，因为它可以提供一个清晰的、易于理解的物体三维视图，同时避免了透视投影中由于距离造成的尺寸变化。在计算机图形学中，正轴测投影也用于创建技术图和概念设计图，因为它可以提供一种直观的方式来展示物体的三维结构。</p><p>问题：背面消除算法的基本步骤。</p><p>答案：</p><p>1.确定多边形的法线： 对于每个多边形，计算其法线向量。法线向量是垂直于多边形平面的向量，可以通过取多边形上两个非共线边的叉积来得到。</p><p>2.计算观察者到多边形的向量： 确定观察者的位置（通常为摄像机位置），并计算从观察者位置到多边形中心的向量。</p><p>3.计算法线与观察者向量的点积： 将多边形的法线向量与观察者到多边形中心的向量进行点积运算。点积的结果是一个标量，表示两个向量的夹角的余弦值。</p><p>4.判断多边形的可见性：</p><p>如果点积结果大于0，则表示法线向量与观察者向量之间的夹角小于90度，即多边形面向观察者，因此是可见的。</p><p>如果点积结果小于或等于0，则表示法线向量与观察者向量之间的夹角大于或等于90度，即多边形背向观察者，因此是不可见的。</p><p>5.消除背面多边形： 对于那些被判定为不可见的多边形，跳过它们的渲染过程，不进行进一步的绘制操作。</p><p>6.渲染可见多边形： 对于那些被判定为可见的多边形，继续进行渲染过程，包括光照计算、纹理映射等。</p><p>请写出扫描线多边形区域填充的算法过程。</p><p>答案：<strong>预处理多边形，构建活动边表（<strong><strong>AET</strong></strong>），扫描线遍历，处理活动边表，更新活动边表，重复步骤<strong><strong>3-5</strong></strong>，结束</strong></p><p>三次贝塞尔曲线段的有关计算</p><p>答：</p><p>二维、三维几何变换</p><p>答：</p><p>二维几何变换：</p><p>平移变换：将图形沿着x轴和y轴移动一定的距离</p><p>旋转变换：围绕原点或任意点旋转图形</p><p>缩放变换：放大或缩小图形。</p><p>剪切变换：沿x轴或y轴方向倾斜图形</p><p>反射变换：沿x轴或y轴翻转图形</p><p>三位几何变换：</p><p>平移变换：将图形沿着x轴、y轴和z轴移动。</p><p>旋转变换：将图形沿着x轴、y轴和z轴移动。</p><p>缩放变换：放大或缩小图形</p><p>剪切变换：将图形沿着x轴、y轴和z轴移动。</p><p>反射变换：沿x轴、y轴或z轴翻转图形。</p><p>DDA、逐点比较法画直线段</p><p>答：</p><p>DDA步骤：</p><p><img src="clip_image002-1719382350883-1.png" alt="屏幕截图 2024-06-13 115224"></p><p>逐点比较法;</p><p><img src="clip_image004-1719382350883-2.png" alt="屏幕截图 2024-06-13 115634"></p><p><strong>已知平面四点依次是P0(0,0)，P1(1,1)，P2(2,1)，P3(3,0)。用其作为特征多边形P0P1P2P3来构造一条三次贝塞尔曲线段，请写出该曲线的参数化表达式，并分别计算参数为1、2&#x2F;3时曲线上点的值。</strong></p><p><strong>答：表达式：<img src="clip_image005-1719382350884-5.png" alt="屏幕截图 2024-06-13 120039"></strong></p><p><strong>计算<img src="clip_image007-1719382350884-3.png" alt="屏幕截图 2024-06-13 120154"></strong></p><p><strong>简述Gouraud双线性插值算法的基本步骤。</strong></p><p><strong>答：</strong>1.顶点着色：首先，为多边形的每个顶点分配颜色值。</p><p>2.计算边上的颜色梯度：对于多边形的每条边，计算两个顶点之间的颜色梯度，即颜色变化率。</p><p>3.线性插值：沿着每条边，根据参数 𝑡（通常是从0到1的值，表示从一个顶点到另一个顶点的位置），使用线性插值计算边上的每个点的颜色。</p><p>4.填充多边形：使用扫描线算法填充多边形内部。对于扫描线上的每个点，根据该点所在的水平位置，使用相邻边的颜色插值结果来计算该点的颜色。</p><p><strong>如下图所示三角形ABC，将其关于A点顺时针旋转2700，写出其变换矩阵和变换后图形各点的坐标。</strong></p><p><img src="clip_image009-1719382350884-4.png" alt="img"></p><p><strong>简述计算机图形的分类及其特点</strong><strong>:</strong></p><p>计算机图形主要分为两大类：基于线条信息的图形和真实感图形。</p><p>基于线条信息的图形：</p><p>特点：这类图形主要使用线条来表示物体的轮廓和结构，例如工程图、等高线地图、曲面的线框图等。</p><p>应用：常用于工程设计和地理信息系统等领域，强调物体的结构和几何形状。</p><p>真实感图形：</p><p>特点：这类图形通过模拟光线在物体表面的反射、折射、散射等现象，来创建具有真实感的图像。它们通常包含明暗、纹理、阴影等细节。</p><p>应用：广泛应用于电影、游戏、虚拟现实等领域，用于创建逼真的视觉效果。</p><p>计算机图形的这两类各有特点，基于线条信息的图形强调结构和轮廓，而真实感图形则注重图像的真实性和细节。</p><p>问题：请写出多边形区域填充的算法过程:</p><p>1.<strong>多边形表示</strong>：</p><p>使用顶点列表来表示多边形，每个顶点包含其坐标（x, y）。</p><p>2.<strong>排序顶点</strong>：</p><p>将多边形的顶点按照y坐标进行排序，如果y坐标相同，则按照x坐标排序。</p><p>3.<strong>扫描线处理</strong>：</p><p>从y坐标最小的顶点开始，沿着y轴向上扫描。</p><p>对于每条扫描线，找到与该扫描线相交的所有多边形边。</p><p>这些边将扫描线分成若干个区间，每个区间对应多边形内部的一个水平线段。</p><p>4.<strong>边表（ET）和活动边表（AET）</strong>：</p><p>创建边表（Edge Table, ET），用于存储每条扫描线与多边形边相交的信息。</p><p>创建活动边表（Active Edge Table, AET），用于存储当前扫描线上的所有活动边。</p><p>5.<strong>处理交点</strong>：</p><p>对于每条扫描线，将所有与扫描线相交的边的交点按x坐标排序。</p><p>将交点添加到AET中，并更新ET中的边信息。</p><p>6.<strong>填充像素</strong>：</p><p>对于AET中的每一对相邻交点，填充它们之间的所有像素点。</p><p>如果多边形是闭合的，则不需要考虑交点的奇偶性；如果不是闭合的，则只填充交点为奇数个的区间。</p><p>7.<strong>更新AET</strong>：</p><p>在填充完一个区间后，更新AET，移除已经离开扫描线的边，并添加新的进入扫描线的边。</p><p>8.<strong>重复步骤</strong>：</p><p>重复步骤3到7，直到处理完所有扫描线。</p><p>9.<strong>结束</strong>：</p><p>当所有扫描线都处理完毕后，多边形填充完成。</p><p><strong>在如下图所示的坐标系中，有一空间点A绕直线L旋转θ角后到点B，试分析利用基本的平移及旋转矩阵解算B点位置的步骤。</strong></p><p><img src="image-20240705232433572.png" alt="image-20240705232433572"></p><p><img src="image-20240705232446420.png" alt="image-20240705232446420"></p><p>写出逐点比较法画线算法的原理,并编写从点（20，10）到点（60，20）的C程序。</p><p>写出DDA画直线算法的原理，并写出实现该算法的C程序</p><p><img src="clip_image015-1719382350884-8.png" alt="屏幕截图 2024-06-13 171637"><img src="clip_image017-1719382350884-9.png" alt="屏幕截图 2024-06-13 171714"></p><p>写出扫描线种子填充算法的步骤</p><p>答：</p><p>1.初始化种子点：首先，选择一个种子点作为填充过程的起点。这个种子位于需要填充的区域内部。</p><p>2.填充种子点所在的扫描线：从种子点开始，向左和向右填充种子点所在的扫描线上的像素，直到遇到边界像素。</p><p>3.记录填充区域的边界：在填充过程中，记录下填充区域的左边界和右边界，这些边界是填充过程中遇到的第一个非填充像素。</p><p>4.检查相邻的扫描线：对于当前扫描线上的填充区域，检查与它相邻的上一个扫描线和下一个扫描线。在相邻的扫描线上，从记录的左边界开始向右搜索，直到遇到边界像素或已填充的像素。</p><p>5.找到新的种子点：如果在相邻的扫描线上找到了未填充的像素，那么这个像素将成为新的种子点。将这个种子点压入一个栈中，用于后续的填充过程。</p><p>6.重复填充过程：重复步骤4和步骤5，直到栈为空，即所有的种子点都已经处理完毕。</p><p>7.结束填充：当栈为空时，填充过程结束。</p><p>试推导在笛卡尔坐标系中，空间点A（x,y,z）绕Z轴旋转θ角的旋转矩阵.</p><p>什么是正轴测投影变换？试推导正轴测投影变换的变换矩阵</p><p>写出贝塞尔曲面的定义及其矩阵表示形式</p><p>简述三维投影变换分类</p><p>写出Z_Buffer算法的基本步骤.</p><p>Phong光照明模型中，反射光是由哪几部分组成的？写出Phong模型的表达形式.</p><p>组成：</p><ol><li>环境光反射（Ambient Reflection）：这是由环境光引起的均匀照明，它模拟了光线在场景中多次反射后形成的柔和光线。环境光反射不依赖于光源的位置和方向。</li><li>漫反射（Diffuse Reflection）：这是由光源直接照射在物体表面后，由于表面粗糙不平而向各个方向散射的光线。漫反射光的强度与光源的位置和方向有关，但与观察者的位置无关。</li></ol><p>3.镜面反射（Specular Reflection）：这是由光源直接照射在物体表面后，由于表面光滑而向特定方向反射的光线。镜面反射光的强度与光源的位置、观察者的位置以及物体表面的光滑程度有关。</p><p>表达形式：<img src="clip_image019-1719382350884-10.png" alt="屏幕截图 2024-06-13 172531"></p>]]></content>
    
    
    <categories>
      
      <category>学校课程</category>
      
      <category>复习题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>复习题</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>算法设计复习题</title>
    <link href="/post/0194fff0752e/"/>
    <url>/post/0194fff0752e/</url>
    
    <content type="html"><![CDATA[<h3 id="第1章-算法概述"><a href="#第1章-算法概述" class="headerlink" title="第1章 算法概述"></a>第1章 算法概述</h3><h4 id="算法的概念及性质"><a href="#算法的概念及性质" class="headerlink" title="算法的概念及性质"></a>算法的概念及性质</h4><p>算法是解决问题的一系列清晰指令的有限序列，具有输入、输出和明确定义的操作步骤。算法应具备正确性、可行性、确定性和有穷性等性质。</p><h4 id="程序的概念"><a href="#程序的概念" class="headerlink" title="程序的概念"></a>程序的概念</h4><p>程序是由编程语言编写的一组指令，用于实现特定功能或解决特定问题的计算机软件。</p><h4 id="算法举例"><a href="#算法举例" class="headerlink" title="算法举例"></a>算法举例</h4><ul><li><strong>调度问题</strong>：如作业调度、任务分配等问题。</li><li><strong>排序算法</strong>：如冒泡排序、快速排序、归并排序等。</li></ul><h4 id="P类问题、NP类问题概念"><a href="#P类问题、NP类问题概念" class="headerlink" title="P类问题、NP类问题概念"></a>P类问题、NP类问题概念</h4><ul><li><strong>P类问题</strong>：指在多项式时间内可解决的问题。</li><li><strong>NP类问题</strong>：指可以在多项式时间内验证解的问题。NP问题不一定可以在多项式时间内求解。</li></ul><h4 id="算法复杂性的概念"><a href="#算法复杂性的概念" class="headerlink" title="算法复杂性的概念"></a>算法复杂性的概念</h4><p>算法复杂性描述了算法在解决问题时所需的计算资源。主要包括时间复杂性和空间复杂性两个方面。</p><h4 id="时间复杂性的分析"><a href="#时间复杂性的分析" class="headerlink" title="时间复杂性的分析"></a>时间复杂性的分析</h4><p>时间复杂性是指算法运行所需时间的度量，通常用大O记号来表示。常见的时间复杂度包括O(1)、O(log n)、O(n)、O(n log n)、O(n^2)等。</p><h4 id="常见的算法复杂度的大O阶"><a href="#常见的算法复杂度的大O阶" class="headerlink" title="常见的算法复杂度的大O阶"></a>常见的算法复杂度的大O阶</h4><ul><li>**O(1)**：常数时间复杂度，如哈希表的插入和查找操作。</li><li>**O(log n)**：对数时间复杂度，如二分查找。</li><li>**O(n)**：线性时间复杂度，如简单查找。</li><li>**O(n log n)**：如快速排序、归并排序等。</li><li>**O(n^2)**：平方时间复杂度，如冒泡排序、插入排序等。</li><li><h2 id="O-1-O-logn-O-n-O-nlogn-O-n-2-O-2-n-O-n"><a href="#O-1-O-logn-O-n-O-nlogn-O-n-2-O-2-n-O-n" class="headerlink" title="O(1) &lt; O(logn) &lt; O(n) &lt; O(nlogn) &lt; O(n^2) &lt; O(2^n) &lt; O(n!)"></a><strong><code>O(1) &lt; O(logn) &lt; O(n) &lt; O(nlogn) &lt; O(n^2) &lt; O(2^n) &lt; O(n!)</code></strong></h2></li></ul><h4 id="h函数的渐进表达式计算"><a href="#h函数的渐进表达式计算" class="headerlink" title="h函数的渐进表达式计算"></a>h函数的渐进表达式计算</h4><p>函数的渐进表达式用来描述函数在自变量趋向于无穷大时的增长趋势。常见的有O大O、Ω大Omega、Θ大Theta等。</p><p>希望这些回答能帮到你！如有其他问题，请继续提问。</p><h3 id="第2章-递归与分治"><a href="#第2章-递归与分治" class="headerlink" title="第2章 递归与分治"></a>第2章 递归与分治</h3><h4 id="递归的概念"><a href="#递归的概念" class="headerlink" title="递归的概念"></a>递归的概念</h4><p>递归是指一个函数在定义中调用自身的过程。递归函数通常包括两部分：基本情况（递归的结束条件）和递归情况（调用自身以解决更小的子问题）。</p><h4 id="递归方程求解"><a href="#递归方程求解" class="headerlink" title="递归方程求解"></a>递归方程求解</h4><p>递归方程用来描述递归算法的时间复杂度。通常通过递推关系式来表示，可以使用递归树或主定理来求解复杂度。</p><h4 id="经典递归实例"><a href="#经典递归实例" class="headerlink" title="经典递归实例"></a>经典递归实例</h4><ul><li><strong>求和</strong>：例如计算1到n的和。</li><li><strong>求阶乘</strong>：如计算n的阶乘，即n!。</li><li><strong>Fibonacci数列</strong>：例如计算第n个斐波那契数。</li><li><strong>整数划分问题</strong>：例如将整数n划分成若干个整数的和。</li><li><strong>汉诺塔问题</strong>：经典的递归问题，将圆盘从一根柱子移动到另一根柱子，要求小圆盘必须在大圆盘上方。</li></ul><h4 id="递归的特点及优缺点"><a href="#递归的特点及优缺点" class="headerlink" title="递归的特点及优缺点"></a>递归的特点及优缺点</h4><p><strong>特点：</strong></p><ul><li>简洁、直观，能够简化问题的表达和解决。</li><li>适用于问题的分而治之，能够自然地描述一些具有递归结构的问题。</li></ul><p><strong>优点：</strong></p><ul><li>简化复杂问题，使问题更易理解和实现。</li><li>有助于实现分治策略，使问题的分解和解决更加自然和高效。</li></ul><p><strong>缺点：</strong></p><ul><li>可能会导致堆栈溢出的问题，尤其是在递归层数很深时。</li><li>可能存在重复计算，效率较低。</li></ul><h4 id="分治法的基本思想"><a href="#分治法的基本思想" class="headerlink" title="分治法的基本思想"></a>分治法的基本思想</h4><p>分治法将原问题分解成若干个规模较小但结构与原问题相似的子问题，递归地求解这些子问题，然后合并子问题的解来得到原问题的解。</p><h4 id="分治法实例"><a href="#分治法实例" class="headerlink" title="分治法实例"></a>分治法实例</h4><ul><li><strong>二分搜索算法</strong>：在有序数组中查找特定元素。</li><li><strong>合并排序（Merge Sort）</strong>：将数组分成两半，分别排序后再合并。</li><li><strong>快速排序（Quick Sort）</strong>：选取一个基准元素，将数组分为比基准元素小和比基准元素大的两部分，然后递归地对这两部分进行排序。</li></ul><h2 id="第3章-动态规划"><a href="#第3章-动态规划" class="headerlink" title="第3章 动态规划"></a>第3章 动态规划</h2><h3 id="动态规划总体思想"><a href="#动态规划总体思想" class="headerlink" title="动态规划总体思想"></a>动态规划总体思想</h3><p>动态规划（Dynamic Programming，简称DP）是一种通过将复杂问题拆分为更简单的子问题，并存储其子问题的解，以避免重复计算，从而提高效率的算法设计方法。它通常用于解决具有重叠子问题和最优子结构性质的问题。</p><ol><li><strong>重叠子问题（Overlapping Subproblems）</strong>：原问题可以分解为多个子问题，这些子问题会重复出现。</li><li><strong>最优子结构（Optimal Substructure）</strong>：原问题的最优解可以通过其子问题的最优解构造得到。</li></ol><h3 id="动态规划基本步骤"><a href="#动态规划基本步骤" class="headerlink" title="动态规划基本步骤"></a>动态规划基本步骤</h3><ol><li><strong>定义子问题</strong>：明确要解决的子问题是什么，把一个大问题分解成若干个相同类型的小问题。</li><li><strong>确定状态（State）</strong>：用一个数组或表格来表示每个子问题的解。</li><li><strong>设置边界条件（Initialization）</strong>：初始化最简单的子问题的解。</li><li><strong>状态转移方程（Recurrence Relation）</strong>：找到子问题和原问题之间的递推关系。</li><li><strong>计算结果</strong>：根据状态转移方程，迭代计算每个子问题的解，最终得到原问题的解。</li></ol><h3 id="动态规划基本要素"><a href="#动态规划基本要素" class="headerlink" title="动态规划基本要素"></a>动态规划基本要素</h3><ol><li><strong>状态定义</strong>：描述一个子问题的解，例如 <code>dp[i]</code> 表示前 i 个元素的某种状态。</li><li><strong>状态转移方程</strong>：描述如何从一个状态转移到另一个状态，例如 <code>dp[i] = dp[i-1] + something</code>。</li><li><strong>初始状态和边界条件</strong>：为递推提供基础，例如 <code>dp[0] = 0</code> 或其他初始值。</li><li><strong>计算顺序</strong>：根据状态转移方程的依赖关系，通常是从小到大的顺序计算。</li></ol><h3 id="动态规划实例"><a href="#动态规划实例" class="headerlink" title="动态规划实例"></a>动态规划实例</h3><h4 id="1-最长公共子序列（Longest-Common-Subsequence-LCS）"><a href="#1-最长公共子序列（Longest-Common-Subsequence-LCS）" class="headerlink" title="1. 最长公共子序列（Longest Common Subsequence, LCS）"></a>1. 最长公共子序列（Longest Common Subsequence, LCS）</h4><p><strong>问题描述</strong>：给定两个字符串，找到它们的最长公共子序列的长度。</p><p><strong>状态定义</strong>：<code>dp[i][j]</code> 表示字符串 A 的前 i 个字符和字符串 B 的前 j 个字符的最长公共子序列的长度。</p><p><strong>状态转移方程</strong>：</p><ul><li>如果 <code>A[i-1] == B[j-1]</code>，则 <code>dp[i][j] = dp[i-1][j-1] + 1</code></li><li>否则，<code>dp[i][j] = max(dp[i-1][j], dp[i][j-1])</code></li></ul><p><strong>初始化</strong>：<code>dp[0][j] = 0</code> 和 <code>dp[i][0] = 0</code>，因为任何字符串和空字符串的最长公共子序列长度都是 0。</p><h4 id="2-最大子段和问题（Maximum-Subarray-Sum）"><a href="#2-最大子段和问题（Maximum-Subarray-Sum）" class="headerlink" title="2. 最大子段和问题（Maximum Subarray Sum）"></a>2. 最大子段和问题（Maximum Subarray Sum）</h4><p><strong>问题描述</strong>：给定一个整数数组，找到具有最大和的连续子数组，并返回其最大和。</p><p><strong>状态定义</strong>：<code>dp[i]</code> 表示以第 i 个元素结尾的最大子数组和。</p><p><strong>状态转移方程</strong>：</p><ul><li><code>dp[i] = max(nums[i], dp[i-1] + nums[i])</code></li></ul><p><strong>初始化</strong>：<code>dp[0] = nums[0]</code>，因为只有一个元素时，最大子数组和就是该元素本身。</p><h4 id="3-0-1-背包问题（0-1-Knapsack-Problem）"><a href="#3-0-1-背包问题（0-1-Knapsack-Problem）" class="headerlink" title="3. 0-1 背包问题（0-1 Knapsack Problem）"></a>3. 0-1 背包问题（0-1 Knapsack Problem）</h4><p><strong>问题描述</strong>：给定一个容量为 W 的背包和一组物品，每个物品有重量和价值，求解如何选择物品使得总价值最大且总重量不超过背包容量。</p><p><strong>状态定义</strong>：<code>dp[i][w]</code> 表示前 i 个物品在总重量不超过 w 时的最大价值。</p><p><strong>状态转移方程</strong>：</p><ul><li>如果不选第 i 个物品：<code>dp[i][w] = dp[i-1][w]</code></li><li>如果选第 i 个物品：<code>dp[i][w] = dp[i-1][w-weight[i]] + value[i]</code></li><li>综合起来：<code>dp[i][w] = max(dp[i-1][w], dp[i-1][w-weight[i]] + value[i])</code></li></ul><p><strong>初始化</strong>：<code>dp[0][w] = 0</code> 对所有 w，因为没有物品时，价值为 0。</p><p>这些实例展示了动态规划在不同领域中的应用，通过定义状态、确定转移方程以及初始化，可以有效地解决许多复杂问题。</p><h3 id="第4章-贪心算法"><a href="#第4章-贪心算法" class="headerlink" title="第4章 贪心算法"></a>第4章 贪心算法</h3><h4 id="贪心算法的概念"><a href="#贪心算法的概念" class="headerlink" title="贪心算法的概念"></a>贪心算法的概念</h4><p>贪心算法（Greedy Algorithm）是一种在每一步选择中都采取在当前状态下最好或最优的选择，以期望通过局部最优解达到全局最优解的算法设计方法。贪心算法不一定能保证求得全局最优解，但对于某些特定问题，它可以提供高效且正确的解。</p><h4 id="用贪心算法求解的问题需具备的两个基本要素"><a href="#用贪心算法求解的问题需具备的两个基本要素" class="headerlink" title="用贪心算法求解的问题需具备的两个基本要素"></a>用贪心算法求解的问题需具备的两个基本要素</h4><ol><li><strong>贪心选择性质（Greedy Choice Property）</strong>：在当前步骤中，选择局部最优解不会影响到后续的选择能够构成全局最优解。这意味着可以通过局部最优策略来构建全局最优解。</li><li><strong>最优子结构性质（Optimal Substructure）</strong>：一个问题的全局最优解包含其子问题的全局最优解。也就是说，问题的最优解可以由其子问题的最优解递归地构建出来。</li></ol><h4 id="贪心算法与动态规划算法的差异"><a href="#贪心算法与动态规划算法的差异" class="headerlink" title="贪心算法与动态规划算法的差异"></a>贪心算法与动态规划算法的差异</h4><ul><li><strong>选择标准</strong>：<ul><li><strong>贪心算法</strong>：在每一步选择中做出局部最优的选择，不回溯、不考虑后续可能的选择。</li><li><strong>动态规划</strong>：考虑所有可能的选择，通过比较不同选择的结果来确保全局最优解。</li></ul></li><li><strong>适用问题类型</strong>：<ul><li><strong>贪心算法</strong>：通常适用于具有贪心选择性质和最优子结构性质的问题。</li><li><strong>动态规划</strong>：适用于更广泛的问题类型，特别是那些具有重叠子问题和最优子结构性质的问题。</li></ul></li><li><strong>计算复杂度</strong>：<ul><li><strong>贪心算法</strong>：通常较简单且高效，适用于大多数实际情况。</li><li><strong>动态规划</strong>：可能需要存储子问题的解，空间和时间复杂度一般较高。</li></ul></li></ul><h4 id="贪心算法实例"><a href="#贪心算法实例" class="headerlink" title="贪心算法实例"></a>贪心算法实例</h4><h5 id="1-活动安排问题（Activity-Selection-Problem）"><a href="#1-活动安排问题（Activity-Selection-Problem）" class="headerlink" title="1. 活动安排问题（Activity Selection Problem）"></a>1. 活动安排问题（Activity Selection Problem）</h5><p><strong>问题描述</strong>：给定一组活动，每个活动有一个开始时间和结束时间。要求选择尽可能多的互不重叠的活动。</p><p><strong>贪心策略</strong>：每次选择结束时间最早且与已选活动不冲突的活动。</p><p><strong>算法描述</strong>：</p><ol><li>按照活动的结束时间从小到大排序。</li><li>选择第一个活动。</li><li>从剩余活动中选择开始时间不早于上一个选择的活动结束时间的活动。</li><li>重复步骤3直到没有可选活动。</li></ol><h5 id="2-部分背包问题（Fractional-Knapsack-Problem）"><a href="#2-部分背包问题（Fractional-Knapsack-Problem）" class="headerlink" title="2. 部分背包问题（Fractional Knapsack Problem）"></a>2. 部分背包问题（Fractional Knapsack Problem）</h5><p><strong>问题描述</strong>：给定一组物品，每个物品有重量和价值，在允许部分取物的情况下，选择装入容量为 W 的背包，使得总价值最大。</p><p><strong>贪心策略</strong>：按照单位重量的价值（value&#x2F;weight）从大到小选择物品，尽可能多地装入背包。</p><p><strong>算法描述</strong>：</p><ol><li>计算每个物品的单位重量价值，并按其从大到小排序。</li><li>依次选择物品，直到背包装满或无法再装入更多物品。</li></ol><h5 id="3-最优装载问题（Optimal-Load-Problem）"><a href="#3-最优装载问题（Optimal-Load-Problem）" class="headerlink" title="3. 最优装载问题（Optimal Load Problem）"></a>3. 最优装载问题（Optimal Load Problem）</h5><p><strong>问题描述</strong>：在一个货运航班中，如何装载货物使得总重量不超过最大承载重量且装载的货物总价值最大。</p><p><strong>贪心策略</strong>：按照单位重量的价值（value&#x2F;weight）从大到小选择货物，尽可能多地装入航班。</p><h5 id="4-哈夫曼编码（Huffman-Coding）"><a href="#4-哈夫曼编码（Huffman-Coding）" class="headerlink" title="4. 哈夫曼编码（Huffman Coding）"></a>4. 哈夫曼编码（Huffman Coding）</h5><p><strong>问题描述</strong>：给定一组字符及其对应的频率，构建一个二进制前缀码（哈夫曼码）使得编码后的字符总长度最短。</p><p><strong>贪心策略</strong>：每次选择频率最小的两个节点合并，直到所有节点合并成一棵树。</p><p><strong>算法描述</strong>：</p><ol><li>将所有字符构建成叶子节点，并按照频率构建一个优先队列。</li><li>每次从队列中取出频率最小的两个节点，合并成一个新节点，并将新节点的频率设为两个节点频率之和。</li><li>将新节点重新放入队列。</li><li>重复步骤2和3，直到队列中只剩一个节点，这个节点即为哈夫曼树的根。</li></ol><h5 id="5-最小生成树（Minimum-Spanning-Tree-MST）"><a href="#5-最小生成树（Minimum-Spanning-Tree-MST）" class="headerlink" title="5. 最小生成树（Minimum Spanning Tree, MST）"></a>5. 最小生成树（Minimum Spanning Tree, MST）</h5><p><strong>问题描述</strong>：给定一个带权无向图，找到一个树，使得树包含所有节点且边的权值和最小。</p><p><strong>常用贪心算法</strong>：Kruskal算法和Prim算法。</p><p><strong>Kruskal算法</strong>：</p><ol><li>将所有边按权重从小到大排序。</li><li>初始化一个森林（每个顶点各自为树）。</li><li>依次选择权重最小的边，若该边连接的两个顶点属于不同的树，则将其加入生成树，并合并这两个顶点所在的树。</li><li>重复步骤3，直到生成树包含所有顶点。</li></ol><p><strong>Prim算法</strong>：</p><ol><li>从任意一个顶点开始，将其标记为已访问。</li><li>在已访问顶点和未访问顶点之间选择权重最小的边，将该边和其连接的未访问顶点加入生成树。</li><li>重复步骤2，直到生成树包含所有顶点。</li></ol><h5 id="6-多机调度问题（Job-Scheduling-Problem）"><a href="#6-多机调度问题（Job-Scheduling-Problem）" class="headerlink" title="6. 多机调度问题（Job Scheduling Problem）"></a>6. 多机调度问题（Job Scheduling Problem）</h5><p><strong>问题描述</strong>：给定一组作业和多个机器，安排作业到机器上，使得所有作业完成的总时间最短。</p><p><strong>贪心策略</strong>：每次选择最短作业时间或将作业分配到当前负载最轻的机器上。</p><p><strong>算法描述</strong>：</p><ol><li>按作业时间从短到长排序。</li><li>依次将作业分配到当前负载最轻的机器上。</li></ol><p>贪心算法通过简洁有效的策略解决了许多实际问题，但并非适用于所有情况。在使用贪心算法时，需要确保问题具备贪心选择性质和最优子结构性质。</p><h1 id="试卷结构"><a href="#试卷结构" class="headerlink" title="试卷结构"></a><strong>试卷结构</strong></h1><p>试卷共4页，5大题，满分 100分， 120 分钟完卷。</p><h4 id="一、单项选择题：-每小题2分，共30分"><a href="#一、单项选择题：-每小题2分，共30分" class="headerlink" title="一、单项选择题：(每小题2分，共30分)"></a>一、<strong>单项选择题：</strong>(每小题2分，共30分)</h4><p>在下列每小题的四个备选答案中选出一个正确的答案，并将其字母标号填入下面的表格中，填入题干的括号内无效。</p><h4 id="二、判断题：-每小题1分，共10分）"><a href="#二、判断题：-每小题1分，共10分）" class="headerlink" title="二、判断题：(每小题1分，共10分）"></a>二、<strong>判断题：</strong>(每小题1分，共10分）</h4><p>以下描述正确的打“√”，错误的打“×”，并将答案填在下面的表格中。</p><h4 id="三、计算题：-每小题10分，共30分"><a href="#三、计算题：-每小题10分，共30分" class="headerlink" title="三、计算题：(每小题10分，共30分)"></a><strong>三、计算题：</strong>(每小题10分，共30分)</h4><p>函数的渐进表达式计算（递归方程求解）、解空间树（子集树或排列树）、哈夫曼编码（构造哈夫曼树及编码）</p><h4 id="四、简答题：-每小题5分，共10分"><a href="#四、简答题：-每小题5分，共10分" class="headerlink" title="四、简答题：(每小题5分，共10分)"></a>四、<strong>简答题：</strong>(每小题5分，共10分)</h4><h5 id="动态规划总体思想、基本步骤、基本要素"><a href="#动态规划总体思想、基本步骤、基本要素" class="headerlink" title="动态规划总体思想、基本步骤、基本要素"></a>动态规划总体思想、基本步骤、基本要素</h5><ul><li><p>动态规划通过将原问题分解为相对简单的子问题来解决复杂问题，通过存储子问题的解，避免重复计算，从而提高效率。其关键在于将问题分解为子问题，并确定子问题之间的递推关系，以便逐步求解原问题。</p><h3 id="基本步骤："><a href="#基本步骤：" class="headerlink" title="基本步骤："></a>基本步骤：</h3><p>（1）</p><p>（2）递归地定义最优值。 </p><p>（3）以自底向上的方式或自顶向下的记忆化方法（备忘录法）计算出最优值。 </p><p>（4）根据计算最优值时得到的信息，构造一个最优解。 </p><h3 id="基本要素："><a href="#基本要素：" class="headerlink" title="基本要素："></a>基本要素：</h3><ul><li>最优子结构</li><li>状态转移方程</li><li>边界条件</li><li>状态存储</li><li>状态压缩</li></ul></li></ul><h5 id="回溯法的概念及基本思想、应用步骤及剪枝函数"><a href="#回溯法的概念及基本思想、应用步骤及剪枝函数" class="headerlink" title="回溯法的概念及基本思想、应用步骤及剪枝函数"></a>回溯法的概念及基本思想、应用步骤及剪枝函数</h5><p>概念：回溯法（Backtracking）是一种通过试探所有可能的解来求解问题的算法</p><p>基本思想：逐步构建问题的解决方案，并在搜索过程中进行选择和回退，直到找到解或确定问题无解为止</p><p>应用步骤：</p><ul><li>定义问题1</li><li>选择状态表示</li><li>编写回溯函数<ul><li>递归参数</li><li>递归终止条件</li><li>递归主体</li></ul></li><li>执行回溯搜索</li></ul><h5 id="分支限界法与回溯法的比较"><a href="#分支限界法与回溯法的比较" class="headerlink" title="分支限界法与回溯法的比较"></a>分支限界法与回溯法的比较</h5><p><strong>分支限界法与回溯法的相同点是：</strong>都是一种在问题的解空间树T中搜索问题解的算法。</p><p><strong>不同点：</strong>（1）求解目标不同； </p><p>（2）搜索方式不同； </p><p>（3）对扩展结点的扩展方式不同； </p><p>（4）存储空间的要求不同。</p><h4 id="分支限界法的基本思想、分支限界法的两种实现方式"><a href="#分支限界法的基本思想、分支限界法的两种实现方式" class="headerlink" title="分支限界法的基本思想、分支限界法的两种实现方式"></a>分支限界法的基本思想、分支限界法的两种实现方式</h4><p>基本思想：分支限界法通常以广度优先或者以最小耗费优先的方式搜索问题的解空间树</p><p>两种实现方式：</p><p>队列式分支限界法（队列式分支限界法将活结点表组织成一个队列，并按照队列先进先出的原则选取下一个结点为当前扩展结点）</p><p>优先队列式分支限界法（优先队列式的分支限界法将活结点表组织成一个优先队列，并按照优先队列中规定的结点优先级选取优先级最高的下一个结点成为当前的扩展结点）</p><h3 id="五、算法设计题：-每小题10分，共20分"><a href="#五、算法设计题：-每小题10分，共20分" class="headerlink" title="五、算法设计题：(每小题10分，共20分)"></a><strong>五、算法设计题：</strong>(每小题10分，共20分)</h3><p>最大子段和、二分搜索算法</p><h6 id="最大子段和"><a href="#最大子段和" class="headerlink" title="最大子段和"></a>最大子段和</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">maxSubArray</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums)</span> &#123;<br>    <span class="hljs-keyword">if</span> (nums == <span class="hljs-literal">null</span> || nums.length == <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <br>    <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> nums.length;<br>    <span class="hljs-type">int</span>[] dp = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[n];<br>    dp[<span class="hljs-number">0</span>] = nums[<span class="hljs-number">0</span>];<br>    <span class="hljs-type">int</span> <span class="hljs-variable">maxSum</span> <span class="hljs-operator">=</span> dp[<span class="hljs-number">0</span>];<br>    <br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt; n; i++) &#123;<br>        dp[i] = Math.max(dp[i - <span class="hljs-number">1</span>] + nums[i], nums[i]);<br>        maxSum = Math.max(maxSum, dp[i]);<br>    &#125;<br>    <br>    <span class="hljs-keyword">return</span> maxSum;<br>&#125;<br>解释：<br>dp[i] 数组用来存储以第 i 个元素结尾的最大子段和。<br>maxSum 变量用来记录 dp 数组中的最大值，即为最终的结果。<br>时间复杂度为 O(n)，空间复杂度为 O(n)，其中 n 是数组 nums 的长度。<br>这种动态规划算法在实现上简单直观，并且能够有效地解决最大子段和问题。<br></code></pre></td></tr></table></figure><h6 id="二分搜索算法"><a href="#二分搜索算法" class="headerlink" title="二分搜索算法"></a>二分搜索算法</h6><p><img src="clip_image002-1718613963237-2.png" alt="img">                                                                 </p>]]></content>
    
    
    <categories>
      
      <category>学校课程</category>
      
      <category>复习题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>复习题</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>基于AOP实现简单日志记录</title>
    <link href="/post/4771d0ae83fb/"/>
    <url>/post/4771d0ae83fb/</url>
    
    <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">package</span> org.example.springaoplog.log;<br><br><span class="hljs-keyword">import</span> com.fasterxml.jackson.core.JsonProcessingException;<br><span class="hljs-keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;<br><span class="hljs-keyword">import</span> org.aspectj.lang.ProceedingJoinPoint;<br><span class="hljs-keyword">import</span> org.aspectj.lang.annotation.Around;<br><span class="hljs-keyword">import</span> org.aspectj.lang.annotation.Aspect;<br><span class="hljs-keyword">import</span> org.aspectj.lang.annotation.Pointcut;<br><span class="hljs-keyword">import</span> org.aspectj.lang.reflect.MethodSignature;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><span class="hljs-keyword">import</span> org.springframework.util.StopWatch;<br><br><span class="hljs-keyword">import</span> javax.annotation.Resource;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> java.util.Date;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 日志切面</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> 14237</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@Aspect</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LogAspect</span> &#123;<br>    <span class="hljs-meta">@Pointcut</span> ( <span class="hljs-string">&quot;@annotation(org.example.springaoplog.log.Log)&quot;</span>)<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">pointcut</span><span class="hljs-params">()</span> &#123;&#125;<br><br>    <span class="hljs-meta">@Resource</span><br>    HttpServletRequest request;<br>    <span class="hljs-keyword">final</span> <span class="hljs-type">ObjectMapper</span> <span class="hljs-variable">mapper</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectMapper</span>();<br><br>    <span class="hljs-meta">@Around</span> ( <span class="hljs-string">&quot;pointcut()&quot;</span>)<br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">around</span><span class="hljs-params">(ProceedingJoinPoint pjp)</span> <span class="hljs-keyword">throws</span> JsonProcessingException &#123;<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">MethodSignature</span> <span class="hljs-variable">signature</span> <span class="hljs-operator">=</span> ((MethodSignature) pjp.getSignature());<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">Log</span> <span class="hljs-variable">annotation</span> <span class="hljs-operator">=</span> signature.getMethod().getAnnotation(Log.class);<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">StopWatch</span> <span class="hljs-variable">stopWatch</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StopWatch</span>();<br>        stopWatch.start();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">errorMsg</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br>        <span class="hljs-keyword">final</span> Object proceed;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            proceed = pjp.proceed();<br>            result = mapper.writeValueAsString(proceed);<span class="hljs-comment">//返回结果</span><br>            <span class="hljs-keyword">return</span> proceed;<br>        &#125; <span class="hljs-keyword">catch</span>(Throwable e) &#123;<br>            errorMsg = e.getLocalizedMessage();<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            stopWatch.stop();<br><br>            <span class="hljs-keyword">final</span> <span class="hljs-type">SysLog</span> <span class="hljs-variable">sysLog</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SysLog</span>()<br>                    .setId(<span class="hljs-literal">null</span>)<br>                    .setRequestMethod(request.getMethod())<br>                    .setName(annotation.value())<br>                    .setType(annotation.type().getValue())<br>                    .setOperator(<span class="hljs-string">&quot;sessionId: &quot;</span> + request.getSession().getId())<br>                    .setOperatingTime(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>())<br>                    .setIp(request.getRemoteHost())<br>                    .setUrl(request.getRequestURL().toString())<br>                    .setMethod(signature.toString())<br>                    .setArgs(mapper.writeValueAsString(pjp.getArgs()))<br>                    .setMillisecond(stopWatch.getTotalTimeMillis())<br>                    .setResult(result)<br>                    .setError(errorMsg);<br>            <span class="hljs-comment">//记录日志</span><br>            recordLog(sysLog);<br>        &#125;<br><br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 记录日志</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> log 日志</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">recordLog</span><span class="hljs-params">(SysLog log)</span> &#123;<br>        <span class="hljs-comment">//保存到数据库</span><br>        System.err.println(log);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example.springaoplog.log;<br><br><span class="hljs-keyword">import</span> java.lang.annotation.Retention;<br><span class="hljs-keyword">import</span> java.lang.annotation.RetentionPolicy;<br><br><span class="hljs-meta">@Retention</span> ( RetentionPolicy.RUNTIME)<br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> Log &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 日志类型</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> &#123;<span class="hljs-doctag">@link</span> LogType &#125;</span><br><span class="hljs-comment">     */</span><br>    LogType <span class="hljs-title function_">type</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> LogType.DEFAULT;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 日志名称</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> &#123;<span class="hljs-doctag">@link</span> String &#125;</span><br><span class="hljs-comment">     */</span><br>    String <span class="hljs-title function_">value</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> <span class="hljs-string">&quot;&quot;</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example.springaoplog.log;<br><br><span class="hljs-keyword">import</span> lombok.AllArgsConstructor;<br><span class="hljs-keyword">import</span> lombok.Getter;<br><br><span class="hljs-meta">@Getter</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">enum</span> <span class="hljs-title class_">LogType</span> &#123;<br>    DEFAULT(<span class="hljs-string">&quot;默认&quot;</span>),<br>    SYSTEM(<span class="hljs-string">&quot;系统日志&quot;</span>),<br>    BUSINESS(<span class="hljs-string">&quot;业务日志&quot;</span>),<br>    OPERATE(<span class="hljs-string">&quot;操作日志&quot;</span>),<br>    TEST(<span class="hljs-string">&quot;测试日志&quot;</span>);<br>    <span class="hljs-keyword">final</span> String value;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example.springaoplog.log;<br><br><span class="hljs-keyword">import</span> lombok.Data;<br><span class="hljs-keyword">import</span> lombok.experimental.Accessors;<br><br><span class="hljs-keyword">import</span> java.util.Date;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 系统日志</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> inyxin</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@Accessors</span> ( chain = <span class="hljs-literal">true</span>)<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SysLog</span> &#123;<br>    <span class="hljs-comment">/** 日志ID */</span><br>    <span class="hljs-keyword">private</span> Integer id;<br>    <span class="hljs-comment">/** 日志名字 */</span><br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-comment">/** 日志类型 */</span><br>    <span class="hljs-keyword">private</span> String type;<br>    <span class="hljs-comment">/** 请求路径 */</span><br>    <span class="hljs-keyword">private</span> String url;<br>    <span class="hljs-comment">/** 请求方式 */</span><br>    <span class="hljs-keyword">private</span> String requestMethod;<br>    <span class="hljs-comment">/** 操作者 */</span><br>    <span class="hljs-keyword">private</span> String operator;<br>    <span class="hljs-comment">/** 方法 */</span><br>    <span class="hljs-keyword">private</span> String method;<br>    <span class="hljs-comment">/** 参数 */</span><br>    <span class="hljs-keyword">private</span> String args;<br>    <span class="hljs-comment">/** 远程IP */</span><br>    <span class="hljs-keyword">private</span> String ip;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 操作时间</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> Date operatingTime;<br>    <span class="hljs-comment">/** 异常信息 */</span><br>    <span class="hljs-keyword">private</span> String error;<br>    <span class="hljs-comment">/** 结果 */</span><br>    <span class="hljs-keyword">private</span> String result;<br>    <span class="hljs-comment">/** 方法执行时间 毫秒 */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">long</span> millisecond;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><p>测试:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Copyright 2013-2018 the original author or authors.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);</span><br><span class="hljs-comment"> * you may not use this file except in compliance with the License.</span><br><span class="hljs-comment"> * You may obtain a copy of the License at</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> *      https://www.apache.org/licenses/LICENSE-2.0</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * Unless required by applicable law or agreed to in writing, software</span><br><span class="hljs-comment"> * distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span><br><span class="hljs-comment"> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span><br><span class="hljs-comment"> * See the License for the specific language governing permissions and</span><br><span class="hljs-comment"> * limitations under the License.</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">package</span> org.example.springaoplog.demos.web;<br><br><span class="hljs-keyword">import</span> org.example.springaoplog.log.Log;<br><span class="hljs-keyword">import</span> org.example.springaoplog.log.LogType;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Controller;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.ModelAttribute;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestParam;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> &lt;a href=&quot;mailto:chenxilzx1@gmail.com&quot;&gt;theonefx&lt;/a&gt;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BasicController</span> &#123;<br><br>    <span class="hljs-comment">// http://127.0.0.1:8080/hello?name=lisi</span><br>    <span class="hljs-meta">@RequestMapping</span> ( <span class="hljs-string">&quot;/hello&quot;</span>)<br>    <span class="hljs-meta">@ResponseBody</span><br>    <span class="hljs-meta">@Log</span> (<br>            value = <span class="hljs-string">&quot;Hello&quot;</span>,<br>            type = LogType.TEST<br>    )<br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">hello</span><span class="hljs-params">(</span><br><span class="hljs-params">            <span class="hljs-meta">@RequestParam</span> (</span><br><span class="hljs-params">                    name = <span class="hljs-string">&quot;name&quot;</span>,</span><br><span class="hljs-params">                    defaultValue = <span class="hljs-string">&quot;unknown user&quot;</span></span><br><span class="hljs-params">            )</span> String name) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Hello &quot;</span> + name;<br>    &#125;<br><br>    <span class="hljs-comment">// http://127.0.0.1:8080/errortest</span><br>    <span class="hljs-meta">@RequestMapping</span> ( <span class="hljs-string">&quot;/errortest&quot;</span>)<br>    <span class="hljs-meta">@ResponseBody</span><br>    <span class="hljs-meta">@Log</span> (<br>            value = <span class="hljs-string">&quot;异常测试&quot;</span>,<br>            type = LogType.TEST<br>    )<br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">errortest</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-number">1</span> / <span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;12321&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// http://127.0.0.1:8080/user</span><br>    <span class="hljs-meta">@RequestMapping</span> ( <span class="hljs-string">&quot;/user&quot;</span>)<br>    <span class="hljs-meta">@ResponseBody</span><br>    <span class="hljs-meta">@Log</span> ( value = <span class="hljs-string">&quot;查询用户&quot;</span>)<br>    <span class="hljs-keyword">public</span> User <span class="hljs-title function_">user</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br>        user.setName(<span class="hljs-string">&quot;theonefx&quot;</span>);<br>        user.setAge(<span class="hljs-number">666</span>);<br>        <span class="hljs-keyword">return</span> user;<br>    &#125;<br><br><br>    <span class="hljs-comment">// http://127.0.0.1:8080/save_user?name=newName&amp;age=11</span><br>    <span class="hljs-meta">@RequestMapping</span> ( <span class="hljs-string">&quot;/save_user&quot;</span>)<br>    <span class="hljs-meta">@ResponseBody</span><br>    <span class="hljs-meta">@Log</span> (<br>            value = <span class="hljs-string">&quot;保存用户&quot;</span>,<br>            type = LogType.OPERATE<br>    )<br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">saveUser</span><span class="hljs-params">(User u)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;user will save: name=&quot;</span> + u.getName() + <span class="hljs-string">&quot;, age=&quot;</span> + u.getAge();<br>    &#125;<br><br>    <span class="hljs-comment">// http://127.0.0.1:8080/html</span><br>    <span class="hljs-meta">@RequestMapping</span> ( <span class="hljs-string">&quot;/html&quot;</span>)<br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">html</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;index.html&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@ModelAttribute</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">parseUser</span><span class="hljs-params">(</span><br><span class="hljs-params">            <span class="hljs-meta">@RequestParam</span> (</span><br><span class="hljs-params">                    name = <span class="hljs-string">&quot;name&quot;</span>,</span><br><span class="hljs-params">                    defaultValue = <span class="hljs-string">&quot;unknown user&quot;</span></span><br><span class="hljs-params">            )</span> String name<br>            ,<br>            <span class="hljs-meta">@RequestParam</span> (<br>                    name = <span class="hljs-string">&quot;age&quot;</span>,<br>                    defaultValue = <span class="hljs-string">&quot;12&quot;</span><br>            ) Integer age, User user) &#123;<br>        user.setName(<span class="hljs-string">&quot;zhangsan&quot;</span>);<br>        user.setAge(<span class="hljs-number">18</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>输出:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">SysLog(id=<span class="hljs-literal">null</span>, name=查询用户, type=默认, url=http:<span class="hljs-comment">//127.0.0.1:8080/user, requestMethod=GET, operator=sessionId: 2F552A00DA410EEE3047B4AEE36927B1, method=User org.example.springaoplog.demos.web.BasicController.user(), args=[], ip=127.0.0.1, operatingTime=Fri Jun 14 10:02:11 CST 2024, error=, result=&#123;&quot;name&quot;:&quot;theonefx&quot;,&quot;age&quot;:666&#125;, millisecond=7)</span><br>SysLog(id=<span class="hljs-literal">null</span>, name=查询用户, type=默认, url=http:<span class="hljs-comment">//10.120.1.193:8080/user, requestMethod=GET, operator=sessionId: 39EA319EFCC022E1973A1C9DA452DAE2, method=User org.example.springaoplog.demos.web.BasicController.user(), args=[], ip=10.120.1.193, operatingTime=Fri Jun 14 10:06:46 CST 2024, error=, result=&#123;&quot;name&quot;:&quot;theonefx&quot;,&quot;age&quot;:666&#125;, millisecond=0)</span><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
      <category>Java</category>
      
      <category>Spring</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Aop</tag>
      
      <tag>Log</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MapStruct 对象转换框架</title>
    <link href="/post/3d9faf4a4bcd/"/>
    <url>/post/3d9faf4a4bcd/</url>
    
    <content type="html"><![CDATA[<h1 id="MapStruct-对象转换框架"><a href="#MapStruct-对象转换框架" class="headerlink" title="MapStruct 对象转换框架"></a>MapStruct 对象转换框架</h1><h2 id="导入依赖"><a href="#导入依赖" class="headerlink" title="导入依赖"></a>导入依赖</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml">        <span class="hljs-tag">&lt;<span class="hljs-name">mapstruct.version</span>&gt;</span>1.4.1.Final<span class="hljs-tag">&lt;/<span class="hljs-name">mapstruct.version</span>&gt;</span><br><br><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mapstruct<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mapstruct<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;mapstruct.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mapstruct<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mapstruct-processor<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;mapstruct.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>原理与 <code>lomback</code> 类似&#96; ,都是通过自动生成代码;</p><h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><h3 id="普通使用"><a href="#普通使用" class="headerlink" title="普通使用"></a>普通使用</h3><h5 id="定义映射接口"><a href="#定义映射接口" class="headerlink" title="定义映射接口"></a>定义映射接口</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">GoodsInfoMapper</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 无状态且线程安全</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-type">GoodsInfoMapper</span> <span class="hljs-variable">INSTANCE</span> <span class="hljs-operator">=</span> Mappers.getMapper(GoodsInfoMapper.class);<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">GoodsInfoPO</span> <span class="hljs-variable">goodsInfoPO</span> <span class="hljs-operator">=</span> GoodsInfoMapper.INSTANCE.goodsInfoDtoToPo(goodsInfoDTO);<br></code></pre></td></tr></table></figure><h3 id="在Spring中使用"><a href="#在Spring中使用" class="headerlink" title="在Spring中使用"></a>在Spring中使用</h3><h5 id="定义映射接口-1"><a href="#定义映射接口-1" class="headerlink" title="定义映射接口"></a>定义映射接口</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Mapper(componentModel = &quot;spring&quot;)</span> <span class="hljs-comment">// 设置为 spring</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">GoodsInfoMapper</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 无状态且线程安全</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-type">GoodsInfoMapper</span> <span class="hljs-variable">INSTANCE</span> <span class="hljs-operator">=</span> Mappers.getMapper(GoodsInfoMapper.class);<br>&#125;<br></code></pre></td></tr></table></figure><p>有了 <code>@Mapper(componentModel = &quot;spring)</code> 这个后.生成的实现类上会自动加上  <code>@Component</code> 注解</p><h4 id="Mapping"><a href="#Mapping" class="headerlink" title="@Mapping"></a>@Mapping</h4><p><code>@Mapping</code> 注解是 MapStruct 框架中的一个关键注解，用于定义两个 bean 之间的字段映射关系。它可以应用在 Mapper 接口的方法上，指定源（source）字段到目标（target）字段的映射关系。</p><h3 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Mapper</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">CarMapper</span> &#123;<br><br>    <span class="hljs-meta">@Mapping(source = &quot;make&quot;, target = &quot;manufacturer&quot;)</span><br>    CarDto <span class="hljs-title function_">carToCarDto</span><span class="hljs-params">(Car car)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>在上述示例中，<code>@Mapping(source = &quot;make&quot;, target = &quot;manufacturer&quot;)</code> 表示将 <code>Car</code> 对象的 <code>make</code> 字段映射到 <code>CarDto</code> 对象的 <code>manufacturer</code> 字段上。</p><h3 id="常见属性"><a href="#常见属性" class="headerlink" title="常见属性"></a>常见属性</h3><ul><li><p><strong>source</strong>：源对象的字段名。</p></li><li><p><strong>target</strong>：目标对象的字段名。</p></li><li><p><strong>qualifiedByName</strong>：通过一个命名转换器来转换字段值。</p></li><li><p><strong>defaultValue</strong>：指定目标字段的默认值。</p></li><li><p><strong>ignore</strong>：忽略某个字段，不进行映射。</p></li><li><p><strong>expression</strong>：使用 SpEL 表达式定义映射规则。</p><p><code>This attribute can not be used together with source(), defaultValue(), defaultExpression() or expression().</code></p></li></ul><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><ol><li><strong>简单映射</strong></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Mapping(source = &quot;name&quot;, target = &quot;fullName&quot;)</span><br>PersonDto <span class="hljs-title function_">personToPersonDto</span><span class="hljs-params">(Person person)</span>;<br></code></pre></td></tr></table></figure><p>这个示例将 <code>Person</code> 对象的 <code>name</code> 字段映射到 <code>PersonDto</code> 对象的 <code>fullName</code> 字段。</p><ol><li><strong>使用转换器</strong></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs jaVA"><span class="hljs-meta">@Mapping(source = &quot;birthDate&quot;, target = &quot;birthDate&quot;, dateFormat = &quot;dd-MM-yyyy&quot;)</span><br>PersonDto <span class="hljs-title function_">personToPersonDto</span><span class="hljs-params">(Person person)</span>;<br></code></pre></td></tr></table></figure><p>这个示例中，<code>dateFormat</code> 属性指定了日期格式，MapStruct 会自动将 <code>Person</code> 对象的 <code>birthDate</code> 字段按照指定的格式转换为 <code>PersonDto</code> 对象的 <code>birthDate</code> 字段。</p><ol><li><strong>忽略字段</strong></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-meta">@Mapping(target = &quot;id&quot;, ignore = true)</span><br>PersonDto <span class="hljs-title function_">personToPersonDto</span><span class="hljs-params">(Person person)</span>;<br></code></pre></td></tr></table></figure><p>这个示例中，<code>ignore = true</code> 表示忽略 <code>PersonDto</code> 对象的 <code>id</code> 字段，不进行映射。</p><h3 id="高级用法"><a href="#高级用法" class="headerlink" title="高级用法"></a>高级用法</h3><ul><li><strong>多字段映射</strong>：可以同时映射多个字段，通过多个 <code>@Mapping</code> 注解实现。</li><li><strong>复杂类型映射</strong>：支持复杂对象类型，如集合、嵌套对象等。</li><li><strong>条件映射</strong>：通过 SpEL 表达式在 <code>@Mapping</code> 的 <code>expression</code> 属性中定义条件，根据条件动态进行映射。</li></ul><p><code>@Mapping</code> 注解使得 MapStruct 在生成映射代码时具有灵活性和可配置性，能够应对多种复杂的映射需求。</p>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MapStruct</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ElasticSearch</title>
    <link href="/post/352024ded5b8/"/>
    <url>/post/352024ded5b8/</url>
    
    <content type="html"><![CDATA[<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="docker-安装"><a href="#docker-安装" class="headerlink" title="docker 安装"></a>docker 安装</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker run -d \<br>        --name es \<br>        -e <span class="hljs-string">&quot;ES_JAVA_OPTS=-Xms512m -Xmx512m&quot;</span> \<br>        -e <span class="hljs-string">&quot;discovery.type=single-node&quot;</span> \<br>        -v es-data:/usr/share/elasticsearch/data \<br>        -v es-plugins:/usr/share/elasticsearch/plugins \<br>        -v es-logs:/usr/share/elasticsearch/logs \<br>        --privileged \ --network es-net \<br>        -p 9200:9200 \<br>        -p 9300:9300 \<br>elasticsearch:7.12.1<br></code></pre></td></tr></table></figure><h3 id="docker-compose-yml"><a href="#docker-compose-yml" class="headerlink" title="docker-compose.yml"></a>docker-compose.yml</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">services:</span><br>  <span class="hljs-attr">es:</span><br>    <span class="hljs-attr">container_name:</span> <span class="hljs-string">es</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">elasticsearch:7.12.1</span><br>    <span class="hljs-attr">environment:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;discovery.type=single-node&quot;</span> <span class="hljs-comment"># 非集群模块</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;ES_JAVA_OPTS=-Xms512m -Xmx512m&quot;</span><br>    <span class="hljs-attr">ports:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;9200:9200&quot;</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;9300:9300&quot;</span><br>    <span class="hljs-attr">volumes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;es-data:/usr/share/elasticsearch/data&quot;</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;es-plugins:/usr/share/elasticsearch/plugins&quot;</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;es-logs:/usr/share/elasticsearch/logs&quot;</span><br>    <span class="hljs-attr">networks:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">1panel-network</span><br><span class="hljs-attr">networks:</span><br>  <span class="hljs-attr">1panel-network:</span><br>    <span class="hljs-attr">external:</span> <span class="hljs-literal">true</span><br><span class="hljs-attr">volumes:</span><br>  <span class="hljs-attr">es-logs:</span><br>  <span class="hljs-attr">es-data:</span><br>  <span class="hljs-attr">es-plugins:</span><br></code></pre></td></tr></table></figure><h3 id="ELK-compose"><a href="#ELK-compose" class="headerlink" title="ELK compose"></a>ELK compose</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">networks:</span><br>  <span class="hljs-attr">1panel-network:</span><br>    <span class="hljs-attr">external:</span> <span class="hljs-literal">true</span><br><span class="hljs-attr">volumes:</span><br>  <span class="hljs-attr">es-logs:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">es-log</span><br>  <span class="hljs-attr">es-data:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">es-data</span><br>  <span class="hljs-attr">es-plugins:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">es-plugins</span><br><span class="hljs-attr">services:</span><br>  <span class="hljs-attr">elasticsearch:</span><br>    <span class="hljs-attr">container_name:</span> <span class="hljs-string">elk_elasticsearch</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">elasticsearch:7.12.1</span><br>    <span class="hljs-attr">environment:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;discovery.type=single-node&quot;</span> <span class="hljs-comment"># 非集群模块</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;ES_JAVA_OPTS=-Xms512m -Xmx512m&quot;</span><br>    <span class="hljs-attr">ports:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;9200:9200&quot;</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;9300:9300&quot;</span><br>    <span class="hljs-attr">volumes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;es-data:/usr/share/elasticsearch/data&quot;</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;es-plugins:/usr/share/elasticsearch/plugins&quot;</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;es-logs:/usr/share/elasticsearch/logs&quot;</span><br>    <span class="hljs-attr">networks:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">1panel-network</span><br>  <span class="hljs-attr">kibana:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">kibana:7.12.1</span><br>    <span class="hljs-attr">container_name:</span> <span class="hljs-string">elk_kibana</span><br>    <span class="hljs-attr">restart:</span> <span class="hljs-string">always</span><br>    <span class="hljs-attr">depends_on:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">elasticsearch</span> <span class="hljs-comment">#kibana在elasticsearch启动之后再启动</span><br>    <span class="hljs-attr">environment:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">ELASTICSEARCH_URL=http://elasticsearch:9200</span> <span class="hljs-comment">#设置访问elasticsearch的地址</span><br>    <span class="hljs-attr">ports:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-number">5601</span><span class="hljs-string">:5601</span><br>    <span class="hljs-attr">networks:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">1panel-network</span><br>  <span class="hljs-attr">logstash:</span><br>      <span class="hljs-attr">image:</span> <span class="hljs-string">logstash:7.7.0</span><br>      <span class="hljs-attr">container_name:</span> <span class="hljs-string">elk_logstash</span><br>      <span class="hljs-attr">restart:</span> <span class="hljs-string">always</span><br>      <span class="hljs-attr">volumes:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">/opt/1panel/docker/compose/elasticsearch/logstash-springboot.conf:/usr/share/logstash/pipeline/logstash.conf</span> <span class="hljs-comment">#挂载logstash的配置文件</span><br>      <span class="hljs-attr">depends_on:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">elasticsearch</span> <span class="hljs-comment">#kibana在elasticsearch启动之后再启动</span><br>      <span class="hljs-attr">links:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">elasticsearch:es</span> <span class="hljs-comment">#可以用es这个域名访问elasticsearch服务</span><br>      <span class="hljs-attr">ports:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-number">4560</span><span class="hljs-string">:4560</span><br>      <span class="hljs-attr">networks:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">1panel-network</span><br></code></pre></td></tr></table></figure><h3 id="部署地址"><a href="#部署地址" class="headerlink" title="部署地址:"></a>部署地址:</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">ES : http:<span class="hljs-regexp">//</span><span class="hljs-number">172.19</span>.<span class="hljs-number">143.22</span>:<span class="hljs-number">9200</span>/<br>Kibanna http:<span class="hljs-regexp">//</span><span class="hljs-number">172.19</span>.<span class="hljs-number">143.22</span>:<span class="hljs-number">5601</span><span class="hljs-regexp">/app/</span>dev_tools<span class="hljs-comment">#/console</span><br></code></pre></td></tr></table></figure><p><a href="http://172.19.143.22:9200/">ES</a></p><p><a href="http://172.19.143.22:5601/app/dev_tools#/console">KibanaDev Tools - Elastic </a></p><h2 id="IK分词器插件安装"><a href="#IK分词器插件安装" class="headerlink" title="IK分词器插件安装"></a>IK分词器插件安装</h2><h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><p><a href="https://github.com/infinilabs/analysis-ik/tags?after=v7.12.1">IK分词器插件Tags · infinilabs&#x2F;analysis-ik (github.com)</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">将对于版本的插件 如 <span class="hljs-number">7.12</span><span class="hljs-number">.1</span> 版本的ik <span class="hljs-built_in">zip</span>解压 放在 es 的plugins目录下<br></code></pre></td></tr></table></figure><h3 id="分词测试"><a href="#分词测试" class="headerlink" title="分词测试"></a>分词测试</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs json">POST /_analyze<br><span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;analyzer&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;ik_smart&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;text&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;这个到秦始皇就是非好像是被那种高层吧高层想消灭他，然后就用那个他的软肋，就因为它已经变成掌控了掌控他有个软肋是他婆娘。复生者，对，但是掌控可以影响啊在宾馆里面是吧？嗯，对，但是。会影响他的那个秦始皇然后反正之后就相当于是自爆我靠晕了自己，把自己给灭了。用腿狼。不用推导与他人。自己是秦始皇，然后他本来是是天外的那种修行者然后到地球来寻找突破之法然后地球灵气不够，他传不回去了，然后反正秦始皇那些秦始皇就是它几千年后他被人挖了起来，走了。&quot;</span><br><span class="hljs-punctuation">&#125;</span><br><br></code></pre></td></tr></table></figure><h2 id="索引库"><a href="#索引库" class="headerlink" title="索引库"></a>索引库</h2><h3 id="Mapping"><a href="#Mapping" class="headerlink" title="Mapping"></a>Mapping</h3><ul><li>type <ul><li>字符串 : <code>text</code>(可分词)   <code>keyword</code>(精确值 , 不可分词, 如IP, 地址, 品牌)</li><li>数值 : <code>long integer short byte  double float number</code></li><li>布尔 : <code>boolean</code></li><li>日期 : <code>date</code></li><li>对象 : <code>object</code></li></ul></li><li>index : 是否创建索引 , 默认值 <code>true</code></li><li>analyzer : 使用哪种分词器</li><li>properties : 该字段的子字段</li></ul><h3 id="索引库-的CRUD"><a href="#索引库-的CRUD" class="headerlink" title="索引库 的CRUD"></a>索引库 的CRUD</h3><ul><li><p>创建索引库</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs json">PUT /索引库<br><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;mappings&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;field1&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;text&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;analyzer&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;ik_smart&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs json">PUT /inyxin<br><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;mappings&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;properties&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;keyword&quot;</span><br>            <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;age&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;integer&quot;</span><br>            <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;address&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;properties&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                    <span class="hljs-attr">&quot;city&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                        <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;text&quot;</span><br>                    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>                    <span class="hljs-attr">&quot;details&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                        <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;text&quot;</span><br>                    <span class="hljs-punctuation">&#125;</span><br>                <span class="hljs-punctuation">&#125;</span><br>            <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;description&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;text&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;analyzer&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;ik_smart&quot;</span><br>            <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br><br></code></pre></td></tr></table></figure></li><li><p>查询索引库</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">GET</span> /索引库<br></code></pre></td></tr></table></figure></li><li><p>修改索引库 <code>只支持新增字段 </code> </p><p>如果字段已经存在 , 则会报错</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">PUT <span class="hljs-regexp">/索引库/</span>_mapping<br></code></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs json">PUT /inyxin/_mapping<br><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;properties&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;username&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;keyword&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;index&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;true&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure></li><li><p>删除索引库</p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gauss"><span class="hljs-keyword">DELETE</span> /索引库<br></code></pre></td></tr></table></figure></li></ul><h2 id="文档的CRUD"><a href="#文档的CRUD" class="headerlink" title="文档的CRUD"></a>文档的CRUD</h2><ul><li><p>新增</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk">PUT <span class="hljs-regexp">/索引库/</span>_doc/文档ID<br>&#123;<br>文档数据<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs json">PUT /inyxin/_doc/<span class="hljs-number">1</span><br><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;inyxin&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;username&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;inyxin&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;age&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;20&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;description&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;确实是描述&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;address&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;city&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;四川·达州&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;details&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;四川文理学院·南坝校区&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>添加成功后响应</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;_index&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;inyxin&quot;</span><span class="hljs-punctuation">,</span>  索引库名<br>  <span class="hljs-attr">&quot;_type&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;_doc&quot;</span><span class="hljs-punctuation">,</span>文档名<br>  <span class="hljs-attr">&quot;_id&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;1&quot;</span><span class="hljs-punctuation">,</span>文档ID<br>  <span class="hljs-attr">&quot;_version&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;result&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;created&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;_shards&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;total&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">2</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;successful&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;failed&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;_seq_no&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;_primary_term&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><br><span class="hljs-punctuation">&#125;</span><br><br></code></pre></td></tr></table></figure></li><li><p>读取</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">GET</span> /索引库/_doc/文档ID<br></code></pre></td></tr></table></figure><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">GET</span> /inyxin/_doc/1<br></code></pre></td></tr></table></figure><p>查询结果</p><p><code>_source</code> : 原始文档</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;_index&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;inyxin&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;_type&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;_doc&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;_id&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;1&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;_version&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;_seq_no&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;_primary_term&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;found&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;_source&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;name&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;inyxin&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;username&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;inyxin&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;age&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;20&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;description&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;确实是描述&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;address&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;city&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;四川·达州&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;details&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;四川文理学院·南坝校区&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure></li><li><p>修改</p><ul><li><p><code> 全量修改 (覆盖修改)</code> </p><p>若文档ID已存在 , 则会先删除旧的文档, 在进行新增 ,</p><p>否则 就是添加一个新的文档</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">PUT <span class="hljs-regexp">/索引库/</span>_doc/文档ID  同新增<br>&#123;&#125;<br></code></pre></td></tr></table></figure></li><li><p><code>增量修改 (局部修改)</code></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs json">UPDATE  /索引库/_update/文档ID<br><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;doc&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;YINIXN&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;age&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">21</span><br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure></li></ul></li><li><p>删除</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-keyword">DELETE</span> <span class="hljs-regexp">/索引库/</span>_doc/<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
      <category>中间件</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ElasticSearch</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux启动脚本</title>
    <link href="/post/fe20cd40b669/"/>
    <url>/post/fe20cd40b669/</url>
    
    <content type="html"><![CDATA[<h2 id="实现用户登录后执行特定启动脚本"><a href="#实现用户登录后执行特定启动脚本" class="headerlink" title="实现用户登录后执行特定启动脚本"></a>实现用户登录后执行特定启动脚本</h2><h3 id="1-使用-bash-profile-或-bashrc"><a href="#1-使用-bash-profile-或-bashrc" class="headerlink" title="1. 使用 .bash_profile 或 .bashrc"></a>1. 使用 <code>.bash_profile</code> 或 <code>.bashrc</code></h3><p>如果使用的是 Bash shell，可以将启动脚本添加到用户主目录下的 <code>.bash_profile</code> 或 <code>.bashrc</code> 文件中。</p><h4 id="bash-profile"><a href="#bash-profile" class="headerlink" title=".bash_profile"></a>.bash_profile</h4><p><code>.bash_profile</code> 在用户登录时运行一次。适用于登录 shell。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">bashCopy Code# 编辑用户主目录下的 .bash_profile 文件<br>nano ~/.bash_profile<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">在文件末尾添加要执行的脚本</span><br>/path/to/your/script.sh<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">保存并退出</span><br></code></pre></td></tr></table></figure><h4 id="bashrc"><a href="#bashrc" class="headerlink" title=".bashrc"></a>.bashrc</h4><p><code>.bashrc</code> 在每次打开一个新的 shell 时运行。适用于非登录 shell。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">bashCopy Code# 编辑用户主目录下的 .bashrc 文件<br>nano ~/.bashrc<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">在文件末尾添加要执行的脚本</span><br>/path/to/your/script.sh<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">保存并退出</span><br></code></pre></td></tr></table></figure><h3 id="2-使用-profile"><a href="#2-使用-profile" class="headerlink" title="2. 使用 .profile"></a>2. 使用 <code>.profile</code></h3><p>某些 Linux 发行版和 shell（如 Dash）使用 <code>.profile</code> 文件。该文件在用户登录时运行。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sh">bashCopy Code<span class="hljs-comment"># 编辑用户主目录下的 .profile 文件</span><br>nano ~/.profile<br><br><span class="hljs-comment"># 在文件末尾添加要执行的脚本</span><br>/path/to/your/script.sh<br><br><span class="hljs-comment"># 保存并退出</span><br></code></pre></td></tr></table></figure><h3 id="3-使用-etc-profile-和-etc-profile-d"><a href="#3-使用-etc-profile-和-etc-profile-d" class="headerlink" title="3. 使用 /etc/profile 和 /etc/profile.d"></a>3. 使用 <code>/etc/profile</code> 和 <code>/etc/profile.d</code></h3><p>对于全系统范围内的配置，可以编辑 <code>/etc/profile</code> 文件，或在 <code>/etc/profile.d</code> 目录下创建一个新的脚本。</p><h4 id="etc-profile"><a href="#etc-profile" class="headerlink" title="&#x2F;etc&#x2F;profile"></a>&#x2F;etc&#x2F;profile</h4><p>在所有用户登录时运行。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sh">bashCopy Code<span class="hljs-comment"># 编辑 /etc/profile 文件（需要root权限）</span><br>sudo nano /etc/profile<br><br><span class="hljs-comment"># 在文件末尾添加要执行的脚本</span><br>/path/to/your/script.sh<br><br><span class="hljs-comment"># 保存并退出</span><br></code></pre></td></tr></table></figure><h4 id="etc-profile-d"><a href="#etc-profile-d" class="headerlink" title="&#x2F;etc&#x2F;profile.d"></a>&#x2F;etc&#x2F;profile.d</h4><p>在 <code>/etc/profile.d</code> 目录下创建一个新的脚本文件（必须以 <code>.sh</code> 结尾）。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sh">bashCopy Code<span class="hljs-comment"># 创建一个新的脚本文件（需要root权限）</span><br>sudo nano /etc/profile.d/myscript.sh<br><br><span class="hljs-comment"># 添加要执行的内容</span><br>/path/to/your/script.sh<br><br><span class="hljs-comment"># 保存并退出</span><br></code></pre></td></tr></table></figure><h3 id="4-使用-xinitrc-或-xsession"><a href="#4-使用-xinitrc-或-xsession" class="headerlink" title="4. 使用 .xinitrc 或 .xsession"></a>4. 使用 <code>.xinitrc</code> 或 <code>.xsession</code></h3><p>如果使用图形界面并希望在 X 会话启动时运行脚本，可以使用 <code>.xinitrc</code> 或 <code>.xsession</code> 文件。</p><h4 id="xinitrc"><a href="#xinitrc" class="headerlink" title=".xinitrc"></a>.xinitrc</h4><p>适用于使用 <code>startx</code> 启动 X 会话的用户。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sh">bashCopy Code<span class="hljs-comment"># 编辑用户主目录下的 .xinitrc 文件</span><br>nano ~/.xinitrc<br><br><span class="hljs-comment"># 在文件末尾添加要执行的脚本</span><br>/path/to/your/script.sh<br><br><span class="hljs-comment"># 保存并退出</span><br></code></pre></td></tr></table></figure><h4 id="xsession"><a href="#xsession" class="headerlink" title=".xsession"></a>.xsession</h4><p>适用于使用显示管理器（如 GDM、LightDM）启动 X 会话的用户。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sh">bashCopy Code<span class="hljs-comment"># 编辑用户主目录下的 .xsession 文件</span><br>nano ~/.xsession<br><br><span class="hljs-comment"># 在文件末尾添加要执行的脚本</span><br>/path/to/your/script.sh<br><br><span class="hljs-comment"># 保存并退出</span><br></code></pre></td></tr></table></figure><p>选择合适的方法取决于具体需求和系统环境。通常情况下，对于单个用户和命令行环境，修改 <code>.bash_profile</code> 或 <code>.bashrc</code> 是最常用的方法。</p>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>default</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Docker</title>
    <link href="/post/8a8dcb035543/"/>
    <url>/post/8a8dcb035543/</url>
    
    <content type="html"><![CDATA[<h2 id="镜像"><a href="#镜像" class="headerlink" title="镜像"></a>镜像</h2><ul><li><p><code>docker version</code> 显示docekr的详细信息</p></li><li><p><code>docker info</code> 显示docker的系统信息</p></li><li><p><code>docker --help</code> docker的命令帮助手册</p></li><li><p><code>docker search &#123;关键字&#125;</code> 搜索镜像</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker search nginx <span class="hljs-comment">#搜索nginx镜像</span><br>docker search openjdk <span class="hljs-comment">#搜索openjdk镜像</span><br></code></pre></td></tr></table></figure></li><li><p><code>docker pull &#123;镜像名[标签]&#125;</code> 拉取镜像</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker pull nginx <span class="hljs-comment">#拉取 nginx镜像</span><br>docker pull openjdk:latest <span class="hljs-comment">#拉取 openjdk镜像</span><br></code></pre></td></tr></table></figure></li><li><p><code>docker images</code> 查看已经下载的镜像</p></li><li><p><code>docker rmi &#123;镜像名或镜像ID&#125;</code> 删除镜像</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker rmi nginx <span class="hljs-comment"># 删除镜像名为nginx的镜像</span><br>docker rmi e235nd <span class="hljs-comment"># 根据镜像ID删除</span><br></code></pre></td></tr></table></figure></li><li><p><code>docker tag &#123;原来的镜像名[:标签]&#125; &#123;新的镜像名[:标签]&#125;</code> 复制镜像并修改名称</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker tag SOURCE_IMAGE[:TAG] TARGET_IMAGE[:TAG]<br><span class="hljs-comment">#SOURCE_IMAGE 是要标记的现有镜像的名称或 ID。</span><br><span class="hljs-comment">#TARGET_IMAGE 是为现有镜像指定的新标签的名称。</span><br><span class="hljs-comment">#TAG 是可选的标签，用于指定版本或其他特定标识符。</span><br>例如:<br>docker tag nginx inyxin/nginx:beta  <br></code></pre></td></tr></table></figure></li><li><p><code>docker load -i &#123;镜像的tar&#125;</code>  导入镜像</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker load -i /root/docker-centos-httpd.tar<br></code></pre></td></tr></table></figure></li><li><p><code>docker save -o &#123;镜像的tar&#125; &#123;镜像名&#125;</code>  导出镜像</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker save -o xxx.tar 镜像名<br>docker save -o my_image.tar my_image <br></code></pre></td></tr></table></figure></li></ul><h2 id="容器"><a href="#容器" class="headerlink" title="容器"></a>容器</h2><ul><li><p><code>docker run [参数] &#123;镜像&#125; [COMMAND] [ARG...]</code> <strong>启动容器 (重点)</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#语法</span><br>docker run [OPTIONS] IMAGE [COMMAND] [ARG...]<br><span class="hljs-comment">#[OPTIONS]</span><br>-d, --detach：在后台运行容器。<br>--name：为容器指定一个名称。<br>-p, --publish：将容器端口映射到宿主机端口。<br>-v, --volume：挂载宿主机目录到容器内部。<br>-e, --<span class="hljs-built_in">env</span>：设置环境变量。<br>--network：连接容器到指定的网络。<br>--restart：在容器退出时指定重启策略。<br>--<span class="hljs-built_in">rm</span>：容器退出时自动删除。<br>-it：交互式操作，通常与 -i（标准输入）和 -t（终端）一起使用。<br><span class="hljs-comment"># [COMMAND] [ARG...]</span><br><span class="hljs-comment">#可以覆盖默认的命令和参数。例如，你可以执行以下命令来覆盖默认的命令：</span><br>docker run my_image <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Hello, Docker!&quot;</span><br><span class="hljs-comment">#在这个例子中，echo &quot;Hello, Docker!&quot; 将覆盖镜像中定义的默认命令，容器将输出 Hello, Docker! 而不是 Hello, World!。</span><br></code></pre></td></tr></table></figure></li><li><p><code>docker build [OPTIONS]</code> 创建镜像</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker build [OPTIONS]<br><span class="hljs-comment">#[OPTIONS]</span><br>-f : 指定dockerfile文件路径 , 默认就是当前目录的 Dockerfile 文件<br>-t : 构建后的镜像名以及标签<br><span class="hljs-comment">#[EXAMPLE]</span><br>docker build -t inyxin/openjdk:1.8 <br></code></pre></td></tr></table></figure></li><li><p><code>docker logs &#123;容器ID&#125;</code>  查看容器日志</p></li><li><p><code>docker rename &#123;旧名字&#125; &#123;新名字&#125;</code> 容器重命名</p></li><li><p><code>docker ps [-a]</code>  查看正在运行的容器 [ -a 查看全部容器 ] </p></li><li><p><code>docekr kill &#123;容器名 或 容器ID&#125;</code> 杀死一个容器</p></li><li><p><code>docker rm &#123;容器名 或 容器ID&#125;</code> 删除容器</p></li></ul><p>[^{容器名 或 容器ID}]: 以下简称 {容器ID}</p><ul><li><p><code>docker history &#123;容器ID&#125;</code>  查看docker 镜像的变更历史</p></li><li><p><code>docker start &#123;容器ID&#125;</code> 启动一个容器</p></li><li><p><code>docker restart &#123;容器ID&#125;</code>  重启容器</p></li><li><p><code>docker stop</code> 停止容器</p></li><li><p><code>doceker image inspect &#123;容器ID&#125;</code>  查看容器内源数据</p></li><li><p><code>docker cp &#123;容器ID&#125;:路径 主机路径</code> 从容器内拷贝文件到主机</p></li><li><p><code>docker exec -it &#123;容器名ID&#125; /bin/bash</code> 进入容器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker <span class="hljs-built_in">exec</span> -it 1Panel-minio-UuPy /bin/bash<br></code></pre></td></tr></table></figure></li><li><p><code>docker commit -m=&quot;提交的描述信息&quot;  -a=&quot;作者&quot;  &#123;容器id&#125;  &#123;目标镜像名:[TAG]&#125;</code></p></li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker run \<br>--name inyxin-minio \ <br>-v <span class="hljs-string">&quot;/opt/1panel/apps/minio/minio/data:/data&quot;</span> \ <br>-v <span class="hljs-string">&quot;/opt/1panel/apps/minio/minio/certs:/root/.minio/certs&quot;</span> \<br>-p <span class="hljs-string">&quot;9001:9001&quot;</span> \ <br>-p <span class="hljs-string">&quot;9000:9000&quot;</span> \<br>--restart always \ <br>-e MINIO_ROOT_PASSWORD=<span class="hljs-string">&quot;1423716216@qq.com&quot;</span> \ <br>-e MINIO_ROOT_USER=<span class="hljs-string">&quot;1423716216@qq.com&quot;</span> \<br>-e MINIO_SERVER_URL=<span class="hljs-string">&quot;http://127.0.0.1:9000&quot;</span> \<br>-e MINIO_BROWSER=on \<br>-e MINIO_BROWSER_LOGIN_ANIMATION=on \<br>-e MINIO_BROWSER_REDIRECT_URL=<span class="hljs-string">&quot;http://127.0.0.1:9001&quot;</span> \<br>-e MINIO_BROWSER_SESSION_DURATION=12h \<br>-e PATH=/opt/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin \<br>-e container=oci \<br>-e MINIO_ACCESS_KEY_FILE=access_key \<br>-e MINIO_SECRET_KEY_FILE=secret_key \<br>-e MINIO_ROOT_USER_FILE=access_key \<br>-e MINIO_ROOT_PASSWORD_FILE=secret_key \<br>-e MINIO_KMS_SECRET_KEY_FILE=kms_master_key \<br>-e MINIO_UPDATE_MINISIGN_PUBKEY=RWTx5Zr1tiHQLwG9keckT0c45M3AGeHD6IvimQHpyRywVWGbP1aVSGav \<br>-e MINIO_CONFIG_ENV_FILE=config.env \<br>minio/minio <br><br></code></pre></td></tr></table></figure><h2 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 指定基础镜像，例如 node:14。这是 Dockerfile 的第一条指令，定义了新镜像是基于哪个已有镜像创建的。</span><br>FROM &lt;base_image&gt;<br><br><span class="hljs-comment"># 设置作者信息 (可选)</span><br>LABEL maintainer=<span class="hljs-string">&quot;&lt;your_name&gt; &lt;your_email&gt;&quot;</span><br><br><span class="hljs-comment"># 设置工作目录。所有后续的 COPY, ADD, RUN 等指令都将在这个目录下执行。例如 WORKDIR /usr/src/app</span><br>WORKDIR /usr/src/app<br><br><span class="hljs-comment"># 复制文件到镜像中</span><br>COPY &lt;<span class="hljs-built_in">source</span>&gt; &lt;destination&gt;<br><br><span class="hljs-comment"># 下载并安装依赖包</span><br>RUN &lt;<span class="hljs-built_in">command</span>&gt;<br><br><span class="hljs-comment"># 设置环境变量 (可选)</span><br>ENV &lt;key&gt;=&lt;value&gt;<br><br><span class="hljs-comment"># 暴露端口 (可选)</span><br>EXPOSE &lt;port&gt;<br><br><span class="hljs-comment"># 运行容器启动时的命令 ,与 CMD 类似，但 ENTRYPOINT 不会被 docker run 提供的参数覆盖。例如：</span><br>ENTRYPOINT [<span class="hljs-string">&quot;&lt;command&gt;&quot;</span>]<br><br><span class="hljs-comment"># 指定默认参数 (可选) 指定容器启动时要执行的命令。例如，CMD [&quot;npm&quot;, &quot;start&quot;]。注意，CMD 只会有一个生效，如果存在多个 CMD 指令，只有最后一个会被执行。</span><br>CMD [<span class="hljs-string">&quot;&lt;args&gt;&quot;</span>]<br></code></pre></td></tr></table></figure><p>通过 &#96;docker build -t {镜像:标签} 即可构建</p><h2 id=""><a href="#" class="headerlink" title=""></a></h2><h2 id="存储卷"><a href="#存储卷" class="headerlink" title="存储卷"></a>存储卷</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">Usage:</span>  <span class="hljs-string">docker</span> <span class="hljs-string">volume</span> <span class="hljs-string">COMMAND</span><br><br><span class="hljs-string">Manage</span> <span class="hljs-string">volumes</span><br><br><span class="hljs-attr">Commands:</span><br>  <span class="hljs-string">create</span>      <span class="hljs-string">Create</span> <span class="hljs-string">a</span> <span class="hljs-string">volume</span><br>  <span class="hljs-string">inspect</span>     <span class="hljs-string">Display</span> <span class="hljs-string">detailed</span> <span class="hljs-string">information</span> <span class="hljs-string">on</span> <span class="hljs-string">one</span> <span class="hljs-string">or</span> <span class="hljs-string">more</span> <span class="hljs-string">volumes</span><br>  <span class="hljs-string">ls</span>          <span class="hljs-string">List</span> <span class="hljs-string">volumes</span><br>  <span class="hljs-string">prune</span>       <span class="hljs-string">Remove</span> <span class="hljs-string">unused</span> <span class="hljs-string">local</span> <span class="hljs-string">volumes</span><br>  <span class="hljs-string">rm</span>          <span class="hljs-string">Remove</span> <span class="hljs-string">one</span> <span class="hljs-string">or</span> <span class="hljs-string">more</span> <span class="hljs-string">volumes</span><br></code></pre></td></tr></table></figure><h2 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">Usage:</span>  <span class="hljs-string">docker</span> <span class="hljs-string">network</span> <span class="hljs-string">COMMAND</span><br><br><span class="hljs-string">Manage</span> <span class="hljs-string">networks</span><br><br><span class="hljs-attr">Commands:</span><br>  <span class="hljs-string">connect</span>     <span class="hljs-string">Connect</span> <span class="hljs-string">a</span> <span class="hljs-string">container</span> <span class="hljs-string">to</span> <span class="hljs-string">a</span> <span class="hljs-string">network</span><br>  <span class="hljs-string">create</span>      <span class="hljs-string">Create</span> <span class="hljs-string">a</span> <span class="hljs-string">network</span><br>  <span class="hljs-string">disconnect</span>  <span class="hljs-string">Disconnect</span> <span class="hljs-string">a</span> <span class="hljs-string">container</span> <span class="hljs-string">from</span> <span class="hljs-string">a</span> <span class="hljs-string">network</span><br>  <span class="hljs-string">inspect</span>     <span class="hljs-string">Display</span> <span class="hljs-string">detailed</span> <span class="hljs-string">information</span> <span class="hljs-string">on</span> <span class="hljs-string">one</span> <span class="hljs-string">or</span> <span class="hljs-string">more</span> <span class="hljs-string">networks</span><br>  <span class="hljs-string">ls</span>          <span class="hljs-string">List</span> <span class="hljs-string">networks</span><br>  <span class="hljs-string">prune</span>       <span class="hljs-string">Remove</span> <span class="hljs-string">all</span> <span class="hljs-string">unused</span> <span class="hljs-string">networks</span><br>  <span class="hljs-string">rm</span>          <span class="hljs-string">Remove</span> <span class="hljs-string">one</span> <span class="hljs-string">or</span> <span class="hljs-string">more</span> <span class="hljs-string">networks</span><br></code></pre></td></tr></table></figure><h2 id="DockerCompose"><a href="#DockerCompose" class="headerlink" title="DockerCompose"></a>DockerCompose</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">Usage:</span>  <span class="hljs-string">docker</span> <span class="hljs-string">compose</span> [<span class="hljs-string">OPTIONS</span>] <span class="hljs-string">COMMAND</span><br><br><span class="hljs-string">Define</span> <span class="hljs-string">and</span> <span class="hljs-string">run</span> <span class="hljs-string">multi-container</span> <span class="hljs-string">applications</span> <span class="hljs-string">with</span> <span class="hljs-string">Docker</span><br><br><span class="hljs-attr">Options:</span><br>      <span class="hljs-string">--all-resources</span>              <span class="hljs-string">Include</span> <span class="hljs-string">all</span> <span class="hljs-string">resources,</span> <span class="hljs-string">even</span> <span class="hljs-string">those</span> <span class="hljs-string">not</span> <span class="hljs-string">used</span> <span class="hljs-string">by</span> <span class="hljs-string">services</span><br>      <span class="hljs-string">--ansi</span> <span class="hljs-string">string</span>                <span class="hljs-string">Control</span> <span class="hljs-string">when</span> <span class="hljs-string">to</span> <span class="hljs-string">print</span> <span class="hljs-string">ANSI</span> <span class="hljs-string">control</span> <span class="hljs-string">characters</span> <span class="hljs-string">(&quot;never&quot;|&quot;always&quot;|&quot;auto&quot;)</span> <span class="hljs-string">(default</span> <span class="hljs-string">&quot;auto&quot;</span><span class="hljs-string">)</span><br>      <span class="hljs-string">--compatibility</span>              <span class="hljs-string">Run</span> <span class="hljs-string">compose</span> <span class="hljs-string">in</span> <span class="hljs-string">backward</span> <span class="hljs-string">compatibility</span> <span class="hljs-string">mode</span><br>      <span class="hljs-string">--dry-run</span>                    <span class="hljs-string">Execute</span> <span class="hljs-string">command</span> <span class="hljs-string">in</span> <span class="hljs-string">dry</span> <span class="hljs-string">run</span> <span class="hljs-string">mode</span><br>      <span class="hljs-string">--env-file</span> <span class="hljs-string">stringArray</span>       <span class="hljs-string">Specify</span> <span class="hljs-string">an</span> <span class="hljs-string">alternate</span> <span class="hljs-string">environment</span> <span class="hljs-string">file</span><br>  <span class="hljs-string">-f,</span> <span class="hljs-string">--file</span> <span class="hljs-string">stringArray</span>           <span class="hljs-string">Compose</span> <span class="hljs-string">configuration</span> <span class="hljs-string">files</span><br>      <span class="hljs-string">--parallel</span> <span class="hljs-string">int</span>               <span class="hljs-string">Control</span> <span class="hljs-string">max</span> <span class="hljs-string">parallelism,</span> <span class="hljs-number">-1</span> <span class="hljs-string">for</span> <span class="hljs-string">unlimited</span> <span class="hljs-string">(default</span> <span class="hljs-number">-1</span><span class="hljs-string">)</span><br>      <span class="hljs-string">--profile</span> <span class="hljs-string">stringArray</span>        <span class="hljs-string">Specify</span> <span class="hljs-string">a</span> <span class="hljs-string">profile</span> <span class="hljs-string">to</span> <span class="hljs-string">enable</span><br>      <span class="hljs-string">--progress</span> <span class="hljs-string">string</span>            <span class="hljs-string">Set</span> <span class="hljs-string">type</span> <span class="hljs-string">of</span> <span class="hljs-string">progress</span> <span class="hljs-string">output</span> <span class="hljs-string">(auto,</span> <span class="hljs-string">tty,</span> <span class="hljs-string">plain,</span> <span class="hljs-string">quiet)</span> <span class="hljs-string">(default</span> <span class="hljs-string">&quot;auto&quot;</span><span class="hljs-string">)</span><br>      <span class="hljs-string">--project-directory</span> <span class="hljs-string">string</span>   <span class="hljs-string">Specify</span> <span class="hljs-string">an</span> <span class="hljs-string">alternate</span> <span class="hljs-string">working</span> <span class="hljs-string">directory</span><br>                                   <span class="hljs-string">(default:</span> <span class="hljs-string">the</span> <span class="hljs-string">path</span> <span class="hljs-string">of</span> <span class="hljs-string">the,</span> <span class="hljs-string">first</span> <span class="hljs-string">specified,</span> <span class="hljs-string">Compose</span> <span class="hljs-string">file)</span><br>  <span class="hljs-string">-p,</span> <span class="hljs-string">--project-name</span> <span class="hljs-string">string</span>        <span class="hljs-string">Project</span> <span class="hljs-string">name</span><br><br><span class="hljs-attr">Commands:</span><br>  <span class="hljs-string">attach</span>      <span class="hljs-string">Attach</span> <span class="hljs-string">local</span> <span class="hljs-string">standard</span> <span class="hljs-string">input,</span> <span class="hljs-string">output,</span> <span class="hljs-string">and</span> <span class="hljs-string">error</span> <span class="hljs-string">streams</span> <span class="hljs-string">to</span> <span class="hljs-string">a</span> <span class="hljs-string">service&#x27;s</span> <span class="hljs-string">running</span> <span class="hljs-string">container</span><br>  <span class="hljs-string">build</span>       <span class="hljs-string">Build</span> <span class="hljs-string">or</span> <span class="hljs-string">rebuild</span> <span class="hljs-string">services</span><br>  <span class="hljs-string">config</span>      <span class="hljs-string">Parse,</span> <span class="hljs-string">resolve</span> <span class="hljs-string">and</span> <span class="hljs-string">render</span> <span class="hljs-string">compose</span> <span class="hljs-string">file</span> <span class="hljs-string">in</span> <span class="hljs-string">canonical</span> <span class="hljs-string">format</span><br>  <span class="hljs-string">cp</span>          <span class="hljs-string">Copy</span> <span class="hljs-string">files/folders</span> <span class="hljs-string">between</span> <span class="hljs-string">a</span> <span class="hljs-string">service</span> <span class="hljs-string">container</span> <span class="hljs-string">and</span> <span class="hljs-string">the</span> <span class="hljs-string">local</span> <span class="hljs-string">filesystem</span><br>  <span class="hljs-string">create</span>      <span class="hljs-string">Creates</span> <span class="hljs-string">containers</span> <span class="hljs-string">for</span> <span class="hljs-string">a</span> <span class="hljs-string">service</span><br>  <span class="hljs-string">down</span>        <span class="hljs-string">Stop</span> <span class="hljs-string">and</span> <span class="hljs-string">remove</span> <span class="hljs-string">containers,</span> <span class="hljs-string">networks</span><br>  <span class="hljs-string">events</span>      <span class="hljs-string">Receive</span> <span class="hljs-string">real</span> <span class="hljs-string">time</span> <span class="hljs-string">events</span> <span class="hljs-string">from</span> <span class="hljs-string">containers</span><br>  <span class="hljs-string">exec</span>        <span class="hljs-string">Execute</span> <span class="hljs-string">a</span> <span class="hljs-string">command</span> <span class="hljs-string">in</span> <span class="hljs-string">a</span> <span class="hljs-string">running</span> <span class="hljs-string">container</span><br>  <span class="hljs-string">images</span>      <span class="hljs-string">List</span> <span class="hljs-string">images</span> <span class="hljs-string">used</span> <span class="hljs-string">by</span> <span class="hljs-string">the</span> <span class="hljs-string">created</span> <span class="hljs-string">containers</span><br>  <span class="hljs-string">kill</span>        <span class="hljs-string">Force</span> <span class="hljs-string">stop</span> <span class="hljs-string">service</span> <span class="hljs-string">containers</span><br>  <span class="hljs-string">logs</span>        <span class="hljs-string">View</span> <span class="hljs-string">output</span> <span class="hljs-string">from</span> <span class="hljs-string">containers</span><br>  <span class="hljs-string">ls</span>          <span class="hljs-string">List</span> <span class="hljs-string">running</span> <span class="hljs-string">compose</span> <span class="hljs-string">projects</span><br>  <span class="hljs-string">pause</span>       <span class="hljs-string">Pause</span> <span class="hljs-string">services</span><br>  <span class="hljs-string">port</span>        <span class="hljs-string">Print</span> <span class="hljs-string">the</span> <span class="hljs-string">public</span> <span class="hljs-string">port</span> <span class="hljs-string">for</span> <span class="hljs-string">a</span> <span class="hljs-string">port</span> <span class="hljs-string">binding</span><br>  <span class="hljs-string">ps</span>          <span class="hljs-string">List</span> <span class="hljs-string">containers</span><br>  <span class="hljs-string">pull</span>        <span class="hljs-string">Pull</span> <span class="hljs-string">service</span> <span class="hljs-string">images</span><br>  <span class="hljs-string">push</span>        <span class="hljs-string">Push</span> <span class="hljs-string">service</span> <span class="hljs-string">images</span><br>  <span class="hljs-string">restart</span>     <span class="hljs-string">Restart</span> <span class="hljs-string">service</span> <span class="hljs-string">containers</span><br>  <span class="hljs-string">rm</span>          <span class="hljs-string">Removes</span> <span class="hljs-string">stopped</span> <span class="hljs-string">service</span> <span class="hljs-string">containers</span><br>  <span class="hljs-string">run</span>         <span class="hljs-string">Run</span> <span class="hljs-string">a</span> <span class="hljs-string">one-off</span> <span class="hljs-string">command</span> <span class="hljs-string">on</span> <span class="hljs-string">a</span> <span class="hljs-string">service</span><br>  <span class="hljs-string">scale</span>       <span class="hljs-string">Scale</span> <span class="hljs-string">services</span><br>  <span class="hljs-string">start</span>       <span class="hljs-string">Start</span> <span class="hljs-string">services</span><br>  <span class="hljs-string">stats</span>       <span class="hljs-string">Display</span> <span class="hljs-string">a</span> <span class="hljs-string">live</span> <span class="hljs-string">stream</span> <span class="hljs-string">of</span> <span class="hljs-string">container(s)</span> <span class="hljs-string">resource</span> <span class="hljs-string">usage</span> <span class="hljs-string">statistics</span><br>  <span class="hljs-string">stop</span>        <span class="hljs-string">Stop</span> <span class="hljs-string">services</span><br>  <span class="hljs-string">top</span>         <span class="hljs-string">Display</span> <span class="hljs-string">the</span> <span class="hljs-string">running</span> <span class="hljs-string">processes</span><br>  <span class="hljs-string">unpause</span>     <span class="hljs-string">Unpause</span> <span class="hljs-string">services</span><br>  <span class="hljs-string">up</span>          <span class="hljs-string">Create</span> <span class="hljs-string">and</span> <span class="hljs-string">start</span> <span class="hljs-string">containers</span><br>  <span class="hljs-string">version</span>     <span class="hljs-string">Show</span> <span class="hljs-string">the</span> <span class="hljs-string">Docker</span> <span class="hljs-string">Compose</span> <span class="hljs-string">version</span> <span class="hljs-string">information</span><br>  <span class="hljs-string">wait</span>        <span class="hljs-string">Block</span> <span class="hljs-string">until</span> <span class="hljs-string">the</span> <span class="hljs-string">first</span> <span class="hljs-string">service</span> <span class="hljs-string">container</span> <span class="hljs-string">stops</span><br>  <span class="hljs-string">watch</span>       <span class="hljs-string">Watch</span> <span class="hljs-string">build</span> <span class="hljs-string">context</span> <span class="hljs-string">for</span> <span class="hljs-string">service</span> <span class="hljs-string">and</span> <span class="hljs-string">rebuild/refresh</span> <span class="hljs-string">containers</span> <span class="hljs-string">when</span> <span class="hljs-string">files</span> <span class="hljs-string">are</span> <span class="hljs-string">updated</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Minio</title>
    <link href="/post/9eadc0045e29/"/>
    <url>/post/9eadc0045e29/</url>
    
    <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="1-通过1panel-快速安装-minio-略"><a href="#1-通过1panel-快速安装-minio-略" class="headerlink" title="1.通过1panel 快速安装 minio (略)"></a>1.通过1panel 快速安装 minio (略)</h3><h3 id="使用-image-20240617162518125"><a href="#使用-image-20240617162518125" class="headerlink" title="使用![image-20240617162518125]("></a>使用![image-20240617162518125](</h3><h5 id="创建桶"><a href="#创建桶" class="headerlink" title="创建桶"></a>创建桶</h5><p><img src="image-20240611102448868.png" alt="image-20240611102448868"></p><h5 id="设置为公开-私有无法访问"><a href="#设置为公开-私有无法访问" class="headerlink" title="设置为公开,私有无法访问"></a>设置为公开,私有无法访问</h5><h5 id="-1"><a href="#-1" class="headerlink" title=""></a><img src="image-20240611102707639.png" alt="image-20240611102707639"></h5><h5 id="配置访问规则-前缀"><a href="#配置访问规则-前缀" class="headerlink" title="配置访问规则, 前缀"></a>配置访问规则, 前缀</h5><p><img src="image-20240611102812724.png" alt="image-20240611102812724"></p><h5 id="创建服务账号"><a href="#创建服务账号" class="headerlink" title="创建服务账号"></a>创建服务账号</h5><p><img src="image-20240611102921408.png" alt="image-20240611102921408"></p><p><img src="image-20240611102939916.png" alt="image-20240611102939916"></p><h5 id="代码中使用"><a href="#代码中使用" class="headerlink" title="代码中使用"></a>代码中使用</h5><p><img src="image-20240611102958006.png" alt="image-20240611102958006"></p><h2 id="2-通过Docker-自己安装"><a href="#2-通过Docker-自己安装" class="headerlink" title="2.通过Docker 自己安装"></a>2.通过Docker 自己安装</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker pull docker://minio/minio <span class="hljs-comment"># 拉取minio镜像</span><br></code></pre></td></tr></table></figure><p><img src="image-20240612091412567.png" alt="image-20240612091412567"></p>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
      <category>中间件</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Minio</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringBoot自定义 Starter</title>
    <link href="/post/13bb5bc745e1/"/>
    <url>/post/13bb5bc745e1/</url>
    
    <content type="html"><![CDATA[<p>适用于将独立模块,封装成spring-boot-stater 自动配置的模块</p><h3 id="1-创建-Maven-项目"><a href="#1-创建-Maven-项目" class="headerlink" title="1. 创建 Maven 项目"></a>1. 创建 Maven 项目</h3><p>创建一个普通的 Maven 项目 <code>custom-example-starter</code>。</p><h3 id="2-导入-Spring-Boot-相关依赖"><a href="#2-导入-Spring-Boot-相关依赖" class="headerlink" title="2. 导入 Spring Boot 相关依赖"></a>2. 导入 Spring Boot 相关依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">java.version</span>&gt;</span>17<span class="hljs-tag">&lt;/<span class="hljs-name">java.version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">project.build.sourceEncoding</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">project.reporting.outputEncoding</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">spring-boot.version</span>&gt;</span>3.0.2<span class="hljs-tag">&lt;/<span class="hljs-name">spring-boot.version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-autoconfigure<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>provided<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependencyManagement</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-dependencies<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;spring-boot.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">type</span>&gt;</span>pom<span class="hljs-tag">&lt;/<span class="hljs-name">type</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>import<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencyManagement</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="3-声明需要配置的属性和配置名前缀"><a href="#3-声明需要配置的属性和配置名前缀" class="headerlink" title="3. 声明需要配置的属性和配置名前缀"></a>3. 声明需要配置的属性和配置名前缀</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * admin 属性</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@ConfigurationProperties(prefix = &quot;custom.user.admin&quot;)</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AdminProperties</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">Integer</span> <span class="hljs-variable">id</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">String</span> <span class="hljs-variable">username</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;admin&quot;</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">String</span> <span class="hljs-variable">password</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;password&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-创建自定义配置类，并配置-Bean"><a href="#4-创建自定义配置类，并配置-Bean" class="headerlink" title="4. 创建自定义配置类，并配置 Bean"></a>4. 创建自定义配置类，并配置 Bean</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@EnableConfigurationProperties(AdminProperties.class)</span><br><span class="hljs-meta">@ComponentScan(&quot;com.example.utils&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserAutoConfiguration</span> &#123;<br>    <span class="hljs-meta">@Bean</span><br>    User <span class="hljs-title function_">admin</span><span class="hljs-params">(AdminProperties adminProperties)</span> &#123;<br>        System.err.println(<span class="hljs-string">&quot;adminProperties: &quot;</span> + adminProperties);<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br>        user.setId(adminProperties.getId());<br>        user.setUsername(adminProperties.getUsername());<br>        user.setPassword(adminProperties.getPassword());<br>        <span class="hljs-keyword">return</span> user;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="5-导入指定的配置类"><a href="#5-导入指定的配置类" class="headerlink" title="5. 导入指定的配置类"></a>5. 导入指定的配置类</h3><p>创建文件：<code>resources/META-INF/spring/org.springframework.boot.autoconfigure.AutoConfiguration.imports</code>，并添加以下内容：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">com<span class="hljs-selector-class">.example</span><span class="hljs-selector-class">.utils</span>.UserAutoConfiguration<br></code></pre></td></tr></table></figure><p>SpringBoot 2.7前后配置有所差异</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs stylus">示例 <br>原spring.factories文件<br>org<span class="hljs-selector-class">.springframework</span><span class="hljs-selector-class">.boot</span><span class="hljs-selector-class">.autoconfigure</span>.EnableAutoConfiguration=\<br>  com<span class="hljs-selector-class">.xxx</span><span class="hljs-selector-class">.iot</span><span class="hljs-selector-class">.common</span><span class="hljs-selector-class">.config</span><span class="hljs-selector-class">.SaTokenConfigure</span>,\<br>  com<span class="hljs-selector-class">.xxx</span><span class="hljs-selector-class">.iot</span><span class="hljs-selector-class">.common</span><span class="hljs-selector-class">.config</span><span class="hljs-selector-class">.SecurityProperties</span><br><br>在resource/META-INF目录下新建spring目录，并添加org<span class="hljs-selector-class">.springframework</span><span class="hljs-selector-class">.boot</span><span class="hljs-selector-class">.autoconfigure</span><span class="hljs-selector-class">.AutoConfiguration</span>.imports文件<br>com<span class="hljs-selector-class">.xxx</span><span class="hljs-selector-class">.iot</span><span class="hljs-selector-class">.common</span><span class="hljs-selector-class">.config</span><span class="hljs-selector-class">.SaTokenConfigure</span><br>com<span class="hljs-selector-class">.xxx</span><span class="hljs-selector-class">.iot</span><span class="hljs-selector-class">.common</span><span class="hljs-selector-class">.config</span>.SecurityProperties<br></code></pre></td></tr></table></figure><h3 id="6-在其他-Spring-Boot-项目中引用此模块直接使用-Bean"><a href="#6-在其他-Spring-Boot-项目中引用此模块直接使用-Bean" class="headerlink" title="6. 在其他 Spring Boot 项目中引用此模块直接使用 Bean"></a>6. 在其他 Spring Boot 项目中引用此模块直接使用 Bean</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">ConfigurableApplicationContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> SpringApplication.run(Main.class, args);<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> context.getBean(User.class);<br>        System.out.println(<span class="hljs-string">&quot;user = &quot;</span> + user);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="7-在-YAML-文件中修改默认值"><a href="#7-在-YAML-文件中修改默认值" class="headerlink" title="7. 在 YAML 文件中修改默认值"></a>7. 在 YAML 文件中修改默认值</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">custom:</span><br>  <span class="hljs-attr">user:</span><br>    <span class="hljs-attr">admin:</span><br>      <span class="hljs-attr">id:</span> <span class="hljs-number">22</span><br>      <span class="hljs-attr">username:</span> <span class="hljs-string">inyxin</span><br></code></pre></td></tr></table></figure><p>通过以上步骤，你就创建了一个自定义的 Spring Boot Starter，并能在其他项目中直接使用对应的 Bean。</p>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
      <category>Java</category>
      
      <category>Spring</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>Spring</tag>
      
      <tag>SpringBoot</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>电力巡检实训项目</title>
    <link href="/post/52efb45fb389/"/>
    <url>/post/52efb45fb389/</url>
    
    <content type="html"><![CDATA[<h2 id="角色"><a href="#角色" class="headerlink" title="角色"></a>角色</h2><ul><li><p>超级管理员</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">维护整个系统的正常运行,不参与任何用户的业务<br></code></pre></td></tr></table></figure></li><li><p>线路管理员</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">对于线路进行管理, 巡检任务的指定, 分配, 审核以及消缺任务的指定, 分配和审核<br></code></pre></td></tr></table></figure></li><li><p>巡检员 </p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gcode">执行巡检任务并返回回执信息 <span class="hljs-comment">(巡检回执)</span><br></code></pre></td></tr></table></figure></li><li><p>消缺员</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gcode">执行消缺任务 , 消除线路中的缺陷, 并反馈回执信息 <span class="hljs-comment">(消缺回执)</span><br></code></pre></td></tr></table></figure></li></ul><h2 id="RBAC"><a href="#RBAC" class="headerlink" title="RBAC"></a>RBAC</h2><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs diff">电力巡检系统应该设计一个RBAC权限模型, 来控制角色的操作<br><span class="hljs-deletion">-用户表(user)</span><br><span class="hljs-deletion">-用户角色表(user_role)</span><br><span class="hljs-deletion">-角色表(role)</span><br><span class="hljs-deletion">-角色资源表(role_resource)  </span><br><span class="hljs-deletion">-资源表(reource)</span><br></code></pre></td></tr></table></figure><p>可以基于 <code>Spring MVC</code> 中的 <code>拦截器</code> 或者使用 <code>AOP</code> 实现简单的权限控制效果</p>]]></content>
    
    
    <categories>
      
      <category>default</category>
      
    </categories>
    
    
    <tags>
      
      <tag>default</tag>
      
    </tags>
    
  </entry>
  
  
  
  
  
  
  <entry>
    <title>about</title>
    <link href="/"/>
    <url>/</url>
    
    <content type="html"><![CDATA[<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">这里写关于页的正文，支持 Markdown, <span class="hljs-selector-tag">HTML</span><br></code></pre></td></tr></table></figure>]]></content>
    
  </entry>
  
  
  
  <entry>
    <title>categories</title>
    <link href="/"/>
    <url>/</url>
    
    <content type="html"><![CDATA[]]></content>
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/"/>
    <url>/</url>
    
    <content type="html"><![CDATA[!(function() {  /** 计时起始时间，自行修改 **/  var start = new Date("2024/07/04 00:00:00");  function update() {    var now = new Date();    now.setTime(now.getTime()+250);    days = (now - start) / 1000 / 60 / 60 / 24;    dnum = Math.floor(days);    hours = (now - start) / 1000 / 60 / 60 - (24 * dnum);    hnum = Math.floor(hours);    if(String(hnum).length === 1 ){      hnum = "0" + hnum;    }    minutes = (now - start) / 1000 /60 - (24 * 60 * dnum) - (60 * hnum);    mnum = Math.floor(minutes);    if(String(mnum).length === 1 ){      mnum = "0" + mnum;    }    seconds = (now - start) / 1000 - (24 * 60 * 60 * dnum) - (60 * 60 * hnum) - (60 * mnum);    snum = Math.round(seconds);    if(String(snum).length === 1 ){      snum = "0" + snum;    }    document.getElementById("timeDate").innerHTML = "本站安全运行&nbsp"+dnum+"&nbsp天";    document.getElementById("times").innerHTML = hnum + "&nbsp小时&nbsp" + mnum + "&nbsp分&nbsp" + snum + "&nbsp秒";  }  update();  setInterval(update, 1000);})();]]></content>
    
  </entry>
  
  
  
  <entry>
    <title>friends</title>
    <link href="/"/>
    <url>/</url>
    
    <content type="html"><![CDATA[]]></content>
    
  </entry>
  
  
  
  <entry>
    <title>tags</title>
    <link href="/"/>
    <url>/</url>
    
    <content type="html"><![CDATA[]]></content>
    
  </entry>
  
  
  
</search>
