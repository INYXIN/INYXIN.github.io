<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>2022.11月C语言复习题.docx</title>
    <link href="/post/22ca3782-bd81-46b5-ba49-ef6d6b47f61a/"/>
    <url>/post/22ca3782-bd81-46b5-ba49-ef6d6b47f61a/</url>
    
    <content type="html"><![CDATA[<h3 id="2022-11-月-C-语言复习题-docx"><a href="#2022-11-月-C-语言复习题-docx" class="headerlink" title="2022.11 月 C 语言复习题.docx"></a>2022.11 月 C 语言复习题.docx</h3><p><code>hexo template generate by typora plugin templater</code></p><ol><li>用 C 语言编写的代码程序（D）。<br>A.可立即执行B.是一个源程序<br>C.经过编译即可执行D.经过编译解释才能执行</li><li>将 C 语言源程序进行（B）可得到目标程序。<br>A.编辑B.编译C.连接D.执行</li><li>（a）是 C 语言提供的合法的数据类型关键字。<br>A.FloatB.UnsignedC.IntegerD.Char</li><li>   若 int k &#x3D; 7, x &#x3D; 12; 则能使值为 3 的表达式是（C）。<br>A.x%&#x3D;(k%&#x3D; 5)12%&#x3D; 2B.x%&#x3D;(k－k%5)12%&#x3D; 5<br>C.x%&#x3D; k－k%5D.(x%&#x3D; k)－(k%&#x3D; 5) 1 - 1<br>X &#x3D; x%k-k%5</li></ol><p>5.C 语言源程序文件经过 C 编译程序编译后生成的目标文件的后缀为（B）。<br>A. .c        B.  .obj     C..exe       D..bas<br>6.C 语言语句的结束符是（B）。<br>A. 回车符    B. 分号          C. 逗号      D. 句号<br>7.以下程序的功能是给 r 输入数据后计算半径为 r 的圆面积 s。程序在编译时出错，出错的原因是（D）。<br>#include &lt;stdio.h&gt;<br>int main()<br>&#x2F;* Beginning <em>&#x2F;<br>{  int r; float s;   &#x2F;&#x2F;float 代表浮点类型，即小数，其对应的格式为%f<br>   scanf(“%d”,&amp;r);<br>   s &#x3D; p <em>r</em> r;<br>   printf(“s &#x3D;%f\n”, s);<br>   return 0;<br>}<br>A.注释语句书写位置错误<br>B.存放圆半径的变量 r 不应该定义为整型<br>C.输出语句中格式描述符非法<br>D.计算圆面积的赋值语句中使用了未定义的变量<br>8.在 C 语言中, 要求参加运算的数必须是整数的运算符是(A)。<br>A.%       B.&#x2F;        C.!           D.</em><br>9.若已定义 x 和 y 为 double 类型, 则表达式 “x &#x3D; 1, y &#x3D; x+3&#x2F;2” 的值是(D)。<br>A.1       B.2      C.2.0          D.2.5<br>10.下列变量中合法的是(C)。<br>A.        B.3a6b       C._6a7b         D.$ABC<br>11.以下不正确的叙述是(D)。<br>A.在 C 程序中所用的变量必须先定义后使用<br>B.程序中, APH 和 aph 是两个不同的变量<br>C.若 a 和 b 类型相同, 在执行了赋值语句 a &#x3D; b; 后 b 中的值将放入 a 中, b 中的值不变<br>D.当输入数值数据时, 对于整型变量只能输入整型值; 对于实型变量只能输入实型值<br>12.若 x &#x3D; 2, y &#x3D; 3 则 x||y 的结果是(B)。<br>A.0          B.1            C.2          D.3<br>13.C 语言的 if 语句嵌套时, if 与 else 的配对关系是(D)。<br>A. 每个 else 总是与它上面的 if 配对<br>B. 每个 else 总是与最外层的 if 配对<br>C. 每个 else 与 if 的配对是任意的<br>D. 每个 else 总是与它上面的最近的并且尚未与其他 else 匹配的 if 配对<br>14.C 语言的 switch 语句中 case 后(B)。<br>A.只能为常量                                    B.只能为常量或常量表达式<br>C.可为常量或表达式或有确定值的变量及表达式     D.可为任何量或表达式<br>15.有以下程序段</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>, p;<br><span class="hljs-keyword">do</span><br>&#123;  scanf(<span class="hljs-string">&quot;%d&quot;</span>,&amp;p);<br>n++;<br>&#125;<span class="hljs-keyword">while</span>(p!= <span class="hljs-number">12345</span>&amp;&amp;n &lt; <span class="hljs-number">3</span>);<br></code></pre></td></tr></table></figure><p>此处 do-while 循环的结束条件是(D)。<br>A.p 的值不等于 12345 并且 n 的值小于 3<br>B.p 的值等于 12345 并且 n 的值大于等于 3<br>C.p 的值不等于 12345 或者 n 的值小于 3<br>D.p 的值等于 12345 或者 n 的值大于等于 3<br>16.若 i 为整型变量, 则以下循环执行次数是(D)。<br>for(i &#x3D; 2; i &#x3D;&#x3D; 0;)  printf(“%d”, i–);<br>A.无限次     B. 0 次     C. 1 次     D. 2 次<br>17.下面有关 for 循环的正确描述是(D)。<br>A.for 循环只能用于循环次数已经确定的情况<br>B.for 循环是先执行循环循环体语句, 后判断表达式<br>C.在 for 循环中, 不能用 break 语句跳出循环体<br>D.for 循环的循环体语句中, 可以包含多条语句, 但必须用花括号括起来<br>18.若有说明: int a [10]; 则对 a 数组元素的正确引用是(D)。<br>A. a [10]        B. a [3,5]      C.a(5)       D.a [10-10]<br>19.若二维数组 a 有 m 列, 则在 a [i][j] 前的元素个数为(A)。<br>令 m &#x3D; 4 , i &#x3D; 2, j &#x3D; 2<br>A [2][2] 前 有 21 20 13 12 11 10 03 02 01 00  j*m+i<br>A. j <em>m+I        B.i</em> m+j        C.i <em>m+j-1    D.i</em> m+j+1<br>20.若有说明: int a [ ][3] &#x3D;{1,2,3,4,5,6,7}; 则 a 数组第一维的大小是(B)。<br>A. 2            B.3            C.4          D.无确定值<br>21. 以下不正确的定义语句是(B)。<br>A.double x [5] &#x3D;{2.0,4.0,6.0,8.0,10.0};    B. int y [5] &#x3D;{0,1,3,5,7,9};<br>C.char c1 [ ] &#x3D;{‘1’,’2’,’3’,’4’,’5’};      D. char c2 [ ] &#x3D;{‘\x10’,’\xa’,’\x8’};<br>22.已知 int p(); p 是(C)。<br>A.int 型变量                                  B.函数 p 的调用<br>C.一个函数声明, 该函数的返回值是 int 型的值     D.强制类型转换表达式中的变量<br>23. C 语言中的函数(D)。<br>A.可以嵌套定义                     B.不可以嵌套调用<br>C.可以嵌套调用, 但不能调用自己      D.嵌套调用和调用自己均可<br>24.关于 return 语句, 下列正确的说法是(A)。<br>A. 可以在同一函数中出现多次   B.在主函数中不能出现<br>C. 必须在每个函数中出现       D.只能在除主函数之外的函数中出现一次</p><p>1.C 语言本身不提供输入输出语句, 输入和输出操作是由函数来实现的。（V）<br>2.一个 C 程序可以包含若干个函数。（V）<br>3．C 程序的注释部分可以出现在程序的任何位置，它对程序的编译和运行不起任何作用。但是可以增加程序的可读性。（V）<br>4．C 程序的注释不能是中文文字信息。（X）<br>5.while 和 do…while 循环不论什么条件下它们的结果都是相同的。(X)<br>6.三种循环(while 语句、 for 语句、 do-while 语句)都可以用来处理同一个问题, 一般它们可以相互代替。(V)<br>7.循环嵌套执行时, 先由内层循环进入外层循环。(X)<br>8.break 语句只能用于循环语句中。(X)<br>9.循环结构中的 continue 语句是使整个循环终止执行。(X)<br>10.C 语言的 if 语句嵌套时, if 与 else 的匹配关系是每个 else 与 if 的匹配是任意的。（X）<br>11.main 函数必须写在一个 C 程序的最前面。（  X  ）<br>12.一个 C 程序可以包含若干的函数。（   V ）<br>13.C 程序的注释部分可以出现在程序的任何位置，它对程序的编译和运行不起任何作用。但是可以增加程序的可读性。（  V ）<br>14.C 程序的注释不能是中文文字信息。（  X ）<br>15.在 C 程序中对用到的所有数据都必须指定其数据类型。（ V  ）<br>16.对几个变量在定义时赋初值可以写成：int a &#x3D; b &#x3D; c &#x3D; 3; （  X ）<br>17.自增运算符(++)或自减运算符(–)只能用于变量，不能用于常量或表达式。（ V ）<br>18.在 C 程序的表达式中，为了明确表达式的运算次序，常使用括号 “（）”。（  V ）</p><p>1.若从键盘输入 58，则以下程序输出的结果是           。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-type">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123; <span class="hljs-type">int</span> a;<br> <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;a);<br> <span class="hljs-keyword">if</span>(a &gt; <span class="hljs-number">50</span>) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>, a);<br> <span class="hljs-keyword">if</span>(a &gt; <span class="hljs-number">40</span>) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>, a);<br> <span class="hljs-keyword">if</span>(a &gt; <span class="hljs-number">30</span>) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>, a);<br>&#125;<br></code></pre></td></tr></table></figure><p>58<br>2.程序的功能是使一个字符串按逆序存放，请填空。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-type">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">( )</span><br>&#123;<br>    <span class="hljs-type">char</span> str [] =&#123;<span class="hljs-string">&quot;abcdefghijl&quot;</span>&#125;, m;<br>    <span class="hljs-type">int</span> i, j;<br>    <span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>, j = <span class="hljs-built_in">strlen</span>(str); i &lt;   j        ; i++, j--)<br>    &#123;m = str [i];<br>     str [i] =  str [j<span class="hljs-number">-1</span>]           ;<br>     str [j<span class="hljs-number">-1</span>] = m;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s\n&quot;</span>, str);<br>&#125;<span class="hljs-comment">//交换字符串的第 i 个字符与倒数第 I 个字符</span><br></code></pre></td></tr></table></figure><p>4.若有以下程序<br>i</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c">nt <span class="hljs-title function_">f</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span><br>&#123;<br>    <span class="hljs-keyword">return</span>(y-x)*x; <br>&#125;<br>main()<br>&#123;<br>    <span class="hljs-type">int</span> a = <span class="hljs-number">3</span>, b = <span class="hljs-number">4</span>, c = <span class="hljs-number">5</span>, d;<br>    d = f(f(<span class="hljs-number">3</span>,<span class="hljs-number">4</span>), f(<span class="hljs-number">3</span>,<span class="hljs-number">5</span>));<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, d);<br>&#125;<br>F(<span class="hljs-number">3</span>,<span class="hljs-number">4</span>)=(<span class="hljs-number">4</span><span class="hljs-number">-3</span>)*<span class="hljs-number">3</span> = <span class="hljs-number">3</span><br>    F(<span class="hljs-number">3</span>,<span class="hljs-number">5</span>)=(<span class="hljs-number">5</span><span class="hljs-number">-3</span>)*<span class="hljs-number">3</span> = <span class="hljs-number">6</span><br>    F(<span class="hljs-number">3</span>,<span class="hljs-number">6</span>)=(<span class="hljs-number">6</span><span class="hljs-number">-3</span>)*<span class="hljs-number">3</span> = <span class="hljs-number">9</span><br></code></pre></td></tr></table></figure><p>执行后输出结果是       9<br>5.下列程序的输出结果是(   1,0           )。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;  <span class="hljs-type">int</span> x = <span class="hljs-number">1</span>, a = <span class="hljs-number">0</span>, b = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">switch</span> (x)<br>  &#123; <span class="hljs-keyword">case</span> <span class="hljs-number">0</span>: b++; <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>: a++; <span class="hljs-keyword">break</span>;<span class="hljs-comment">//a = 1</span><br>    <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>: a++; b++;<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d,%d&quot;</span>, a, b);<br>&#125; <br><span class="hljs-number">6.</span>以下程序的运行结果是(   <span class="hljs-number">12457810</span>  )。<br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-type">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;  <span class="hljs-type">int</span> n;<br><span class="hljs-keyword">for</span>(n = <span class="hljs-number">1</span>; n &lt;= <span class="hljs-number">10</span>; n++)<br>&#123;<br><span class="hljs-keyword">if</span>(n%<span class="hljs-number">3</span> == <span class="hljs-number">0</span>) <span class="hljs-keyword">continue</span>;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>, n);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>7.下列程序的运行结果是(    1       )。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-type">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123; <span class="hljs-type">int</span> i, j, m = <span class="hljs-number">55</span>;<br><span class="hljs-keyword">for</span>(i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">3</span>; i++)<br><span class="hljs-keyword">for</span>(j = <span class="hljs-number">3</span>; j &lt;= i; j++) <br>m = m%j;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, m);<br><br>i = <span class="hljs-number">1</span>; j = <span class="hljs-number">3</span> &gt; <span class="hljs-number">1</span><br>i = <span class="hljs-number">2</span>; j = <span class="hljs-number">3</span> &gt; <span class="hljs-number">2</span><br>i = <span class="hljs-number">3</span>; j = <span class="hljs-number">3</span> = <span class="hljs-number">3</span>; m = <span class="hljs-number">55</span>%<span class="hljs-number">3</span> = <span class="hljs-number">1</span><br>i = <span class="hljs-number">4</span>; <span class="hljs-keyword">break</span><br>m = <span class="hljs-number">1</span><br>&#125;<br></code></pre></td></tr></table></figure><p>8.程序运行后的输出结果是(     D          )。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-type">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123; <span class="hljs-type">char</span> a [ ] =&#123;<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span>,<span class="hljs-string">&#x27;c&#x27;</span>,<span class="hljs-string">&#x27;d&#x27;</span>,<span class="hljs-string">&#x27;e&#x27;</span>,<span class="hljs-string">&#x27;f&#x27;</span>,<span class="hljs-string">&#x27;g&#x27;</span>,<span class="hljs-string">&#x27;h&#x27;</span>,<span class="hljs-string">&#x27;\0&#x27;</span>&#125;;<br> <span class="hljs-type">int</span> i, j;<br> i = <span class="hljs-keyword">sizeof</span>(a)<span class="hljs-number">9</span>; j = <span class="hljs-built_in">strlen</span>(a)<span class="hljs-number">8</span>;<br> <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d,%d\n&quot;</span>, i, j); &#125;<br></code></pre></td></tr></table></figure><p>A) 9,9<br>B) 8,9<br>C) 1,8<br>D) 9,8<br>9.以下程序的运行结果是(       10,20       )。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br>func(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)<br>&#123;<br>    <span class="hljs-type">int</span> temp = a;<br>    a = b;<br>    b = temp; &#125;<br><span class="hljs-type">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123; <br>    <span class="hljs-type">int</span> x, y;<br>    x = <span class="hljs-number">10</span>; y = <span class="hljs-number">20</span>;<br>    func(x, y);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d,%d\n&quot;</span>, x, y); &#125;<br></code></pre></td></tr></table></figure><p>四、编程题：</p><p>1.编写程序实现，根据输入的年号和月份，输出该月的天数。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-type">int</span> year;<br><span class="hljs-type">int</span> month;<br><span class="hljs-type">int</span> day;<br><span class="hljs-built_in">scanf</span>(“请输入年份 year =%d”,&amp;year);<br><span class="hljs-built_in">scanf</span>(“请输入月份 month =%d”,&amp;month);<br><span class="hljs-keyword">if</span>(month &gt;= <span class="hljs-number">1</span>&amp;&amp;month &lt;= <span class="hljs-number">12</span>)&#123;<br>    <span class="hljs-keyword">switch</span>(month)&#123;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">5</span>:;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">7</span>:;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">8</span>:;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">10</span>:;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">12</span>: day = <span class="hljs-number">31</span>; <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>: <span class="hljs-keyword">if</span>(year%<span class="hljs-number">4</span> ==<span class="hljs-number">0</span>||year%<span class="hljs-number">100</span>== <span class="hljs-number">0</span>)&#123;day = <span class="hljs-number">29</span>&#125;<span class="hljs-keyword">else</span>&#123;day = <span class="hljs-number">28</span>&#125;; <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">4</span>:;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">6</span>:;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">9</span>:;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">11</span>: day = <span class="hljs-number">30</span>; <span class="hljs-keyword">break</span>;<br>    &#125;<br>    Print(“%d 年%d 月有%d 天”, year, month, day);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-built_in">printf</span>(“月份错误,<span class="hljs-number">1</span> &lt;= month &lt;= <span class="hljs-number">12</span>”);<br>&#125;<br><span class="hljs-number">2.</span>求 <span class="hljs-number">100</span>～<span class="hljs-number">200</span> 间的全部素数<br>    <span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br>    <span class="hljs-type">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> n = <span class="hljs-number">100</span>; n &lt;= <span class="hljs-number">200</span>; n++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt;= n; i++)&#123;<br>            <span class="hljs-keyword">if</span>(i == n)&#123;<br>                print(“%d”, n);<br>            &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(n%i == <span class="hljs-number">0</span>)&#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>3.编写程序实现：一个班 10 名学生，每名学生选修了三门课程，每名学生每门课程有一个成绩，求每门课程 10 名学生平均成绩.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br>Typedf <span class="hljs-class"><span class="hljs-keyword">struct</span>&#123;</span><br><span class="hljs-type">int</span> num;<br><span class="hljs-type">float</span> score [<span class="hljs-number">3</span>];<br>&#125; student;<br><br>Void <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>student Students [<span class="hljs-number">10</span>];<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++)&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">3</span>; j++)&#123;<br><span class="hljs-built_in">scanf</span>(“请输入第%d 名学生的第%d 门课程分数”,(i+<span class="hljs-number">1</span>),(j+<span class="hljs-number">1</span>), Students [i]-&gt; score [j]);<br>&#125;<br>&#125; <br>Float avg [<span class="hljs-number">3</span>];<br>Float sum [<span class="hljs-number">3</span>];<br>For(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++)&#123;<br>For(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">3</span>; j++)&#123;<br>sum [j] += Students [i]-&gt; score [j];<br>&#125;<br>&#125;<br>Printf(“每门课程的平均分数依次是:\n”)<br>For(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">3</span>; i++)&#123;<br>avg [i] = sum [i]/<span class="hljs-number">10</span>;<br><span class="hljs-built_in">printf</span>(“第%d 门课程平均分为 %f 分\n”, i+<span class="hljs-number">1</span>, avg [i]);<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>学校课程</category>
      
      <category>复习题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>复习题</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>145. 二叉树的后序遍历</title>
    <link href="/post/0293a069-f8d9-4fcd-a321-127459fe4d7d/"/>
    <url>/post/0293a069-f8d9-4fcd-a321-127459fe4d7d/</url>
    
    <content type="html"><![CDATA[<h3 id="145-二叉树的后序遍历"><a href="#145-二叉树的后序遍历" class="headerlink" title="145. 二叉树的后序遍历"></a>145. 二叉树的后序遍历</h3><p><code>hexo template generate by typora plugin templater</code></p><h4 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h4><p>给你一棵二叉树的根节点 <code>root</code> ，返回其节点值的 <strong>后序遍历</strong> 。</p><p><strong>示例 1：</strong></p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs inform7">输入：root = <span class="hljs-comment">[1,null,2,3]</span><br>输出：<span class="hljs-comment">[3,2,1]</span><br></code></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs inform7">输入：root = <span class="hljs-comment">[]</span><br>输出：<span class="hljs-comment">[]</span><br></code></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs inform7">输入：root = <span class="hljs-comment">[1]</span><br>输出：<span class="hljs-comment">[1]</span><br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li>树中节点的数目在范围 <code>[0, 100]</code> 内</li><li><code>-100 &lt;= Node.val &lt;= 100</code></li></ul><p><strong>进阶：</strong>递归算法很简单，你可以通过迭代算法完成吗？</p><h4 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h4><h5 id="递归方式"><a href="#递归方式" class="headerlink" title="递归方式"></a>递归方式</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for a binary tree node.</span><br><span class="hljs-comment"> * public class TreeNode &#123;</span><br><span class="hljs-comment"> *     int val;</span><br><span class="hljs-comment"> *     TreeNode left;</span><br><span class="hljs-comment"> *     TreeNode right;</span><br><span class="hljs-comment"> *     TreeNode() &#123;&#125;</span><br><span class="hljs-comment"> *     TreeNode(int val) &#123; this.val = val; &#125;</span><br><span class="hljs-comment"> *     TreeNode(int val, TreeNode left, TreeNode right) &#123;</span><br><span class="hljs-comment"> *         this.val = val;</span><br><span class="hljs-comment"> *         this.left = left;</span><br><span class="hljs-comment"> *         this.right = right;</span><br><span class="hljs-comment"> *     &#125;</span><br><span class="hljs-comment"> * &#125;</span><br><span class="hljs-comment"> */</span><br> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>        <span class="hljs-keyword">final</span> ArrayList&lt;Integer&gt; integers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        <span class="hljs-keyword">public</span> List&lt;Integer&gt; <span class="hljs-title function_">postorderTraversal</span><span class="hljs-params">(TreeNode root)</span> &#123;<br>            <span class="hljs-keyword">if</span> (root==<span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span> integers;<br>            <span class="hljs-keyword">if</span> (root.left != <span class="hljs-literal">null</span>) postorderTraversal(root.left);<br>            <span class="hljs-keyword">if</span> (root.right != <span class="hljs-literal">null</span>) postorderTraversal(root.right);<br>            integers.add(root.val);<br>            <span class="hljs-keyword">return</span> integers;<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
      <category>Leetcode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Leetcode</tag>
      
      <tag>简单</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>724. 寻找数组的中心下标</title>
    <link href="/post/f7b981ec-6bba-4292-9a59-8cb044181eda/"/>
    <url>/post/f7b981ec-6bba-4292-9a59-8cb044181eda/</url>
    
    <content type="html"><![CDATA[<h3 id="724-寻找数组的中心下标"><a href="#724-寻找数组的中心下标" class="headerlink" title="724. 寻找数组的中心下标"></a>724. 寻找数组的中心下标</h3><p><code>hexo template generate by typora plugin templater</code></p><p>**Description **</p><p>给你一个整数数组 <code>nums</code> ，请计算数组的 <strong>中心下标</strong> 。</p><p>数组 <strong>中心下标</strong> 是数组的一个下标，其左侧所有元素相加的和等于右侧所有元素相加的和。</p><p>如果中心下标位于数组最左端，那么左侧数之和视为 <code>0</code> ，因为在下标的左侧不存在元素。这一点对于中心下标位于数组最右端同样适用。</p><p>如果数组有多个中心下标，应该返回 <strong>最靠近左边</strong> 的那一个。如果数组不存在中心下标，返回 <code>-1</code> 。</p><p><strong>示例 1：</strong></p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs tap">输入：nums = [1, 7, 3, 6, 5, 6]<br>输出：3<br>解释：<br>中心下标是<span class="hljs-number"> 3 </span>。<br>左侧数之和 sum = nums[0] + nums[1] + nums[2] =<span class="hljs-number"> 1 </span>+<span class="hljs-number"> 7 </span>+<span class="hljs-number"> 3 </span>=<span class="hljs-number"> 11 </span>，<br>右侧数之和 sum = nums[4] + nums[5] =<span class="hljs-number"> 5 </span>+<span class="hljs-number"> 6 </span>=<span class="hljs-number"> 11 </span>，二者相等。<br></code></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight fix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs fix"><span class="hljs-attr">输入：nums </span>=<span class="hljs-string"> [1, 2, 3]</span><br><span class="hljs-string">输出：-1</span><br><span class="hljs-string">解释：</span><br><span class="hljs-string">数组中不存在满足此条件的中心下标。</span><br></code></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs tap">输入：nums = [2, 1, -1]<br>输出：0<br>解释：<br>中心下标是<span class="hljs-number"> 0 </span>。<br>左侧数之和 sum =<span class="hljs-number"> 0 </span>，（下标<span class="hljs-number"> 0 </span>左侧不存在元素），<br>右侧数之和 sum = nums[1] + nums[2] =<span class="hljs-number"> 1 </span>+ -1 =<span class="hljs-number"> 0 </span>。<br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= nums.length &lt;= 104</code></li><li><code>-1000 &lt;= nums[i] &lt;= 1000</code></li></ul><p><strong>注意：</strong> 本题与主站 1991 题相同：<a href="https://leetcode-cn.com/problems/find-the-middle-index-in-array/">https://leetcode-cn.com/problems/find-the-middle-index-in-array/</a></p><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><h3 id="分析"><a href="#分析" class="headerlink" title="分析:"></a>分析:</h3><p>找到一个位置 , 使得 左右之和相同</p><p>即满足关系 <strong>左侧和 &#x3D; 总和 - nums[i] - 左侧和</strong> </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">pivotIndex</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">total</span> <span class="hljs-operator">=</span> Arrays.stream(nums).sum();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; nums.length; ++i) &#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-number">2</span> * sum + nums[i] == total) &#123;<br>                <span class="hljs-keyword">return</span> i;<br>            &#125;<br>            sum += nums[i];<br>        &#125;<br>        <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>    &#125;<br>&#125;<br><br>作者：力扣官方题解<br>链接：https:<span class="hljs-comment">//leetcode.cn/problems/find-pivot-index/solutions/579264/xun-zhao-shu-zu-de-zhong-xin-suo-yin-by-gzjle/</span><br>来源：力扣（LeetCode）<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">pivotIndex</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums)</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> nums.length;<br>    <span class="hljs-comment">//1.维护两个变量，分别表示当前位置的前后缀和</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">prefix</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">suffix</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-comment">//2.第一个位置的后缀和为[1, n-1]元素和</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt; n; i++) &#123;<br>        suffix += nums[i];<br>    &#125;<br>    <span class="hljs-comment">//如果0位置就是中心下标，直接返回</span><br>    <span class="hljs-keyword">if</span>(prefix == suffix) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-comment">//3.每次更新当前位置的前后缀和</span><br>    <span class="hljs-comment">//当前位置前缀和：每次加上i-1的数 当前位置后缀和，每次扣除i位置数</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt; n; i++) &#123;<br>        prefix += nums[i - <span class="hljs-number">1</span>];<br>        suffix -= nums[i];<br>        <span class="hljs-keyword">if</span>(prefix == suffix) &#123;<br>            <span class="hljs-keyword">return</span> i;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
      <category>Leetcode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Leetcode</tag>
      
      <tag>简单</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Minio对象存储</title>
    <link href="/post/5ba1c0a2-54bf-4057-b728-bd1ab9191349/"/>
    <url>/post/5ba1c0a2-54bf-4057-b728-bd1ab9191349/</url>
    
    <content type="html"><![CDATA[<h3 id="Minio对象存储"><a href="#Minio对象存储" class="headerlink" title="Minio对象存储"></a>Minio对象存储</h3><p><code>hexo template generate by typora plugin templater</code></p><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p><strong>Docker 快速安装 minio</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java">sudo mkdir -p /mnt/minio/data<br><br>sudo docker run \<br>   -p <span class="hljs-number">9000</span>:<span class="hljs-number">9000</span> \<br>   -p <span class="hljs-number">9001</span>:<span class="hljs-number">9001</span> \<br>   --name minio_instance \<br>   -v /mnt/minio/data:/data \<br>   -e <span class="hljs-string">&quot;MINIO_ROOT_USER=minio&quot;</span> \<br>   -e <span class="hljs-string">&quot;MINIO_ROOT_PASSWORD=CYhZ632Fa1DnclQXzvmp&quot;</span> \<br>   quay.io/minio/minio server /data --console-address <span class="hljs-string">&quot;:9001&quot;</span><br></code></pre></td></tr></table></figure><p><img src="image-20240707235948167.png" alt="image-20240707235948167"></p><h2 id="MinIO-root-用户"><a href="#MinIO-root-用户" class="headerlink" title="MinIO root 用户"></a><a href="https://www.minio.org.cn/docs/minio/container/administration/identity-access-management/minio-user-management.html#id9">MinIO <code>root</code> 用户</a></h2><p>MinIO部署中有一个名为 <code>root</code> 的用户，该用户可以访问部署上的所有 操作和资源，无论配置了哪种 <a href="https://www.minio.org.cn/docs/minio/container/administration/identity-access-management.html#minio-authentication-and-identity-management">身份管理器（identity manager）</a>。当一个MinIO服务器首次启动时， 它会通过检查以下环境变量的值来设置 <code>root</code> 用户的凭据：</p><ul><li><code>MINIO_ROOT_USER</code></li><li><code>MINIO_ROOT_PASSWORD</code></li></ul><p>要轮换根用户凭据，需要更新部署中所有MinIO服务器上 的一个或两个环境变量。为根凭据指定 <em>长、 唯一且随机</em> 的字符串。 在存储访问密钥和秘密密钥时， 应采取所有可能的预防措施，以确保只有那些已知且受信任且 <em>需要</em> 超级用户访问权限的个人才能检索到 <code>root</code> 凭据。</p><ul><li>MinIO <em>强烈建议</em> 不要在任何环境（开发、测试或生产） 中使用 <code>root</code> 用户进行常规客户端访问。</li><li>MinIO <em>强烈建议</em> 创建用户，以便每个客户端都能访问 到执行其分配的工作负载所需的最小动作和 资源集。</li></ul><p>如果这些变量未设置，<code>minio</code> 将默认使用 <code>minioadmin</code> 作为 访问密钥，以及 <code>minioadmin</code> 作为秘密密钥。 MinIO <em>强烈建议</em> 不要在任何部署环境中 使用默认凭据。</p><h1 id="创建桶"><a href="#创建桶" class="headerlink" title="创建桶"></a>创建桶</h1><p><img src="image-20240708000100406.png" alt="image-20240708000100406"></p><p><img src="image-20240708001654973.png" alt="image-20240708001654973"></p><p>桶默认可以有三种<strong>Access Policy</strong>策略：</p><ul><li><p><strong>public</strong> : 不经过任何认证可以直接访问资源</p></li><li><p><strong>private</strong>  : 桶设置为<strong>private</strong>后，未经授权不能进行任何操作，所有<strong>Access Rules</strong>失效</p></li><li><p><strong>custom</strong> : 这种<strong>Access Policy</strong>策略是通过如下自定义<strong>Access Rules</strong>出现的</p><ul><li><p><strong>readonly</strong> : 可以设置资源不经过授权，只能读取</p></li><li><p><strong>writeonly</strong> : 资源不经过授权，只能写入</p></li><li><p><strong>readwrite</strong> 资源不经过授权，可读可写</p></li></ul></li></ul><p><img src="image-20240708002956819.png" alt="image-20240708002956819"></p><p>手动上传一些测试文件到 <code>minio-example-bucket/images</code> </p><p>设置桶策略为 <strong>public</strong> 时 , 访问资源  <strong>logo.jpg</strong></p><p>路径为 <code>API地址/桶/路径/文件</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">http:<span class="hljs-comment">//192.168.0.104:9000/minio-example-bucket/images/logo.jpg</span><br></code></pre></td></tr></table></figure><p>访问成功</p><p><img src="image-20240708003312049.png" alt="image-20240708003312049"></p><p>修改成 <strong>private</strong>后再次访问</p><p><img src="image-20240708003356384.png" alt="image-20240708003356384"></p>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
      <category>中间件</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Minio</tag>
      
      <tag>对象存储</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>收藏夹</title>
    <link href="/post/b828993e-4e2e-44ac-8d7f-b449d09b28d7/"/>
    <url>/post/b828993e-4e2e-44ac-8d7f-b449d09b28d7/</url>
    
    <content type="html"><![CDATA[<h3 id="收藏夹"><a href="#收藏夹" class="headerlink" title="收藏夹"></a>收藏夹</h3><p><code>hexo template generate by typora plugin templater</code></p><h1 id="Bookmarks"><a href="#Bookmarks" class="headerlink" title="Bookmarks"></a>Bookmarks</h1><ul><li>收藏夹栏网页工具Edge插件<a href="https://microsoftedge.microsoft.com/addons/detail/adguard-%E5%B9%BF%E5%91%8A%E6%8B%A6%E6%88%AA%E5%99%A8/pdffkfellgipmhklpdmokmckkkfcopbh?hl=zh-CN">AdGuard 广告拦截器 - Microsoft Edge Addons</a><a href="https://microsoftedge.microsoft.com/addons/detail/%E7%AF%A1%E6%94%B9%E7%8C%B4/iikmkjmpaadaobahmlepeloendndfphd?hl=zh-CN">篡改猴 - Microsoft Edge Addons</a><a href="https://microsoftedge.microsoft.com/addons/detail/%E6%B2%99%E6%8B%89%E6%9F%A5%E8%AF%8D%E8%81%9A%E5%90%88%E8%AF%8D%E5%85%B8%E5%88%92%E8%AF%8D%E7%BF%BB%E8%AF%91/idghocbbahafpfhjnfhpbfbmpegphmmp?hl=zh-CN">沙拉查词-聚合词典划词翻译 - Microsoft Edge Addons</a><a href="https://microsoftedge.microsoft.com/addons/detail/dark-reader/ifoakfbpdcdoeenechcleahebpibofpc?hl=zh-CN">Dark Reader - Microsoft Edge Addons</a><a href="https://chat2.jinshutuan.com/#/chat/1702545336821">AIchatOS</a><a href="https://up.woozooo.com/mydisk.php">蓝奏云</a><a href="http://24mail.chacuo.net/">临时邮箱</a><a href="https://htmlrev.com/">Free HTML Templates on HTMLrev</a><a href="https://tools.liumingye.cn/">刘明野的工具箱</a><a href="https://wannengrun.net/zh/">万能命令</a><a href="https://dict.youdao.com/">网易有道</a><a href="https://mail.qq.com/cgi-bin/frame_html?sid=HGTR89w-rXEKE0ci&r=d96cd9437067b2597aef84cf9f0eab0c&lang=zh">QQ邮箱</a><a href="https://qwerty.liumingye.cn/">Qwerty Learner</a><a href="https://chat18.aichatos.xyz/#/chat/1703125037985">AIchatOS</a><a href="https://portal.he3app.com/home/category">My categories - He3</a><a href="https://www.laoyujianli.com/">写简历从未如此简单 - 老鱼简历</a><a href="https://www.jyshare.com/front-end/854/">正则表达式在线测试 | 菜鸟工具</a><a href="https://tool.lu/">在线工具 - 你的工具箱</a>图片工具<a href="https://bigjpg.com/zh">AI图片无损放大</a>[PNG转ICO转换器](<a href="https://pngtoicon.com/cn#:~:text=%E5%A6%82%E4%BD%95%E5%9C%A8%E7%BA%BF%E5%B0%86PNG%E8%BD%AC%E6%8D%A2%E4%B8%BAICO">https://pngtoicon.com/cn#:~:text=如何在线将PNG转换为ICO</a> 1 要开始转换，请将一个或多个PNG图像上传到转换器区域。,2 接下来，使用转换设置，然后单击“转换”按钮。 3 转换完成后，您可以单独或在单个存档中下载ICO图像。)<a href="https://photokit.com/editor/?lang=zh">图片编辑器</a><a href="https://watermark.liumingye.cn/">短视频去水印</a><a href="https://imagetostl.com/cn/convert/file/png/to/svg">免费将 PNG 转换为 SVG - ImageToStl</a><a href="https://products.aspose.app/svg/zh/conversion/png-to-svg">PNG 到 SVG 转换器 | 在线免费将 PNG 转换为 SVG！</a><a href="https://www.aconvert.com/cn/image/png-to-svg/">PNG转SVG - 在线转换图像文件</a>加密工具<a href="https://www.cmd5.com/default.aspx">md5在线解密破解,md5解密加密</a><a href="https://openui.fly.dev/ai/f1BV6D01DxmRws93J2Ul9">Chat Application UI</a><a href="https://cyberchef.org/">CyberChef</a><a href="https://cdkm.com/cn/ppt-to-doc">PPT转WORD - 免费在线将PPT文件转换成WORD</a><a href="https://mylivewallpapers.com/page/4/">MyLiveWallpapers.com - Best Live Wallpaper For Your Desktop PC and Mobile Phone</a><a href="https://pan.baidu.com/s/1u7PNExeoEsYGh5pAnSyocg?from=init&pwd=9987#list/path=%2F">3、黑马程序员Java微服务项目《黑马头条》_免费高速下载|百度网盘-分享无限制</a>学校<a href="https://www.sasu.edu.cn/">四川文理学院欢迎您！</a><a href="http://jwc.sasu.edu.cn/web/web/web/index">欢迎进入四川文理学院教学综合管理系统</a><a href="https://hszg.sasu.edu.cn/index.htm">巴山红-大学生思想政治教育特色资源库</a><a href="https://www.zhihuishu.com/">智慧树网</a><a href="https://i.mooc.chaoxing.com/space/index">学习通</a>娱乐<a href="https://music.163.com/">网易云音乐</a><a href="https://y.qq.com/">QQ音乐</a><a href="https://www.kugou.com/">酷狗音乐</a><a href="https://tools.liumingye.cn/music/#/">MyFreeMP3</a><a href="http://www.wpsseo.cn/">全民解析网</a><a href="https://www.douyin.com/">抖音</a><a href="https://v.qq.com/">腾讯视频</a><a href="https://youku.com/">优酷</a><a href="https://www.iqiyi.com/">爱奇艺</a><a href="https://zhutix.com/">致美化</a><a href="https://player.cmov.cn/?url=">全民解析计费 - 高清播放器</a>动漫<a href="https://v.qq.com/x/cover/324olz7ilvo2j5f/y0048yce1wk.html">吞噬星空第107话_动漫_高清完整版视频在线观看_腾讯视频</a><a href="http://pic.netbian.com/">4K壁纸_4K手机壁纸_4K高清壁纸大全_电脑壁纸_4K,5K,6K,7K,8K壁纸图片素材_彼岸图网</a>学习<a href="https://yiyan.baidu.com/">文心一言</a>社区<a href="https://www.csdn.net/">CSDN</a><a href="https://gitee.com/">Gitee</a><a href="https://github.com/">GitHub</a><a href="https://juejin.cn/">稀土掘金</a><a href="https://leetcode.cn/">LeetCode</a><a href="https://www.nowcoder.com/">牛客网</a><a href="https://www.osrc.com/">OSRC-Open Source Runtime Community</a>开发文档后端<a href="https://sa-token.cc/index.html">Sa-Token</a><a href="https://www.justauth.cn/">JustAuth</a><a href="https://www.springcloud.cc/spring-security.html#oauth2login-sample-initial-setup">Spring Security 中文文档 参考手册 中文版</a><a href="https://doc.qzxdp.cn/spring/spring-boot.html#web.servlet">Spring Boot中文文档</a><a href="https://mybatis.org/spring/zh/index.html">Mybatis-Spring</a><a href="https://baomidou.com/">MyBatis-Plus</a><a href="https://mybatis.net.cn/index.html">MyBatis中文网</a><a href="https://webmagic.io/docs/zh/">WebMagic Documents</a><a href="https://www.yuque.com/zilvbenxiangziyou/fue6m0">蜗牛java重点精讲</a><a href="https://www.easy-es.cn/">Easy-Es</a><a href="https://mybatis-flex.com/">MyBatis-Flex - MyBatis-Flex 官方网站</a><a href="https://multipass.run/install">Multipass 编排虚拟 Ubuntu 实例</a>前端<a href="https://www.w3school.com.cn/">w3school 在线教程</a><a href="http://www.layui-vue.com/zh-CN/components/icon">Layui - Vue 前端 UI 框架</a><a href="https://element-plus.org/zh-CN/#/zh-CN">一个 Vue 3 UI 框架 | Element Plus</a><a href="https://router.vuejs.org/zh/">Vue Router | Vue.js 的官方路由</a><a href="https://cn.vuejs.org/">Vue.js - 渐进式 JavaScript 框架 | Vue.js</a><a href="https://uniapp.dcloud.net.cn/quickstart.html#">uni-app快速上手 | uni-app官网</a><a href="https://ts.nodejs.cn/">TypeScript 中文网</a><a href="https://echarts.apache.org/handbook/zh/get-started/">Apache ECharts</a><a href="https://developer.harmonyos.com/">HarmonyOS应用开发官网 - 华为HarmonyOS打造全场景新服务</a><a href="https://www.mdui.org/zh-cn/">mdui - Material Design 3 (Material You) 开源前端组件库，使用 Web Components 实现</a><a href="https://layui.dev/">Layui - 极简模块化前端 UI 组件库(官方文档)</a><a href="https://www.tampermonkey.net/documentation.php#api:GM_deleteValue">文档 | Tampermonkey</a><a href="https://element.eleme.io/">Element - The world’s most popular Vue UI framework</a><a href="https://v2.cn.vuejs.org/">Vue.js</a><a href="https://www.wangeditor.com/">wangEditor</a><a href="https://www.wangeditor.com/v5/content.html#ajax-%E5%BC%82%E6%AD%A5%E8%AE%BE%E7%BD%AE%E5%86%85%E5%AE%B9">内容处理 | wangEditor</a><a href="https://varlet.gitee.io/varlet-ui/#/zh-CN/link">面向 Vue3 的 Material 风格移动端组件库</a><a href="https://primevue.org/uikit/">UI Kit - PrimeVue</a>后端扩展oauth<a href="https://gitee.com/api/v5/oauth_doc#/">Gitee OAuth 文档</a><a href="https://docs.github.com/zh">GitHub Docs</a><a href="https://wiki.connect.qq.com/%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C_oauth2-0">准备工作_OAuth2.0 — QQ互联WIKI</a><a href="http://localhost:8080/api/auth/oauth2/code/gitee?code=002633296b0f1b5f38aa0e918ac119cad4cf1b218532b28ab705ad910a4019ce">localhost:8080&#x2F;api&#x2F;auth&#x2F;oauth2&#x2F;code&#x2F;gitee?code&#x3D;002633296b0f1b5f38aa0e918ac119cad4cf1b218532b28ab705ad910a4019ce</a><a href="https://app.open.qq.com/p/developer/team_manage/info">开发者信息展示页</a><a href="https://connect.qq.com/manage.html#/">QQ互联管理中心</a><a href="https://www.thymeleaf.org/doc/articles/standarddialect5minutes.html">5 分钟内开始使用标准方言 - Thymeleaf</a><a href="https://javen205.gitee.io/ijpay/">IJPay</a><a href="https://easyexcel.opensource.alibaba.com/">EasyExcel官方文档 - 基于Java的Excel处理工具 | Easy Excel</a><a href="https://sparkjava.com/documentation">Spark Framework</a><a href="https://www.linuxcool.com/">Linux命令大全(手册) – 真正好用的Linux命令在线查询网站</a><a href="https://www.thymeleaf.org/doc/tutorials/3.1/usingthymeleaf.html">教程：使用 Thymeleaf</a><a href="http://easy-trans.fhs-opensource.top/components/faq.html">Easy-Trans | Easy-Trans</a><a href="https://x-file-storage.xuyanwu.cn/#/">XFileStorage</a>QQ机器人QQ官方机器人(api太卡了)<a href="https://bot.q.qq.com/wiki/develop/pythonsdk/#sdk-%E5%AE%89%E8%A3%85">Python SDK 接入指南 | QQ机器人文档</a><a href="https://bot.q.qq.com/wiki/#%E7%AE%80%E4%BB%8B">QQ 机器人 | QQ机器人文档</a><a href="https://github.com/tencent-connect/botpy">GitHub - tencent-connect&#x2F;botpy: QQ频道机器人PythonSDK</a>mirai<a href="https://docs.mirai.mamoe.net/">Mirai QQ机器人</a><a href="https://github.com/mamoe/mirai">GitHub - mamoe&#x2F;mirai: 高效率 QQ 机器人支持库</a>go-cqhttp<a href="https://docs.go-cqhttp.org/">go-cqhttp 帮助中心</a><a href="https://github.com/Mrs4s/go-cqhttp">GitHub - Mrs4s&#x2F;go-cqhttp: cqhttp的golang实现，轻量、原生跨平台.</a>其他<a href="http://blog.fondme.cn/apidoc/jdk-1.8-google/">Overview (Java Platform SE 8 )</a><a href="https://www.w3xue.com/manual/">在线速查手册 - W3xue</a><a href="https://developers.weixin.qq.com/doc/">基础 | 微信开放文档</a><a href="https://q.qq.com/#/">QQ 开放平台</a><a href="https://developer.open-douyin.com/console?type=5">控制台 - 抖音开放平台</a><a href="https://www.runoob.com/">菜鸟教程 - 学的不仅是技术，更是梦想！</a>开发工具<a href="https://devhints.io/">开发者速查表</a><a href="https://uiverse.io/all">3727 UI elements: CSS &amp; Tailwind</a><a href="https://www.free-api.com/">接口大全-免费API,收集所有免费的API</a><a href="https://www.89ip.cn/">免费代理IP_免费HTTP代理IP_SOCKS5代理服务器_优质IP代理_89免费代理IP</a><a href="https://shijianchuo.net/md5/">在线MD5加密</a><a href="https://chat2.jinshutuan.com/#/chat/1702529636770">AIchatOS</a><a href="https://api.gumengya.com/Docs/#/Doc/news">API - 故梦</a><a href="https://uiverse.io/">Explore 3000+ Free UI Elements: CSS &amp; Tailwind</a><a href="https://www.iconfont.cn/">iconfont-阿里巴巴矢量图标库</a><a href="https://svgwave.in/">Svg Wave - A free &amp; beautiful gradient SVG wave Generator.</a><a href="https://www.ventoy.net/cn/index.html">Ventoy</a><a href="https://learngitbranching.js.org/?locale=zh_CN">Learn Git Branching</a>操作系统<a href="https://mirrors.tuna.tsinghua.edu.cn/">清华大学开源软件镜像站 | Tsinghua Open Source Mirror</a><a href="https://next.itellyou.cn/Original/">原版软件</a><a href="https://wiki.archlinuxcn.org/zh-hans/">Arch Linux 中文维基</a><a href="https://cn.ubuntu.com/download">Ubuntu系统下载 | Ubuntu</a><a href="https://www.deepin.org/index/zh">deepin - 基于Linux的开源国产操作系统</a><a href="https://kubuntu.org/">Kubuntu | Friendly Computing</a>博客Maven<a href="https://blog.csdn.net/weixin_44985115/article/details/115253160?ops_request_misc=%7B%22request_id%22:%22170279043216800182182372%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=170279043216800182182372&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-115253160-null-null.142%5Ev96%5Epc_search_result_base8&utm_term=maven&spm=1018.2226.3001.4187">史上最全安装Maven教程</a><a href="https://blog.csdn.net/Q176782/article/details/126628947">Maven打包插件介绍</a><a href="https://blog.csdn.net/weixin_47201411/article/details/125803485">解决maven项目打包运行时出现“没有主清单属性”问题_maven打包没有主清单属性-CSDN博客</a><a href="https://blog.csdn.net/CSDN13822805069/article/details/122858429">JavaWeb项目相关的依赖(Maven仓库)_javaweb项目需要的依赖-CSDN博客</a>JavaEESpring<a href="https://blog.csdn.net/weixin_39709134/article/details/131854218">基于Java+SpringBoot+vue前后端分离在线文档管理系统设计实现_vue文档管理系统-CSDN博客</a><a href="https://blog.csdn.net/qq_41367934/article/details/120268860">Java之spring新手教程(包教包会)_java spring-CSDN博客</a><a href="https://blog.csdn.net/Object_de_Father/article/details/111737733">SpringAOP是啥，怎么用？_什么是springaop-CSDN博客</a><a href="https://blog.csdn.net/fmwind/article/details/81235401">Spring Boot配置接口 WebMvcConfigurer_实现webmvcconfigurer-CSDN博客</a><a href="https://blog.csdn.net/weixin_52850476/article/details/124847728">SSM 整合详细步骤与配置（纯注解）_ssm整合-CSDN博客</a><a href="https://blog.csdn.net/zhangpower1993/article/details/89016503">SpringBoot—WebMvcConfigurer详解-CSDN博客</a><a href="https://blog.csdn.net/weixin_44207403/article/details/106736102">Spring-全面详解（学习总结）_spring全面详解-CSDN博客</a><a href="https://blog.csdn.net/qq_44823283/article/details/125448132">ssm框架中注解总结_ssm框架注解-CSDN博客</a><a href="https://blog.csdn.net/guorui_java/article/details/107347754">Spring常用注解（绝对经典）_spring注解-CSDN博客</a><a href="https://blog.csdn.net/Weixiaohuai/article/details/120853683?ops_request_misc=%7B%22request_id%22:%22170265578916800182118455%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=170265578916800182118455&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-120853683-null-null.142%5Ev96%5Epc_search_result_base8&utm_term=@autowired%E5%92%8C@resource%E5%8C%BA%E5%88%AB&spm=1018.2226.3001.4187">Spring中@Autowired和@Resource的区别_spring resource和autowired-CSDN博客</a><a href="https://blog.csdn.net/xu12387/article/details/88818278?ops_request_misc=%7B%22request_id%22:%22170272983116800184119479%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=170272983116800184119479&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-88818278-null-null.142%5Ev96%5Epc_search_result_base8&utm_term=SpringBoot%E4%BD%BF%E7%94%A8Websocket&spm=1018.2226.3001.4187">springboot（十一）WebSocket实现前后端消息推送_java使用webstocket实现前后端互发消息-CSDN博客</a><a href="https://blog.csdn.net/qq_36942720/article/details/135223537?ops_request_misc=%7B%22request_id%22:%22170661795816800185893998%22,%22scm%22:%2220140713.130102334.pc_all.%22%7D&request_id=170661795816800185893998&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~times_rank-1-135223537-null-null.142%5Ev99%5Epc_search_result_base1&utm_term=springboot3%E9%9B%86%E6%88%90swagger3&spm=1018.2226.3001.4187">SpringBoot3 整合Swagger_springboot3集成swagger-CSDN博客</a><a href="https://blog.csdn.net/shijizhe1/article/details/130495081?ops_request_misc=&request_id=&biz_id=102&utm_term=SpringDoc%E9%85%8D%E7%BD%AE&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-0-130495081.142%5Ev99%5Epc_search_result_base1&spm=1018.2226.3001.4187">基于SpringBoot3从零配置SpringDoc_springdoc 配置-CSDN博客</a><a href="https://blog.csdn.net/glenshappy/article/details/127526427?ops_request_misc=%7B%22request_id%22:%22171073909316800186583736%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=171073909316800186583736&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-127526427-null-null.142%5Ev99%5Epc_search_result_base1&utm_term=spring%E4%BA%8B%E5%8A%A1%E5%A4%B1%E6%95%88%E5%9C%BA%E6%99%AF&spm=1018.2226.3001.4187">spring事务失效的各种场景（13种）_事务失效的几种场景-CSDN博客</a><a href="https://blog.csdn.net/dayuiicghaid/article/details/125260092?ops_request_misc=%7B%22request_id%22:%22171073934416800184193163%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=171073934416800184193163&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-125260092-null-null.142%5Ev99%5Epc_search_result_base1&utm_term=spring%E4%BA%8B%E5%8A%A1%E4%BC%A0%E6%92%AD%E6%9C%BA%E5%88%B6&spm=1018.2226.3001.4187">Spring的7种事务传播机制_spring事务传播机制-CSDN博客</a>SpirngSecurity<a href="https://blog.csdn.net/q66562636/article/details/124914906">SpringSecurity动态鉴权流程解析_springsecurity鉴权-CSDN博客</a><a href="https://blog.csdn.net/weixin_50569789/article/details/123766739?ops_request_misc=%7B%22request_id%22:%22170340687316800180682901%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=170340687316800180682901&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-123766739-null-null.142%5Ev96%5Epc_search_result_base8&utm_term=springsecurity&spm=1018.2226.3001.4187">SpringSecurity框架【详解】-CSDN博客</a><a href="https://blog.csdn.net/weixin_50569789/article/details/123766739">SpringSecurity框架【详解】-CSDN博客</a><a href="https://blog.csdn.net/heshengfu1211/article/details/123725104">手把手带你在集成SpringSecurity的SpringBoot应用中添加短信验证码登录认证功能_springsecurity账号密码登录或 短信验证码登录-CSDN博客</a><a href="https://blog.csdn.net/heshengfu1211/article/details/123621872">一文梳理SpringSecurity中的登录认证流程_public void com.boco.sdp.auth.handler.authenticati-CSDN博客</a>[Spring Security 6.x 系列（5）—— Servlet 认证体系结构介绍_springsecurity 6.1-CSDN博客](<a href="https://blog.csdn.net/ctwy291314/article/details/134615099?ops_request_misc=%7B%22request_id%22:%22170392388416800185894522%22,%22scm%22:%2220140713.130102334.pc_all.%22%7D&request_id=170392388416800185894522&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-4-134615099-null-null.142%5Ev99%5Epc_search_result_base8&utm_term=SpringSecurity6">https://blog.csdn.net/ctwy291314/article/details/134615099?ops_request_misc=%7B%22request%5Fid%22%3A%22170392388416800185894522%22%2C%22scm%22%3A%2220140713.130102334.pc%5Fall.%22%7D&amp;request_id=170392388416800185894522&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-4-134615099-null-null.142^v99^pc_search_result_base8&amp;utm_term=SpringSecurity6</a> 获取 providermanager&amp;spm&#x3D;1018.2226.3001.4187)<a href="https://blog.csdn.net/yorickjun/article/details/116645852?ops_request_misc=%7B%22request_id%22:%22170403015016800226518424%22,%22scm%22:%2220140713.130102334.pc_all.%22%7D&request_id=170403015016800226518424&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-1-116645852-null-null.142%5Ev99%5Epc_search_result_base8&utm_term=SpringSecurity%E4%BD%BF%E7%94%A8OAuth%E8%BF%9B%E8%A1%8C%E7%AC%AC%E4%B8%89%E6%96%B9%E6%8E%88%E6%9D%83&spm=1018.2226.3001.4187">SpringSecurity结合OAuth2实现第三方授权-CSDN博客</a><a href="https://docs.spring.io/spring-security/reference/migration-7/configuration.html#_use_the_lambda_dsl">Configuration Migrations :: Spring Security</a><a href="https://blog.csdn.net/weixin_41866717/article/details/128889475?ops_request_misc=%7B%22request_id%22:%22170434988216800213097969%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=170434988216800213097969&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~baidu_landing_v2~default-1-128889475-null-null.142%5Ev99%5Epc_search_result_base8&utm_term=AuthorizationRequestRepository&spm=1018.2226.3001.4187">Spring Security 源码解读：OAuth2.0 Login Client_spring oauth2.0 login-CSDN博客</a>[新版SpringSecurity配置（SpringBoot＞2.7&amp;SpringSecurity＞5.7）_spring security5.7 配置-CSDN博客](<a href="https://blog.csdn.net/zhongjianboy/article/details/130721399?ops_request_misc=%7B%22request_id%22:%22170454049716777224459308%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=170454049716777224459308&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~baidu_landing_v2~default-1-130721399-null-null.142%5Ev99%5Epc_search_result_base8&utm_term=%E6%96%B0%E7%89%88">https://blog.csdn.net/zhongjianboy/article/details/130721399?ops_request_misc=%7B%22request%5Fid%22%3A%22170454049716777224459308%22%2C%22scm%22%3A%2220140713.130102334..%22%7D&amp;request_id=170454049716777224459308&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~baidu_landing_v2~default-1-130721399-null-null.142^v99^pc_search_result_base8&amp;utm_term=新版</a> AuthenticationManager&amp;spm&#x3D;1018.2226.3001.4187)[SpringSecurity系列&#x2F;spring_security_04&#x2F;Spring Security 整合JWT（四）.md · zhengqingya&#x2F;java-workspace - Gitee.com](<a href="https://gitee.com/zhengqingya/java-workspace/blob/master/SpringSecurity%E7%B3%BB%E5%88%97/spring_security_04/Spring">https://gitee.com/zhengqingya/java-workspace/blob/master/SpringSecurity系列/spring_security_04/Spring</a> Security 整合JWT（四）.md#3security访问鉴权中认证用户信息)Mybatis &amp; Mysql数据库<a href="https://blog.csdn.net/progammer10086/article/details/131123422?ops_request_misc=%7B%22request_id%22:%22171080925916800226586423%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=171080925916800226586423&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-131123422-null-null.142%5Ev99%5Epc_search_result_base1&utm_term=mybatisplus%E6%95%B0%E6%8D%AE%E6%9D%83%E9%99%90%E8%BF%87%E6%BB%A4&spm=1018.2226.3001.4187">MyBatis Plus 拦截器实现数据权限控制(完整版)_mybatisplus数据权限过滤-CSDN博客</a><a href="https://blog.csdn.net/qq_43437874/article/details/118330067?ops_request_misc=&request_id=&biz_id=102&utm_term=mybatisplus%E6%95%B0%E6%8D%AE%E6%9D%83%E9%99%90&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-3-118330067.142%5Ev99%5Epc_search_result_base1&spm=1018.2226.3001.4187">Mybatis-Plus入门系列(18) -基于注解的动态数据权限实现方案_setoperationlist-CSDN博客</a><a href="https://blog.csdn.net/ZGL_cyy/article/details/110668927">Mybatis使用注解方式配置_mybatis 配置类-CSDN博客</a><a href="https://blog.csdn.net/qq_41057885/article/details/125824289">@MapKey用法说明-CSDN博客</a><a href="https://blog.csdn.net/chenbo19867758/article/details/80022354">数据库数值类型对应Integer还是int_integer对应数据库什么类型-CSDN博客</a><a href="https://blog.csdn.net/weixin_44207403/article/details/106565877">mysql全面详解_mysql -h$ip -p$port -u$user -p-CSDN博客</a><a href="https://ximeneschen.blog.csdn.net/article/details/126085063">mybatis中@Results,@ResultMap注解使用-CSDN博客</a><a href="https://blog.csdn.net/weixin_45851945/article/details/114287877">MySQL 有这一篇就够（呕心狂敲37k字，只为博君一点赞！！！）_mysql 有这一篇就够(呕心狂敲37k字,只为博君一点赞!!!)-CSDN博客</a><a href="https://blog.csdn.net/zzzgd_666/article/details/100709605?ops_request_misc=%7B%22request_id%22:%22170308102016800182713615%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=170308102016800182713615&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-100709605-null-null.142%5Ev96%5Epc_search_result_base8&utm_term=%E9%87%87%E7%94%A8%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86&spm=1018.2226.3001.4187">使用二进制位来控制权限,表设计_二进制权限-CSDN博客</a>[Mysql存储json格式数据需要掌握的-CSDN博客](<a href="https://blog.csdn.net/weixin_43888891/article/details/130225150?ops_request_misc=%7B%22request_id%22:%22170876648416800213052264%22,%22scm%22:%2220140713.130102334.pc_all.%22%7D&request_id=170876648416800213052264&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-1-130225150-null-null.142%5Ev99%5Epc_search_result_base1&utm_term=mysql">https://blog.csdn.net/weixin_43888891/article/details/130225150?ops_request_misc=%7B%22request%5Fid%22%3A%22170876648416800213052264%22%2C%22scm%22%3A%2220140713.130102334.pc%5Fall.%22%7D&amp;request_id=170876648416800213052264&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-1-130225150-null-null.142^v99^pc_search_result_base1&amp;utm_term=mysql</a> 使用JSON一张表存系统所有数据&amp;spm&#x3D;1018.2226.3001.4187)[MYSQL JSON 函数_mysql json函数-CSDN博客](<a href="https://blog.csdn.net/qq_28204635/article/details/125554612?ops_request_misc=%7B%22request_id%22:%22171073176516800184180673%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=171073176516800184180673&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-2-125554612-null-null.142%5Ev99%5Epc_search_result_base1&utm_term=mysql">https://blog.csdn.net/qq_28204635/article/details/125554612?ops_request_misc=%7B%22request%5Fid%22%3A%22171073176516800184180673%22%2C%22scm%22%3A%2220140713.130102334..%22%7D&amp;request_id=171073176516800184180673&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-2-125554612-null-null.142^v99^pc_search_result_base1&amp;utm_term=mysql</a> json函数&amp;spm&#x3D;1018.2226.3001.4187)<a href="https://blog.csdn.net/qq_41071754/article/details/130173193?ops_request_misc=%7B%22request_id%22:%22171080985216800227460728%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=171080985216800227460728&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-130173193-null-null.142%5Ev99%5Epc_search_result_base1&utm_term=mybatisplus%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8F%92%E4%BB%B6&spm=1018.2226.3001.4187">【MyBatis Plus】004 – MyBatis Plus高级（AR、MP插件、自定义全局操作、自动填充、逻辑删除、枚举、代码生成器）_mybatisplus自定义插件-CSDN博客</a><a href="https://blog.csdn.net/qq_45732538/article/details/132540943?ops_request_misc=%7B%22request_id%22:%22171082757416800186580596%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=171082757416800186580596&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-132540943-null-null.142%5Ev99%5Epc_search_result_base1&utm_term=ruoyi%E6%95%B0%E6%8D%AE%E6%9D%83%E9%99%90&spm=1018.2226.3001.4187">ruoyi–数据权限_若依数据权限-CSDN博客</a><a href="https://blog.csdn.net/qq_32077121/article/details/135754286?ops_request_misc=%7B%22request_id%22:%22171602962216800215047119%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=171602962216800215047119&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-135754286-null-null.142%5Ev100%5Epc_search_result_base3&utm_term=mysql%E7%9A%84data%E6%96%87%E4%BB%B6%E6%80%8E%E4%B9%88%E8%BF%81%E7%A7%BB&spm=1018.2226.3001.4187">mysql数据迁移之data目录复制方法_mysql data文件移植-CSDN博客</a>JSP<a href="https://blog.csdn.net/a_helloword/article/details/80193810">JSTL核心标签超详细_jstl核心标签库-CSDN博客</a><a href="https://blog.csdn.net/IT_WEH_coder/article/details/126620622">基于MVC三层架构的图书管理系统（JavaWeb+Maven项目）_基于mvc框架的图书管理系统-CSDN博客</a><a href="https://blog.csdn.net/weixin_29002595/article/details/114113009">java web controller_Java web 编程规范 之 controller规范-CSDN博客</a><a href="https://blog.csdn.net/weixin_41995541/article/details/119716580">Java学习之JavaWeb篇_java web-CSDN博客</a><a href="https://blog.csdn.net/liuduke1/article/details/108302474">通过内网穿透让别人访问自己的JavaWeb项目_让别人访问到我的web项目-CSDN博客</a>Redis<a href="https://blog.csdn.net/weixin_43811057/article/details/120382906?ops_request_misc=&request_id=&biz_id=102&utm_term=springBoot%E4%B8%AD%E4%BD%BF%E7%94%A8Redis&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-2-120382906.142%5Ev99%5Epc_search_result_base8&spm=1018.2226.3001.4187">springBoot整合redis使用介绍（详细案例）_redis springboot-CSDN博客</a><a href="https://www.runoob.com/redis/redis-keys.html">Redis 键(key) | 菜鸟教程</a><a href="https://blog.csdn.net/zl1zl2zl3/article/details/110987968?ops_request_misc=%7B%22request_id%22:%22170663375516800215083900%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=170663375516800215083900&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-110987968-null-null.142%5Ev99%5Epc_search_result_base1&utm_term=Cacheable&spm=1018.2226.3001.4187">SpringBoot 缓存之 @Cacheable 详细介绍-CSDN博客</a><a href="https://blog.csdn.net/qq_56098414/article/details/124770709?ops_request_misc=%7B%22request_id%22:%22170663458516800222856260%22,%22scm%22:%2220140713.130102334.pc_all.%22%7D&request_id=170663458516800222856260&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-8-124770709-null-null.142%5Ev99%5Epc_search_result_base1&utm_term=@cacheable%E4%B8%8D%E7%94%9F%E6%95%88&spm=1018.2226.3001.4187">@Cacheable未生效的原因_cacheable注解不生效-CSDN博客</a>实用业务<a href="https://blog.csdn.net/wu1317581750/article/details/89355622?ops_request_misc=&request_id=&biz_id=102&utm_term=%E7%BB%91%E5%AE%9A%E7%AC%AC%E4%B8%89%E6%96%B9%E8%A1%A8&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-2-89355622.142%5Ev99%5Epc_search_result_base1&spm=1018.2226.3001.4187">如何设计 user 表？加入第三方登录呢？_user identifer 表-CSDN博客</a><a href="https://blog.csdn.net/weixin_65549694/article/details/125055243?ops_request_misc=&request_id=&biz_id=102&utm_term=%E9%9B%AA%E8%8A%B1%E7%AE%97%E6%B3%95%E5%A4%B1%E5%8E%BB%E7%B2%BE%E5%BA%A6%E9%97%AE%E9%A2%98&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-2-125055243.142%5Ev99%5Epc_search_result_base1&spm=1018.2226.3001.4187">雪花算法生成id，js处理过程中精度损失_解决官方雪花算法长度过长导致js精度丢失问题-CSDN博客</a><a href="https://blog.csdn.net/L___K__/article/details/132535554?ops_request_misc=%7B%22request_id%22:%22170687047716800180663150%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=170687047716800180663150&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-132535554-null-null.142%5Ev99%5Epc_search_result_base1&utm_term=%E6%9E%9A%E4%B8%BE%E7%B1%BB%E5%BA%8F%E5%88%97%E5%8C%96%E4%B8%8E%E5%8F%8D%E5%BA%8F%E5%88%97&spm=1018.2226.3001.4187">Jackson序列化和反序列化枚举类型_jackson 枚举 反序列化-CSDN博客</a>[一文搞懂Mybatis Plus通用枚举功能使用_mybatisplus 枚举-CSDN博客](<a href="https://blog.csdn.net/qq_37132495/article/details/121433185?ops_request_misc=&request_id=&biz_id=102&utm_term=mybatisplus">https://blog.csdn.net/qq_37132495/article/details/121433185?ops_request_misc=&amp;request_id=&amp;biz_id=102&amp;utm_term=mybatisplus</a> 枚举&amp;utm_medium&#x3D;distribute.pc_search_result.none-task-blog-2<del>all</del>sobaiduweb<del>default-5-121433185.142^v99^pc_search_result_base1&amp;spm&#x3D;1018.2226.3001.4187)[springmvc&#x2F;springboot 序列化枚举类&#x2F;枚举转json、转json忽略字段、fastjon&#x2F;jackson指定字段名称&#x2F;自定义字段名称_枚举类转json-CSDN博客](<a href="https://blog.csdn.net/wangjun5159/article/details/122012182?ops_request_misc=%7B%22request_id%22:%22170687120016800180636269%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=170687120016800180636269&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2">https://blog.csdn.net/wangjun5159/article/details/122012182?ops_request_misc=%7B%22request%5Fid%22%3A%22170687120016800180636269%22%2C%22scm%22%3A%2220140713.130102334..%22%7D&amp;request_id=170687120016800180636269&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2</a></del>all<del>sobaiduend</del>default-1-122012182-null-null.142^v99^pc_search_result_base1&amp;utm_term&#x3D;fastjson序列化枚举&amp;spm&#x3D;1018.2226.3001.4187)<a href="https://blog.csdn.net/fzlhz/article/details/130488405">SpringBoot 采用JsonSerializer和Aop 实现可控制的数据脱敏-CSDN博客</a><a href="https://blog.csdn.net/weixin_41347419/article/details/132811499?ops_request_misc=%7B%22request_id%22:%22171034484416800226538701%22,%22scm%22:%2220140713.130102334.pc_all.%22%7D&request_id=171034484416800226538701&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-7-132811499-null-null.142%5Ev99%5Epc_search_result_base1&utm_term=%E8%87%AA%E5%AE%9A%E4%B9%89%E6%B3%A8%E8%A7%A3+JsonSerializer&spm=1018.2226.3001.4187">Jackson 自定义注解扩展实战-CSDN博客</a><a href="https://blog.csdn.net/weixin_43888891/article/details/130438841">Mybatis读取和存储json类型的数据_mybatis json-CSDN博客</a><a href="https://blog.csdn.net/weixin_42633131/article/details/82873731?ops_request_misc=%7B%22request_id%22:%22171204787016800182169692%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=171204787016800182169692&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-82873731-null-null.142%5Ev100%5Epc_search_result_base1&utm_term=lucene&spm=1018.2226.3001.4187">Lucene介绍与使用-CSDN博客</a><a href="https://blog.csdn.net/m0_37694106/article/details/103997854?ops_request_misc=%7B%22request_id%22:%22171206307016800192263070%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=171206307016800192263070&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-2-103997854-null-null.142%5Ev100%5Epc_search_result_base1&utm_term=lucene%E5%AE%9E%E6%88%98&spm=1018.2226.3001.4187">Lucene入门+实战_lucene实战-CSDN博客</a>[最详细的Lucene实现全文检索_lucene全文检索的实现-CSDN博客](<a href="https://blog.csdn.net/wxc1207/article/details/104968781#2">https://blog.csdn.net/wxc1207/article/details/104968781#2</a>. Lucene介绍)<a href="https://github.com/houbb/sensitive-word?tab=readme-ov-file">houbb&#x2F;sensitive-word: 👮‍♂️The sensitive word tool for java.(敏感词&#x2F;违禁词&#x2F;违法词&#x2F;脏词。基于 DFA 算法实现的高性能 java 敏感词过滤工具框架。请勿发布涉及政治、广告、营销、翻墙、违反国家法律法规等内容。高性能敏感词检测过滤组件，附带繁体简体互换，支持全角半角互换，汉字转拼音，模糊搜索等功能。)</a><a href="https://blog.csdn.net/Ares___/article/details/122102581?ops_request_misc=%7B%22request_id%22:%22170956614116800188551806%22,%22scm%22:%2220140713.130102334.pc_all.%22%7D&request_id=170956614116800188551806&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-14-122102581-null-null.142%5Ev99%5Epc_search_result_base1&utm_term=vo%E5%8C%85,dto%E5%8C%85%E8%BF%98%E6%9C%89entity%E5%8C%85%E5%BA%94%E8%AF%A5%E5%88%86%E5%88%AB%E6%94%BE%E5%9C%A8%E4%BB%80%E4%B9%88%E4%BD%8D%E7%BD%AE%E5%90%88%E9%80%82&spm=1018.2226.3001.4187">快速理解 POJO，VO，DO，DTO，Entity_pojo中的vo包-CSDN博客</a><a href="https://blog.csdn.net/qq_42146402/article/details/127133435">【Java全栈学习路线】最全的Java学习路线及知识清单，Java自学方向指引_csdnjava路线-CSDN博客</a>JavaSEswing&amp;&amp;awt<a href="https://blog.csdn.net/weixin_41571493/article/details/81415327">JavaFX极简入门（利用FXML文件）到精通-CSDN博客</a><a href="https://blog.csdn.net/weixin_42436686/article/details/114007170">swing ui主题_仿IntelliJ Darcula的Swing主题FlatLaf使用方法-CSDN博客</a><a href="https://blog.csdn.net/Rwenkai/article/details/103750099">Graphics类使用的解释与思考_getgraphics()-CSDN博客</a><a href="https://blog.csdn.net/weixin_44893902/article/details/107021644">使用 Eclipse 可视化插件 windowbuilder 进行Java GUI开发（插件安装的两种方法）_eclipse jframe插件-CSDN博客</a><a href="https://blog.csdn.net/dkbnull/article/details/48368913">Eclipse开发环境下Java可视化界面编程-CSDN博客</a><a href="https://blog.csdn.net/xietansheng/article/details/72814492">Java Swing 图形界面开发（目录）_swing 目录页效果-CSDN博客</a><a href="https://blog.csdn.net/weixin_43901038/article/details/105527424">java–图形绘绘制_java 绘制彩图和线图-CSDN博客</a><a href="https://blog.csdn.net/weixin_51201930/article/details/122618959">Java Swing界面设计UI（全）_swing ui-CSDN博客</a><a href="https://blog.csdn.net/myweishanli/article/details/39005139">简述 Java 图形用户界面设计 (Swing)_(1)简述java中图形界面设计过程-CSDN博客</a>JDBC<a href="https://blog.csdn.net/weixin_45195665/article/details/108627965">JDBC从入门到熟练使用——功能类详解、增删改查(CRUD)、sql注入、事务、连接池-CSDN博客</a><a href="https://blog.csdn.net/qq_44890539/article/details/106102018">数据库连接池（常用的德鲁伊）_连接池的流是不关闭的吗-CSDN博客</a>反射<a href="https://blog.csdn.net/sinat_38259539/article/details/71799078">Java基础之—反射（非常重要）-CSDN博客</a>IO流<a href="https://blog.csdn.net/mu_wind/article/details/108674284">【Java基础-3】吃透Java IO：字节流、字符流、缓冲流_缓冲流是字节流吗-CSDN博客</a><a href="https://blog.csdn.net/qq_44543508/article/details/102831084">史上最骚最全最详细的IO流教程，小白都能看懂！_start_input_stream-CSDN博客</a><a href="https://blog.csdn.net/guorui_java/article/details/120643691">Java学习路线总结（思维导图篇）-CSDN博客</a><a href="https://blog.csdn.net/keep12moving/article/details/92666633">什么是javabean及其用法-CSDN博客</a><a href="https://blog.csdn.net/William0318/article/details/102775217">史上最全正则表达式语法，文末附常用表达式！_正则表达式 语法-CSDN博客</a><a href="https://xiaoqijava.blog.csdn.net/article/details/125382015">Java学习路线图-CSDN博客</a><a href="https://blog.csdn.net/m0_37989980/article/details/123391450">Java常用工具类 : StringUtils、CollectionUtils、ArrayUtils、Lists、Maps等_collectionutils map-CSDN博客</a><a href="https://blog.csdn.net/weixin_54963748/article/details/122792274">Java获取图片的RGB值（数字图像处理）_java生成rgb图片-CSDN博客</a><a href="https://blog.csdn.net/weixin_44427181/article/details/124868953">毕业设计不要再做 XX 管理系统了_xx管理系统-CSDN博客</a><a href="https://blog.csdn.net/weixin_44556968/article/details/106568259">Eclipse 从安装、配置、使用、到常见问题以及常用快捷键_eclipse安装时出现的每一个选项是什么-CSDN博客</a>[Java从入门到熟悉的48道练习题<a href="https://blog.csdn.net/m0_47224070/article/details/107349992">完结]_java练习题-CSDN博客</a><a href="https://blog.csdn.net/m0_47224070/article/details/106289745">最实用eclipse常用快捷键_eclipse快速至于末尾-CSDN博客</a>闲谈<a href="https://blog.csdn.net/qq_28168421/article/details/108633288">Github标星超200K，这10个流行的可视化面板你知道几个-CSDN博客</a>爬虫<a href="https://blog.csdn.net/GodTao111/article/details/125260189">java爬虫技术之Selenium爬虫_java selenium 爬虫-CSDN博客</a><a href="https://blog.csdn.net/weixin_43582101/article/details/125905855">sg、xb分析_抖音webmssdk.es5.js-CSDN博客</a><a href="https://blog.csdn.net/u012756235/article/details/123590369">Selenium入门用法详解【Java爬虫】_selenium-java-CSDN博客</a><a href="https://my.oschina.net/flashsword/blog/147334">使用Selenium来抓取动态加载的页面 - 黄亿华的个人空间 - OSCHINA - 中文开源技术交流社区</a><a href="https://developer.microsoft.com/en-us/microsoft-edge/tools/webdriver/?form=MA13LH">Microsoft Edge WebDriver | Microsoft Edge Developer 浏览器驱动</a><a href="https://blog.csdn.net/CYK_byte/article/details/128991985?ops_request_misc=%7B%22request_id%22:%22170978705316800225546993%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=170978705316800225546993&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-2-128991985-null-null.142%5Ev99%5Epc_search_result_base1&utm_term=Seleniumapi&spm=1018.2226.3001.4187">Selenium常用API详解，从入门到进阶（全套）_selenium api-CSDN博客</a><a href="https://www.wetools.com/js-compress">JavaScript 代码压缩工具 - 在线工具-wetools.com微工具</a><a href="https://www.wetools.com/">在线工具大全 | JS加解密 | Base64加解密 | JSON格式化-wetools微工具 - 在线工具-wetools.com微工具</a>数据结构<a href="https://blog.csdn.net/weixin_45682058/article/details/121326496">二叉树：后序遍历非递归算法_二叉树后序遍历非递归-CSDN博客</a><a href="https://blog.csdn.net/jc_hook/article/details/113267537">求子集(递归解法）_递归求子集-CSDN博客</a>Linux<a href="https://blog.csdn.net/qiaoyurensheng/article/details/127872664">windows to go 和 linux to go 制作教程-CSDN博客</a><a href="https://blog.csdn.net/qq_51714354/article/details/116357105">arch linux安装和dwm窗口管理器安装_linux dwm-CSDN博客</a><a href="https://blog.csdn.net/nineya_com/article/details/128244009">Ubuntu 22.04 桌面美化之Mac Big Sur风格_ubuntu美化mac-CSDN博客</a><a href="https://blog.csdn.net/oschina_40530576/article/details/108825394">ubuntu18.04 + windows10双系统使用rEFInd引导(安装rEFInd-minimal主题)_refind主题-CSDN博客</a><a href="https://blog.csdn.net/XM_89/article/details/120403647">【虚拟机】Arch Linux 安装教程(UEFI+GPT)_虚拟机viratualbox安装archlinux教程-CSDN博客</a><a href="https://blog.csdn.net/Linuxprobe18/article/details/127161096">在 Arch Linux 和其他发行版中使用终端连接到 WiFi_archlinux如何连接wifi-CSDN博客</a><a href="https://blog.csdn.net/weixin_39517241/article/details/116944600">linux双系统 引导修复,Linux与windows双系统GRUB引导修复-CSDN博客</a><a href="https://blog.csdn.net/tkzky001/article/details/109110092">dpkg和apt_银河麒麟中dpkg找不到命令-CSDN博客</a><a href="https://cunyu1943.blog.csdn.net/article/details/106248806">玩转 Manjora，原来大神都是这么用 Linux！_manjora linux简介-CSDN博客</a><a href="https://lpwmm.blog.csdn.net/article/details/119056455">在已安装Ventoy的移动设备上安装Linux与配置引导_ventoy linux 安装-CSDN博客</a>解决Bug[No converter for <a href="https://blog.csdn.net/qq_51401283/article/details/126184469">class com.duan.domain.User] with preset Content-Type ‘null‘-CSDN博客</a><a href="https://blog.csdn.net/qq_52889967/article/details/113393225">使用exe4j将java程序打包成可执行文件(.exe)且可以在没有JDK和jre的电脑中运行_exe4j 管理员-CSDN博客</a><a href="https://blog.csdn.net/qq_42701414/article/details/104810570">IDEA 点击右上浏览器访问时直接访问jsp源文件IDEA 点击右上浏览器访问时直接访问jsp源文件_idea点击后直接显示jsp文件-CSDN博客</a><a href="https://justdoit.blog.csdn.net/article/details/89290195">整理一些完全免费开放的API接口_开放性api-CSDN博客</a><a href="https://blog.csdn.net/qq_35999017/article/details/123922952">selenium启动谷歌浏览器的参数设置_enable-automation-CSDN博客</a><a href="https://blog.csdn.net/qq_55069056/article/details/118105044">Tomcat 10中Servlet无法正常使用的解决办法_tomcat 10 ser-CSDN博客</a><a href="https://blog.csdn.net/qq_42898112/article/details/125687691">解决jsp里面写java代码 HTTP 状态 500 - 无法为 JSP 编译类 System.out cannot be resolved to a type_无法为jsp编译类-CSDN博客</a>[openJDK17官方镜像报Error loading shared library libfreetype.so_openjdk17docker镜像-CSDN博客](<a href="https://blog.csdn.net/shengfakun1234/article/details/136565950?ops_request_misc=&request_id=&biz_id=102&utm_term=Error">https://blog.csdn.net/shengfakun1234/article/details/136565950?ops_request_misc=&amp;request_id=&amp;biz_id=102&amp;utm_term=Error</a> loading shared library l&amp;utm_medium&#x3D;distribute.pc_search_result.none-task-blog-2<del>all</del>sobaiduweb<del>default-0-136565950.142^v100^pc_search_result_base1&amp;spm&#x3D;1018.2226.3001.4187)C语言<a href="https://blog.csdn.net/m0_63312733/article/details/122145605">C语言初阶——手把手教零基础&#x2F;新手入门（万字心得笔记）_c语言入门自学零基础-CSDN博客</a>Python<a href="https://blog.csdn.net/qq_34160248/article/details/128509402">整理了上千个 Python 工具库，涵盖24个大方向-CSDN博客</a><a href="https://blog.csdn.net/weixin_47163937/article/details/115818021">【建议收藏】三月份开始，二十二个爬虫项目，无套路，附上源码 全部拿走_3月爬虫-CSDN博客</a><a href="https://blog.csdn.net/newlw/article/details/125231235">基于Python的校园学生一卡通管理系统_ttps:&#x2F;&#x2F;download.csdn.net&#x2F;download&#x2F;sheziqiong&#x2F;85609-CSDN博客</a>IDEA[使用 Idea 的 Diagram 功能查看 UML 类图_idea 显示类图-CSDN博客](<a href="https://blog.csdn.net/ttzommed/article/details/114905865?ops_request_misc=%7B%22request_id%22:%22170254113316800211539733%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=170254113316800211539733&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2">https://blog.csdn.net/ttzommed/article/details/114905865?ops_request_misc=%7B%22request%5Fid%22%3A%22170254113316800211539733%22%2C%22scm%22%3A%2220140713.130102334..%22%7D&amp;request_id=170254113316800211539733&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2</a></del>all<del>sobaiduend</del>default-1-114905865-null-null.142^v96^pc_search_result_base8&amp;utm_term&#x3D;IDEA怎么打开类图&amp;spm&#x3D;1018.2226.3001.4187)前端<a href="https://blog.csdn.net/lunahaijiao/article/details/123625379?ops_request_misc=%7B%22request_id%22:%22170279255416800182770520%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=170279255416800182770520&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-123625379-null-null.142%5Ev96%5Epc_search_result_base8&utm_term=TS%E6%95%99%E7%A8%8B&spm=1018.2226.3001.4187">「1.9W字总结」一份通俗易懂的 TS 教程，入门 + 实战！-CSDN博客</a><a href="https://blog.csdn.net/weixin_47511959/article/details/118152956">CSS——CSS基础（一篇就够用）_css一篇-CSDN博客</a><a href="https://blog.csdn.net/weixin_47511959/article/details/118178073">CSS3总结（核心）_css3 总结-CSDN博客</a><a href="https://blog.csdn.net/qq_56973906/article/details/126774381?ops_request_misc=%7B%22request_id%22:%22170279174016800180639697%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=170279174016800180639697&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-126774381-null-null.142%5Ev96%5Epc_search_result_base8&utm_term=vue%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5&spm=1018.2226.3001.4187">Vue-依赖注入（provide-inject）_vue inject-CSDN博客</a><a href="https://blog.csdn.net/weixin_47124112/article/details/126730114?ops_request_misc=%7B%22request_id%22:%22170279146716800188596694%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=170279146716800188596694&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_click~default-2-126730114-null-null.142%5Ev96%5Epc_search_result_base8&utm_term=vue-router&spm=1018.2226.3001.4187">vue-router 路由超详细教程_vue router-CSDN博客</a>[Vue中watch的详解_vue watch-CSDN博客](<a href="https://blog.csdn.net/weixin_45112114/article/details/125672584?ops_request_misc=%7B%22request_id%22:%22170279200516777224418911%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=170279200516777224418911&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-125672584-null-null.142%5Ev96%5Epc_search_result_base8&utm_term=vue">https://blog.csdn.net/weixin_45112114/article/details/125672584?ops_request_misc=%7B%22request%5Fid%22%3A%22170279200516777224418911%22%2C%22scm%22%3A%2220140713.130102334..%22%7D&amp;request_id=170279200516777224418911&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-125672584-null-null.142^v96^pc_search_result_base8&amp;utm_term=vue</a> watch&amp;spm&#x3D;1018.2226.3001.4187)<a href="https://blog.csdn.net/yifei1234567/article/details/123801171">二、【Vue3】——ref和reactive的使用、区别_vue3ref和reactive区别-CSDN博客</a><a href="https://blog.csdn.net/yifei1234567/article/details/123975970">六、【Vue3】——Vue3生命周期有哪些不同_vue3生命周期的变化-CSDN博客</a><a href="https://blog.csdn.net/yifei1234567/article/details/123992972?ops_request_misc=%7B%22request_id%22:%22170279213616800215079099%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=170279213616800215079099&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-123992972-null-null.142%5Ev96%5Epc_search_result_base8&utm_term=vue%E7%BB%84%E5%90%88%E5%BC%8Fapi%E6%95%99%E7%A8%8B&spm=1018.2226.3001.4187">八、【Vue3】——组合式API（Composition API）_组合式api的功能代码一般都放在什么位置-CSDN博客</a>[Vue Router 路由（路由守卫）—route_6. vue-router 守卫?-CSDN博客](<a href="https://blog.csdn.net/yiyueqinghui/article/details/107291509?ops_request_misc=&request_id=&biz_id=102&utm_term=vue-router">https://blog.csdn.net/yiyueqinghui/article/details/107291509?ops_request_misc=&amp;request_id=&amp;biz_id=102&amp;utm_term=vue-router</a> 路由守卫&amp;utm_medium&#x3D;distribute.pc_search_result.none-task-blog-2<del>all</del>sobaiduweb<del>default-1-107291509.142^v96^pc_search_result_base8&amp;spm&#x3D;1018.2226.3001.4187)[vue路由切换之淡入淡出_elmentplus页面切换过度效果-CSDN博客](<a href="https://blog.csdn.net/qq_39197547/article/details/81911396?ops_request_misc=%7B%22request_id%22:%22170326018716800213081146%22,%22scm%22:%2220140713.130102334.pc_all.%22%7D&request_id=170326018716800213081146&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2">https://blog.csdn.net/qq_39197547/article/details/81911396?ops_request_misc=%7B%22request%5Fid%22%3A%22170326018716800213081146%22%2C%22scm%22%3A%2220140713.130102334.pc%5Fall.%22%7D&amp;request_id=170326018716800213081146&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2</a></del>all<del>first_rank_ecpm_v1</del>rank_v31_ecpm-3-81911396-null-null.142^v96^pc_search_result_base8&amp;utm_term&#x3D;elementplus 路由过渡&amp;spm&#x3D;1018.2226.3001.4187)<a href="https://vue3js.cn/">Vue one peice</a><a href="http://120.79.202.7/">RuoYi 若依官方网站 |后台管理系统|权限管理系统|快速开发框架|企业管理系统|开源框架|微服务框架|前后端分离框架|开源后台系统|RuoYi|RuoYi-Vue|RuoYi-Cloud|RuoYi框架|RuoYi开源|RuoYi视频|若依视频|RuoYi开发文档|若依开发文档|Java开源框架|Java|SpringBoot|SrpingBoot2.0|SrpingCloud|Alibaba|MyBatis|Shiro|OAuth2.0|Thymeleaf|BootStrap|Vue|Element-UI||www.ruoyi.vip</a><a href="https://blog.csdn.net/qinglingLS/article/details/88866438">全栈工程师学习路线（自用）_全栈学习路线-CSDN博客</a>Vue<a href="https://juejin.cn/post/7228990409909108793">Vue3.3 + Vite+ Element-Plus + TypeScript 从0到1搭建企业级后台管理系统（前后端开源） - 掘金</a><a href="edge://newtab/">oo</a><a href="https://juejin.cn/post/6844903476661583880">手摸手，带你用vue撸后台 系列一（基础篇） - 掘金</a><a href="http://localhost:5173/#/home">Vite App</a><a href="http://localhost:8080/hello">hello.html</a><a href="https://blog.csdn.net/lhblmd/article/details/125547525?ops_request_misc=%7B%22request_id%22:%22170862261416800180640925%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=170862261416800180640925&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~baidu_landing_v2~default-4-125547525-null-null.142%5Ev99%5Epc_search_result_base1&utm_term=%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86&spm=1018.2226.3001.4187">状态管理 Pinia-CSDN博客</a><a href="http://127.0.0.1:8080/#/page/4.html">Home</a><a href="https://blog.csdn.net/weixin_43877799/article/details/121536943">js Promise与async&#x2F;await用法详解_js promise away-CSDN博客</a><a href="https://blog.csdn.net/m0_64892344/article/details/131723052?ops_request_misc=%7B%22request_id%22:%22170869066016777224489020%22,%22scm%22:%2220140713.130102334.pc_all.%22%7D&request_id=170869066016777224489020&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-1-131723052-null-null.142%5Ev99%5Epc_search_result_base1&utm_term=pinina%E6%8C%81%E4%B9%85%E5%8C%96%E6%8F%92%E4%BB%B6&spm=1018.2226.3001.4187">Pinia数据持久化插件_pinia的持久化插件-CSDN博客</a><a href="https://blog.csdn.net/weixin_44860226/article/details/127101707?ops_request_misc=%7B%22request_id%22:%22170869532216800213014190%22,%22scm%22:%2220140713.130102334.pc_all.%22%7D&request_id=170869532216800213014190&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-1-127101707-null-null.142%5Ev99%5Epc_search_result_base1&utm_term=npm%E6%8C%89%E7%85%A7%E4%BE%9D%E8%B5%96%E9%80%9F%E5%BA%A6%E6%85%A2&spm=1018.2226.3001.4187">npm与包及npm包下载速度慢问题的解决_npm下载-CSDN博客</a><a href="https://blog.csdn.net/G_ing/article/details/128192480?ops_request_misc=%7B%22request_id%22:%22170869639516800227495235%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=170869639516800227495235&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~baidu_landing_v2~default-1-128192480-null-null.142%5Ev99%5Epc_search_result_base1&utm_term=pinina%E6%8C%81%E4%B9%85%E5%8C%96%E5%AD%98%E5%82%A8&spm=1018.2226.3001.4187">快速搞懂Pinia及数据持久化存储(详细教程)_pinia持久化-CSDN博客</a><a href="https://blog.csdn.net/G_ing/article/details/128242848?spm=1001.2014.3001.5502">Pinia实现数据持久化存储_pinia数据持久存储-CSDN博客</a><a href="https://www.douyin.com/user/MS4wLjABAAAAg31Bd6DkzftOlOyPm4k3mJPQXykir-N50cxhZngfbjgKNDkD3D2vlmt5rdxUXgU_?is_search=0&list_name=follow&modal_id=7287424783573093691&nt=0">vue3的抖音 - 抖音 pinia 持久话存储 插件</a><a href="https://blog.csdn.net/dongzi_yu/article/details/126786022?ops_request_misc=&request_id=&biz_id=102&utm_term=fetch%E5%8F%91%E9%80%81post%E8%A1%A8%E5%8D%95%E5%8F%82%E6%95%B0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-1-126786022.142%5Ev99%5Epc_search_result_base1&spm=1018.2226.3001.4187">js fetch请求使用_js fetch post-CSDN博客</a><a href="https://blog.csdn.net/qq_59747594/article/details/130303158?ops_request_misc=%7B%22request_id%22:%22170887831016800222880693%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=170887831016800222880693&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_click~default-2-130303158-null-null.142%5Ev99%5Epc_search_result_base1&utm_term=vue%E5%8A%A8%E6%80%81%E8%B7%AF%E7%94%B1%E6%9D%83%E9%99%90%E9%85%8D%E7%BD%AE&spm=1018.2226.3001.4187">Vue如何实现权限管理（动态路由addRoutes）_vue动态路由导航菜单权限管理-CSDN博客</a>[TS报错大全_一个模块不能具有多个默认导出-CSDN博客](<a href="https://blog.csdn.net/sjajjajusja/article/details/126829562?ops_request_misc=%7B%22request_id%22:%22170912246516800215020782%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=170912246516800215020782&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-4-126829562-null-null.142%5Ev99%5Epc_search_result_base1&utm_term=import">https://blog.csdn.net/sjajjajusja/article/details/126829562?ops_request_misc=%7B%22request%5Fid%22%3A%22170912246516800215020782%22%2C%22scm%22%3A%2220140713.130102334..%22%7D&amp;request_id=170912246516800215020782&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-4-126829562-null-null.142^v99^pc_search_result_base1&amp;utm_term=import</a> TS1109%3A Expression expected.&amp;spm&#x3D;1018.2226.3001.4187)<a href="https://pinia.web3doc.top/">Home | Pinia 中文文档</a><a href="https://www.yuque.com/zilvbenxiangziyou/fue6m0/ghe3hre1ya0qum1b">Spring基础 - Spring核心之控制反转(IOC)</a>Windows<a href="https://blog.csdn.net/weixin_45300266/article/details/122359920?ops_request_misc=%7B%22request_id%22:%22171134436816800222831444%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=171134436816800222831444&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_click~default-1-122359920-null-null.142%5Ev99%5Epc_search_result_base1&utm_term=windows%E6%B3%A8%E5%86%8C%E8%A1%A8&spm=1018.2226.3001.4187">Windows 注册表(Registry) 学习_window注册表-CSDN博客</a><a href="https://sxyz.blog/about/">About</a><a href="https://blog.csdn.net/m0_61503020/article/details/125456520?ops_request_misc=%7B%22request_id%22:%22171434564016800225530559%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=171434564016800225530559&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-125456520-null-null.142%5Ev100%5Epc_search_result_base1&utm_term=docker&spm=1018.2226.3001.4187">运维</a>运维<a href="https://blog.csdn.net/qq_38505969/article/details/114305742?ops_request_misc=&request_id=&biz_id=102&utm_term=docker-compose&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-0-114305742.142%5Ev100%5Epc_search_result_base1&spm=1018.2226.3001.4187">使用docker-compose高效部署常见应用_docker compose-CSDN博客</a><a href="https://blog.csdn.net/kingsoft88123456/article/details/125548280?ops_request_misc=%7B%22request_id%22:%22171715632316800185891258%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=171715632316800185891258&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~baidu_landing_v2~default-1-125548280-null-null.142%5Ev100%5Epc_search_result_base9&utm_term=%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AEwsl&spm=1018.2226.3001.4187">WSL安装及配置_配置wsl-CSDN博客</a>[用docker-compose编排ELK_elk docker 编排-CSDN博客](<a href="https://blog.csdn.net/liu1430016196/article/details/126406938?ops_request_misc=%7B%22request_id%22:%22171824878116800197011549%22,%22scm%22:%2220140713.130102334.pc_all.%22%7D&request_id=171824878116800197011549&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-2-126406938-null-null.142%5Ev100%5Epc_search_result_base9&utm_term=Kibann">https://blog.csdn.net/liu1430016196/article/details/126406938?ops_request_misc=%7B%22request%5Fid%22%3A%22171824878116800197011549%22%2C%22scm%22%3A%2220140713.130102334.pc%5Fall.%22%7D&amp;request_id=171824878116800197011549&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-2-126406938-null-null.142^v100^pc_search_result_base9&amp;utm_term=Kibann</a> docker &amp;spm&#x3D;1018.2226.3001.4187)<a href="https://blog.csdn.net/bryanwang_3099/article/details/114649881?ops_request_misc=%7B%22request_id%22:%22172011324116800222820027%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=172011324116800222820027&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-114649881-null-null.142%5Ev100%5Epc_search_result_base9&utm_term=%E5%B0%86hexo%E9%83%A8%E7%BD%B2%E5%88%B0gitee&spm=1018.2226.3001.4187">Hexo 部署到 Gitee_hexo部署gitee-CSDN博客</a>开源前端框架<a href="http://admin.layui-vue.com/#/error/404">layui-vue-admin</a><a href="https://gitee.com/lyt-top/vue-next-admin?_from=gitee_search#https://lyt-top.gitee.io/vue-next-admin-preview/#/login">vue-next-admin: 🎉🎉🔥基于vue3.x 、Typescript、vite、Element plus等，适配手机、平板、pc 的后台开源免费模板库（vue2.x请切换vue-prev-admin分支）</a><a href="https://gitee.com/pear-admin/Pear-Admin-Layui?_from=gitee_search#https://gitee.com/link?target=http%3A%2F%2Fwww.pearadmin.com%2Fdoc">Pear Admin Layui: 🌈 Pear Admin 是 一 款 开 箱 即 用 的 前 端 开 发 模 板</a><a href="https://vue.ruoyi.vip/system/menu">若依管理系统</a><a href="https://uiverse.io/elements">4235 UI elements: CSS &amp; Tailwind</a>开源项目<a href="https://gitee.com/Doocs/md?_from=gitee_search">md: ✍ 一款高度简洁的微信 Markdown 编辑器：支持 Markdown 所有基础语法、色盘取色、一键复制并粘贴到公众号后台、多图上传、一键下载文档、自定义 CSS 样式、一键重置等特性</a><a href="https://gitee.com/halo-dev/halo">halo: 强大易用的开源建站工具。</a><a href="https://gitee.com/y_project/RuoYi-Vue">RuoYi-Vue: 🎉 基于SpringBoot，Spring Security，JWT，Vue &amp; Element 的前后端分离权限管理系统，同时提供了 Vue3 的版本</a><a href="https://gitee.com/flashsword20/webmagic?_from=gitee_search">webmagic: webmagic 是一个无须配置、便于二次开发的爬虫框架，它提供简单灵活的API，只需少量代码即可实现一个爬虫。</a><a href="https://github.com/Naccl/NBlog">Naccl&#x2F;NBlog: 🍓 Spring Boot + Vue 前后端分离博客系统 https://naccl.top</a><a href="https://gitee.com/fastdfs100/fastdfs">FastDFS: FastDFS是一款轻量级的开源分布式文件系统，功能包括：文件存储、文件同步、文件上传、文件下载等，解决了文件大容量存储和高性能访问问题。特别适合以文件为载体的在线服务，如图片、视频、文档服务等等。FastDFS相关文章请搜索微信公众号：fastdfs</a><a href="https://dromara.org/zh/projects/">项目</a><a href="https://github.com/Meekdai/Gmeek">Meekdai&#x2F;Gmeek: Gmeek is a Blog All in Github</a><a href="https://hexo.io/zh-cn/">Hexo</a><a href="https://hexo.io/plugins/">Plugins | Hexo</a><a href="https://github.com/obgnail/typora_plugin?tab=readme-ov-file">obgnail&#x2F;typora_plugin: Typora plugin. Feature enhancement tool | Typora 插件，功能增强工具</a><a href="http://localhost:4000/post/c83e1014-1e8b-401b-8369-ec9a1a9a42c3/">Hexo 与 Typora 最佳组合 - Hexo</a>User<a href="https://homura.live/links/">友链 | Homura’s Blog</a><a href="https://www.bilibili.com/">哔哩哔哩</a>垃圾<a href="https://zhuanlan.zhihu.com/p/686846115">英文简历模板（通用10篇） - 知乎</a><a href="https://ctool.dev/tool.html#/tool/bcrypt?category=encryption">Ctool</a>Local<a href="http://localhost:8080/">8080@localhost</a><a href="http://localhost:5173/">5173@localhost</a><a href="http://192.168.0.104:9999/">1Panel@beelink:9999</a><a href="http://192.168.0.104:9998/#/">CasaOS@beelink:9998</a><a href="http://192.168.0.104:8848/nacos/">Nacos@beelink:8848</a><a href="http://192.168.0.104:9997/">halo@beelink:9997</a><a href="http://192.168.0.104:9001/">MinIO@beelink:9001</a><a href="http://192.168.0.104:8858/#/dashboard">Sentinel Dashboard@beelink:8858</a><a href="http://192.168.0.104:44444/">YesPlayMusic@beelink:44444</a><a href="http://192.168.0.104:40157/#/">文件快递柜-FileCodeBox@beelink:40157</a><a href="http://192.168.0.104:9600/">RabbitMQ@Beelink:9600</a>AI<a href="https://xinghuo.xfyun.cn/">讯飞星火认知大模型-AI大语言模型-星火大模型-科大讯飞</a><a href="https://chat18.aichatos.xyz/#/chat/1708411710252">AIchatOS</a><a href="https://yiyan.baidu.com/">文心一言</a><a href="https://kimi.moonshot.cn/?utm_campaign=TR_wl2nZci6&utm_content=&utm_medium=B%E7%AB%99&utm_source=CH_E9CmoK5c&utm_term=">Kimi.ai - 帮你看更大的世界</a><a href="https://tongyi.aliyun.com/qianwen?sessionId=a8b5f7a9ac0b4693858ee222207dd7eb">通义</a></li><li><a href="https://www.cnblogs.com/zs0322/p/12289403.html">纯手写！！转移系统用户资料和更改AppData路径的方法 不接受反驳！ - Java_ZS滴水穿石 - 博客园</a></li><li><a href="https://zxmls520.github.io/zxmls/#/">莫老师的附件表</a></li><li><a href="https://blog.csdn.net/GenuineMonster/article/details/83685479">Grub2主题修改和美化——–Linux&amp;Windows-CSDN博客</a></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>SpringBoot集成MyBatis-Plus</title>
    <link href="/post/63700d6a-0be1-4d94-be3f-e673496f2620/"/>
    <url>/post/63700d6a-0be1-4d94-be3f-e673496f2620/</url>
    
    <content type="html"><![CDATA[<h3 id="SpringBoot集成MyBatis-Plus"><a href="#SpringBoot集成MyBatis-Plus" class="headerlink" title="SpringBoot集成MyBatis-Plus"></a>SpringBoot集成MyBatis-Plus</h3><p><code>hexo template generate by typora plugin templater</code></p><p>使用Java开发Web应用与数据库交互是绕不开的话题，与数据库交互的技术包含最基础的JDBC，和在其上封装的框架如：Hibernate、MyBatis、JPA等，目前市场上使用较多的是MyBatis，而MyBatis-Plus是在其基础上的进一步增强，来简化MyBatis使用提高开发效率，还增强了一部分功能，详细信息可以移步<a href="https://baomidou.com/">【MyBatis-Plus官网】</a>。本文档讲解内容如下：</p><ul><li>MyBatis-Plus快速使用</li><li>条件构造器</li><li>逻辑删除，主键生成策略，乐观锁插件</li><li>多表查询</li><li>多数据源</li></ul><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p><a href="https://github.com/baomidou/mybatis-plus">MyBatis-Plus</a> 是一个 <a href="https://www.mybatis.org/mybatis-3/">MyBatis</a> 的增强工具，在 MyBatis 的基础上只做增强不做改变，为简化开发、提高效率而生。</p><p><img src="1719555804613-99c5a108-6993-474f-a646-60a171f5f976.png" alt="img"></p><h2 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h2><ul><li><strong>无侵入</strong>：只做增强不做改变，引入它不会对现有工程产生影响，MyBatis可照常使用</li><li><strong>损耗小</strong>：启动即会自动注入基本 CURD，性能基本无损耗，直接面向对象操作</li><li><strong>强大的 CRUD 操作</strong>：内置通用 Mapper、通用 Service，仅仅通过少量配置即可实现单表大部分 CRUD 操作，更有强大的条件构造器，满足各类使用需求</li><li><strong>支持 Lambda 形式调用</strong>：通过 Lambda 表达式，方便的编写各类查询条件，无需再担心字段写错</li><li><strong>支持主键自动生成</strong>：支持多达 4 种主键策略（内含分布式唯一 ID 生成器 - Sequence），可自由配置，完美解决主键问题</li><li><strong>支持 ActiveRecord 模式</strong>：支持 ActiveRecord 形式调用，实体类只需继承 Model 类即可进行强大的 CRUD 操作</li><li><strong>支持自定义全局通用操作</strong>：支持全局通用方法注入（ Write once, use anywhere ）</li><li><strong>内置代码生成器</strong>：采用代码或者 Maven 插件可快速生成 Mapper 、 Model 、 Service 、 Controller 层代码，支持模板引擎，更有超多自定义配置等您来使用</li><li><strong>内置分页插件</strong>：基于 MyBatis 物理分页，开发者无需关心具体操作，配置好插件之后，写分页等同于普通 List 查询</li><li><strong>分页插件支持多种数据库</strong>：支持 MySQL、MariaDB、Oracle、DB2、H2、HSQL、SQLite、Postgre、SQLServer 等多种数据库</li><li><strong>内置性能分析插件</strong>：可输出 SQL 语句以及其执行时间，建议开发测试时启用该功能，能快速揪出慢查询</li><li><strong>内置全局拦截插件</strong>：提供全表 delete 、 update 操作智能分析阻断，也可自定义拦截规则，预防误操作</li></ul><h2 id="支持的数据库"><a href="#支持的数据库" class="headerlink" title="支持的数据库"></a>支持的数据库</h2><p><img src="1719555988842-8395b5a9-2e1c-4415-a3f0-f1beaa25601a.png" alt="img"></p><h1 id="准备环境"><a href="#准备环境" class="headerlink" title="准备环境"></a>准备环境</h1><p>在介绍mybatis-plus逻辑删除和自动填充时首先搭建项目和准备一张数据表，此案例通过springboot+mysql+mybatis-plus实现</p><h2 id="创建数据表"><a href="#创建数据表" class="headerlink" title="创建数据表"></a>创建数据表</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `tb_student` (<br>  `id` <span class="hljs-type">bigint</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="hljs-string">&#x27;学生ID&#x27;</span>,<br>  `class_id` <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;班级编号&#x27;</span>,<br>  `dorm_id` <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;宿舍编号&#x27;</span>,<br>  `major_id` <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;专业id&#x27;</span>,<br>  `stu_no` <span class="hljs-type">varchar</span>(<span class="hljs-number">50</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;学号&#x27;</span>,<br>  `stu_name` <span class="hljs-type">varchar</span>(<span class="hljs-number">50</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;学生姓名&#x27;</span>,<br>  `stu_sex` <span class="hljs-type">char</span>(<span class="hljs-number">1</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;0&#x27;</span> COMMENT <span class="hljs-string">&#x27;用户性别（0男 1女 2未知）&#x27;</span>,<br>  `stu_mobile` <span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;手机号&#x27;</span>,<br>  `status` <span class="hljs-type">char</span>(<span class="hljs-number">1</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;学生状态（0正常 1请假 2休学 3退学 4毕业）&#x27;</span>,<br>  `is_delete` <span class="hljs-type">BINARY</span>(<span class="hljs-number">1</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;0&#x27;</span> COMMENT <span class="hljs-string">&#x27;删除标志（0未删除 1已删除）&#x27;</span>,<br>  `create_id` <span class="hljs-type">bigint</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> COMMENT <span class="hljs-string">&#x27;创建者&#x27;</span>,<br>`update_id` <span class="hljs-type">bigint</span>(<span class="hljs-number">63</span>) <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> COMMENT <span class="hljs-string">&#x27;修改者&#x27;</span>,<br>  `create_time` datetime <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;创建时间&#x27;</span>,<br>  `update_time` datetime <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;更新时间&#x27;</span>,<br>  `remark` <span class="hljs-type">varchar</span>(<span class="hljs-number">500</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;备注&#x27;</span>,<br>  <span class="hljs-keyword">PRIMARY</span> KEY (`id`) <span class="hljs-keyword">USING</span> BTREE<br>) ENGINE<span class="hljs-operator">=</span>InnoDB AUTO_INCREMENT<span class="hljs-operator">=</span><span class="hljs-number">1</span> <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8mb4 ROW_FORMAT<span class="hljs-operator">=</span><span class="hljs-keyword">DYNAMIC</span> COMMENT<span class="hljs-operator">=</span><span class="hljs-string">&#x27;学生信息记录&#x27;</span>;<br></code></pre></td></tr></table></figure><h2 id="创建maven项目"><a href="#创建maven项目" class="headerlink" title="创建maven项目"></a>创建maven项目</h2><p>在IDEA中创建一个maven项目，引入springboot、mysql、mybatis-plus依赖即可</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.7.12<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.stt<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>stt-mybatis-plus<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">description</span>&gt;</span>Mybatis-plus技术栈<span class="hljs-tag">&lt;/<span class="hljs-name">description</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.7.12<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>8.0.32<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.baomidou<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.5.3.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.18.26<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="application-yml配置文件"><a href="#application-yml配置文件" class="headerlink" title="application.yml配置文件"></a>application.yml配置文件</h2><p>在springboot配置文件中配置数据库</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># 数据库配置</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">datasource:</span><br>    <span class="hljs-attr">driver-class-name:</span> <span class="hljs-string">com.mysql.cj.jdbc.Driver</span><br>    <span class="hljs-attr">url:</span> <span class="hljs-string">jdbc:mysql://localhost:3306/mybatis-plus?useUnicode=true&amp;characterEncoding=utf8&amp;zeroDateTimeBehavior=convertToNull&amp;useSSL=false&amp;serverTimezone=GMT%2B8&amp;allowMultiQueries=true</span><br>    <span class="hljs-attr">username:</span> <span class="hljs-string">root</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-string">Shitian123456</span><br><span class="hljs-comment"># mybatis-plus配置</span><br><span class="hljs-attr">mybatis-plus:</span><br>  <span class="hljs-attr">configuration:</span><br>  <span class="hljs-comment"># 配置输出sql到控制台</span><br>    <span class="hljs-attr">log-impl:</span> <span class="hljs-string">org.apache.ibatis.logging.stdout.StdOutImpl</span><br></code></pre></td></tr></table></figure><h2 id="创建实体类"><a href="#创建实体类" class="headerlink" title="创建实体类"></a>创建实体类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.stt.entity;<br><br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.annotation.*;<br><span class="hljs-keyword">import</span> lombok.Data;<br><span class="hljs-keyword">import</span> java.io.Serializable;<br><span class="hljs-keyword">import</span> java.time.LocalDateTime;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> 石添</span><br><span class="hljs-comment"> * 学生实体类</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-comment">// 映射的数据表名称</span><br><span class="hljs-meta">@TableName(value = &quot;tb_student&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br><br>    <span class="hljs-meta">@TableId(type = IdType.AUTO)</span><br>    <span class="hljs-keyword">private</span> Long id;<br>    <span class="hljs-keyword">private</span> Integer classId;<br>    <span class="hljs-keyword">private</span> Integer dormId;<br>    <span class="hljs-keyword">private</span> Integer majorId;<br>    <span class="hljs-keyword">private</span> String stuNo;<br>    <span class="hljs-keyword">private</span> String stuName;<br>    <span class="hljs-keyword">private</span> Integer stuSex;<br>    <span class="hljs-keyword">private</span> String stuMobile;<br>    <span class="hljs-keyword">private</span> Integer status;<br>    <span class="hljs-keyword">private</span> Integer isDelete;<br>    <span class="hljs-keyword">private</span> Long createId;<br>    <span class="hljs-keyword">private</span> Long updateId;<br>    <span class="hljs-keyword">private</span> LocalDateTime createTime;<br>    <span class="hljs-keyword">private</span> LocalDateTime updateTime;<br>    <span class="hljs-keyword">private</span> String remark;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="创建Mapper"><a href="#创建Mapper" class="headerlink" title="创建Mapper"></a>创建Mapper</h2><p>Mapper接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">StudentMapper</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BaseMapper</span>&lt;Student&gt; &#123;<br>&#125;<br></code></pre></td></tr></table></figure><p>Mapper映射文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">mapper</span> <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.stt.mapper.StudentMapper&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="创建Service"><a href="#创建Service" class="headerlink" title="创建Service"></a>创建Service</h2><p>service接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">IStudentService</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">IService</span>&lt;Student&gt; &#123;<br>&#125;<br></code></pre></td></tr></table></figure><p>service实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StudentServiceImpl</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ServiceImpl</span>&lt;StudentMapper, Student&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title class_">IStudentService</span> &#123;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="springboot项目主类"><a href="#springboot项目主类" class="headerlink" title="springboot项目主类"></a>springboot项目主类</h2><p>在该类中注上mapper扫描</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-comment">// 扫描mapper</span><br><span class="hljs-meta">@MapperScan(&quot;com.stt.mapper&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyBatisPlusApplication</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        SpringApplication.run(MyBatisPlusApplication.class,args);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>此时准备工作完成，即创建数据表和springboot项目</p><h1 id="逻辑删除"><a href="#逻辑删除" class="headerlink" title="逻辑删除"></a>逻辑删除</h1><p>逻辑删除是为了方便数据恢复和保护数据潜在价值的一种手段，即当用户不需要某一个数据时就希望删除掉，此时有物理删除和逻辑删除两种方案。</p><ul><li>物理删除：将数据真实的从数据库【磁盘】中删除掉</li><li>逻辑删除：数据并没有真正删除，还在数据库【磁盘】上个保存，只是在查询时过滤掉被删除的数据，对用户来说就是删除掉了</li></ul><h2 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h2><p>物理删除通知数据库执行删除操作。即删除的sql</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 删除id为1的学生</span><br><span class="hljs-keyword">DELETE</span> <span class="hljs-keyword">FROM</span> tb_student <span class="hljs-keyword">WHERE</span> id <span class="hljs-operator">=</span> <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>逻辑删除的实现方式是在数据表中添加一个是否删除字段，注意该字段不要和数据的状态字段耦合，比如学生有很多状态：正常，请假，休学，退学。可以使用status字段表示，而该学生被删除，则可以使用is_delete字段表示，我们暂定0为未删除，1为删除，那么在删除数据时其实就是修改该字段的值了</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">UPDATE</span> tb_student <span class="hljs-keyword">set</span> is_delete <span class="hljs-operator">=</span> <span class="hljs-number">1</span> <span class="hljs-keyword">WHERE</span> id <span class="hljs-operator">=</span> <span class="hljs-number">2</span>;<br></code></pre></td></tr></table></figure><p>在查询时，就需要带上is_delete字段作为判断条件</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 查询所有学生</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> tb_student <span class="hljs-keyword">WHERE</span> is_delete <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br></code></pre></td></tr></table></figure><p>在项目中实现原理相同，此时发现一个不方便的问题就是在查询时都要带上is_delete &#x3D; 0的判断，删除的话修改该字段的值，mybatis-plus提供了<code>逻辑删除</code>的机制</p><p>查询：自动追加is_delete &#x3D; 0的条件，过滤掉已被删除的数据</p><p>修改：修改时也会追加is_delete &#x3D; 0的条件，防止修改已被删除的数据</p><p>删除：将删除变为update语句，语句同上述逻辑删除sql</p><h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><p>使用方法有两种方式，但都需要保障一个前提：</p><ul><li>保障数据表中有一个字段标识该数据是否删除，类型无所谓【推荐使用Integer、Boolean】类型，官方还推荐使用LocalDateTime，emmm~~~~</li></ul><p>实现方式：</p><ul><li>在实体类中的对应字段上添加@TableLogic注解 </li><li>或者 在application.yml中配置mybatis-plus的逻辑删除</li></ul><p>此时数据表和实体类中都已经有一个名为is_delete的字段标识是否删除，当然该字段的名字你可以任意取名，下边就从第二步开始</p><h3 id="TableLogic注解"><a href="#TableLogic注解" class="headerlink" title="@TableLogic注解"></a>@TableLogic注解</h3><p>在实体类中的isDelete字段上添加该注解，该注解有两个属性，意义如下</p><ul><li>value：表示未删除的值，0代表如果值为0则是没有删除</li><li>delval：表示已删除的值，1代表该数据已删除</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@TableLogic(value = &quot;0&quot;,delval = &quot;1&quot;)</span><br><span class="hljs-keyword">private</span> Integer isDelete;<br></code></pre></td></tr></table></figure><h3 id="查询测试"><a href="#查询测试" class="headerlink" title="查询测试"></a>查询测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">search</span><span class="hljs-params">()</span> &#123;<br>    List&lt;Student&gt; list = studentService.list();<br>    list.forEach(System.out::println);<br>&#125;<br></code></pre></td></tr></table></figure><p>执行执行，发现控制台输出的sql中自动拼接上where条件</p><p><img src="1691327814803-c519700a-7cdf-475c-a3fe-98584ee24cc5.png" alt="img"></p><h3 id="删除测试"><a href="#删除测试" class="headerlink" title="删除测试"></a>删除测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">remove</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">remove</span> <span class="hljs-operator">=</span> studentService.removeById(<span class="hljs-number">3L</span>);<br>    <span class="hljs-keyword">if</span>(remove) System.out.println(<span class="hljs-string">&quot;删除成功&quot;</span>);<br>    <span class="hljs-keyword">else</span> System.out.println(<span class="hljs-string">&quot;删除失败&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>此时的删除sql就变成了update</p><p><img src="1691328085844-676498b1-602b-4eb6-8b32-40c20370e933.png" alt="img"></p><h3 id="application配置方式"><a href="#application配置方式" class="headerlink" title="application配置方式"></a>application配置方式</h3><p>还有一种方式就是不使用注解，在application.yml文件中配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># Mybatis-plus配置</span><br><span class="hljs-attr">mybatis-plus:</span><br>  <span class="hljs-attr">configuration:</span><br>    <span class="hljs-attr">log-impl:</span> <span class="hljs-string">org.apache.ibatis.logging.stdout.StdOutImpl</span><br>  <span class="hljs-attr">global-config:</span><br>    <span class="hljs-attr">db-config:</span><br>      <span class="hljs-attr">logic-delete-field:</span> <span class="hljs-string">isDelete</span> <span class="hljs-comment"># 全局逻辑删除的实体字段名(since 3.3.0)</span><br>    <span class="hljs-comment"># 如果你的逻辑删除值和默认值相同则可以不配置以下两项</span><br>      <span class="hljs-attr">logic-delete-value:</span> <span class="hljs-number">1</span> <span class="hljs-comment"># 逻辑已删除值(默认为 1)</span><br>      <span class="hljs-attr">logic-not-delete-value:</span> <span class="hljs-number">0</span> <span class="hljs-comment"># 逻辑未删除值(默认为 0)</span><br></code></pre></td></tr></table></figure><p>两种效果相同，不过推荐使用配置文件的方式，好处在于全局共用，即不需要每个实体类中都在isDelete属性上写@TableLogic注解，前提是你的项目中的逻辑删除规则是一样的哦</p><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p>也不是说项目中都要使用逻辑删除，是需求而定，逻辑删除有一个致命缺陷在于如果数据量剧增，mysql在单表数据达到300万以上时查询性能就会明显下降，此时可以将逻辑删除的数据统一迁移到另一个表中存储，正常的业务还是使用原表，如果需要用到原来被删除的数据，则可以到另一张表中查询。</p>]]></content>
    
    
    
    <tags>
      
      <tag>Spring</tag>
      
      <tag>Mybatis</tag>
      
      <tag>Mybatis Plus</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>夯实Spring中的AOP</title>
    <link href="/post/2b22b4e4-e1a8-49dd-aa81-9513c45fda35/"/>
    <url>/post/2b22b4e4-e1a8-49dd-aa81-9513c45fda35/</url>
    
    <content type="html"><![CDATA[<h3 id="夯实Spring中的AOP"><a href="#夯实Spring中的AOP" class="headerlink" title="夯实Spring中的AOP"></a>夯实Spring中的AOP</h3><p><code>hexo template generate by typora plugin templater</code></p><p>AOP全称【Aspect Oriented Programming】意为<strong>面向切面编程</strong>，通过预编译和运行期间通过<strong>动态代理</strong>来实现程序功能统一维护的技术。AOP思想是OOP【面向对象】的延续，在OOP中以类【class】作为基本单元, 而 AOP中的基本单元是 Aspect【切面】，AOP是软件行业的热点，也是Spring框架中的一个重要内容。</p><p><img src="1720316617398-1a3a8d73-b26f-40a1-bd7b-99d37dfc65f6.jpeg" alt="img"></p><h1 id="什么是AOP"><a href="#什么是AOP" class="headerlink" title="什么是AOP"></a>什么是AOP</h1><p>在大多数的业务中都需要验证用户是否登录才可以访问接口内容，如果没有登录或没有权限就会做出对应提示，比如下方的添加用户和修改用户的功能：</p><p><strong>添加用户流程：</strong></p><p><img src="1716860068826-1d200aff-3f9b-403d-8bf3-ae89a77a15ca.png" alt="img"></p><p><strong>修改用户流程：</strong></p><p><img src="1716860027510-c1c40d30-0cd0-44dd-87f1-da334cc1e555.png" alt="img"></p><p>从以上流程可以看出，判断权限和记录日志在方法中都需要调用，如果每个流程中都加入判断权限和记录日志的代码有两个弊端：</p><ul><li>每个业务代码中都需要调用相同的权限判断功能比较<strong>重复</strong>，比较冗余</li><li>业务代码中调用非业务功能，增加<strong>耦合</strong>，<strong>污染</strong>业务流程</li></ul><p>由此AOP思想就出现了，理想的架构就是将<strong>权限判断</strong>、<strong>记录日志</strong>这些共用功能抽离到一个<strong>切片</strong>中，等到需要时再<strong>织入</strong>对象中去，从而改变其原有的行为。</p><p><img src="1716860978742-1608142e-f237-4c4c-8809-9ce78891a11b.png" alt="img"></p><p><strong>AOP</strong>其实只是<strong>OOP</strong>的补充而已。OOP从横向上区分出一个个的类来，而AOP则从纵向上向对象中加入特定的代码。有了AOP，OOP变得立体了。从技术上来说，AOP基本上是通过代理模式实现。</p><h1 id="AOP体系"><a href="#AOP体系" class="headerlink" title="AOP体系"></a>AOP体系</h1><p><img src="1716861714545-104cd564-3e87-4449-beb6-538a90041b07.png" alt="img"></p><h2 id="AOP术语"><a href="#AOP术语" class="headerlink" title="AOP术语"></a>AOP术语</h2><h3 id="通知-增强【advice】"><a href="#通知-增强【advice】" class="headerlink" title="通知&#x2F;增强【advice】"></a>通知&#x2F;增强【advice】</h3><p>就是增强的功能，比如我们的程序中需要添加日志，事务等功能，我们当然需要将代码写好，封装到中，我们写好的这个方法就是通知，也可以称为<strong>增强</strong>，通知分为前置通知，后置通知，环绕通知，异常通知等，说明加在连接点的什么位置，什么时候调用</p><h3 id="连接点【Join-Point】"><a href="#连接点【Join-Point】" class="headerlink" title="连接点【Join Point】"></a>连接点【Join Point】</h3><p>可以增强的功能，比如添加、修改、删除等方法都可以被增强。</p><h3 id="切点【Pointcut】"><a href="#切点【Pointcut】" class="headerlink" title="切点【Pointcut】"></a>切点【Pointcut】</h3><p>实际上增强的方法，如上实际增强添加、删除功能，这个添加、删除就是切点。也称为切入点。需要使用表达式配置</p><h3 id="切面-【Aspect】"><a href="#切面-【Aspect】" class="headerlink" title="切面 【Aspect】"></a>切面 【Aspect】</h3><p>切点、增强所在的那个类叫切面，这些代码需要编写出来，这个配置的类就是切面</p><h3 id="引入【introduction】"><a href="#引入【introduction】" class="headerlink" title="引入【introduction】"></a><strong>引入【introduction】</strong></h3><p>允许我们向现有的类添加新方法属性。这不就是把切面（也就是新方法属性：通知定义的）用到目标类中吗</p><h3 id="目标对象【Target】"><a href="#目标对象【Target】" class="headerlink" title="目标对象【Target】"></a><strong>目标对象【Target】</strong></h3><p>引入中所提到的目标类，也就是要被通知的对象，也就是真正的业务逻辑，他可以在毫不知情的情况下，被咱们织入切面。而自己专注于业务本身的逻辑。</p><h3 id="代理【proxy】"><a href="#代理【proxy】" class="headerlink" title="代理【proxy】"></a><strong>代理【proxy】</strong></h3><p>AOP通过代理模式实现增强，会创建出来一个代理对象，融合了目标对象和增强，执行时使用的是这个新的代理对象。在 Spring AOP 中, 一个 AOP 代理是一个 JDK 动态代理对象或 CGLIB 代理对象</p><h3 id="织入【weaving】"><a href="#织入【weaving】" class="headerlink" title="织入【weaving】"></a><strong>织入【weaving】</strong></h3><p>把<strong>切面</strong>应用到<strong>目标对象</strong>来创建<strong>新的代理对象</strong>的过程。根据不同的实现技术, AOP织入有三种方式:</p><ul><li><strong>编译器织入</strong>：这要求有特殊的Java编译器</li><li><strong>类装载期织入</strong>：这需要有特殊的类装载器</li><li><strong>动态代理织入</strong>：在运行期为目标类添加增强生成代理类的方式</li></ul><p>Spring 采用动态代理织入, 而AspectJ采用编译器织入和类装载期织入</p><h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><p>以用户模块为例，有添加、修改、删除、查询方法，对其中方法按照一定规则增强</p><h2 id="基本实现"><a href="#基本实现" class="headerlink" title="基本实现"></a>基本实现</h2><h3 id="pom依赖"><a href="#pom依赖" class="headerlink" title="pom依赖"></a>pom依赖</h3><p>Spring中要使用AOP需要引入aspectjweaver依赖，如果是SpringBoot引入spring-boot-starter-aop依赖，就已经包含了aspectjweaver。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-aop<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="接口和实现类"><a href="#接口和实现类" class="headerlink" title="接口和实现类"></a>接口和实现类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 接口</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">IUserService</span> &#123;<br><br>    List&lt;String&gt; <span class="hljs-title function_">list</span><span class="hljs-params">()</span>;<br>    <span class="hljs-type">int</span> <span class="hljs-title function_">add</span><span class="hljs-params">()</span>;<br>    <span class="hljs-type">int</span> <span class="hljs-title function_">upodate</span><span class="hljs-params">()</span>;<br>    <span class="hljs-type">int</span> <span class="hljs-title function_">delete</span><span class="hljs-params">()</span>;<br>&#125;<br><br><span class="hljs-comment">// 实现类</span><br><span class="hljs-meta">@Service</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">IUserService</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> List&lt;String&gt; <span class="hljs-title function_">list</span><span class="hljs-params">()</span> &#123;<br>        log.info(<span class="hljs-string">&quot;查询用户列表&quot;</span>);<br>        <span class="hljs-keyword">return</span> Arrays.asList(<span class="hljs-string">&quot;A&quot;</span>,<span class="hljs-string">&quot;B&quot;</span>,<span class="hljs-string">&quot;C&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">add</span><span class="hljs-params">()</span> &#123;<br>        log.info(<span class="hljs-string">&quot;添加用户&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">upodate</span><span class="hljs-params">()</span> &#123;<br>        log.info(<span class="hljs-string">&quot;修改用户&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">delete</span><span class="hljs-params">()</span> &#123;<br>        log.info(<span class="hljs-string">&quot;删除用户&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="增强"><a href="#增强" class="headerlink" title="增强"></a>增强</h3><p>先提供一个权限校验增强和一个日志记录增强，会使用一下几个注解：</p><ul><li><strong>@Aspect</strong>：标明类是一个<strong>切面</strong>类，里边写增强的方法和配置切入点</li><li><strong>@Before</strong>：前置通知，执行方法前执行</li><li><strong>@After</strong>：后置通知，执行方法后，返回退出前执行</li><li><strong>@AfterReturning</strong>：后置增强，方法正常退出时执行</li><li><strong>@AfterThrowing</strong>：异常抛出增强，抛出异常时执行</li><li><strong>@Around</strong>：环绕增强，方法前后都执行</li></ul><p><strong>权限校验：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// @Aspect表示这个类是一个切面类</span><br><span class="hljs-meta">@Aspect</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PremissionAdvice</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 权限校验：需要在进入业务之前运行，使用前置通知</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Before(&quot;execution(* com.stt.service.IUserService.add()) || &quot; +</span><br><span class="hljs-meta">            &quot;execution(* com.stt.service.IUserService.upodate()) || &quot; +</span><br><span class="hljs-meta">            &quot;execution(* com.stt.service.IUserService.delete())&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">checkPremission</span><span class="hljs-params">()</span> &#123;<br>        log.info(<span class="hljs-string">&quot;权限校验======》&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>日志记录：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Aspect</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LogAdvice</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 添加日志，日志在执行完业务之后添加，使用后置通知</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@After(&quot;execution(* com.stt.service.IUserService.*(..))&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">insertLog</span><span class="hljs-params">()</span> &#123;<br>        log.info(<span class="hljs-string">&quot;添加日志============》&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>测试：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AOPApplication</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">ConfigurableApplicationContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> SpringApplication.run(AOPApplication.class);<br><br>        <span class="hljs-comment">// 获取Bean</span><br>        <span class="hljs-type">IUserService</span> <span class="hljs-variable">userService</span> <span class="hljs-operator">=</span> context.getBean(IUserService.class);<br>        <span class="hljs-comment">// 调用方法</span><br>        userService.add();<br>        userService.upodate();<br>        userService.delete();<br>        userService.list();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="环绕通知"><a href="#环绕通知" class="headerlink" title="环绕通知"></a>环绕通知</h2><p>环绕通知会在方法执行前后分别调用，比如要计算一个方法执行耗时就可以使用环绕通知</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Aspect</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ExecuteTimeAdvice</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取执行时间，在执行之前</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Around(&quot;execution(* com.stt.service.IUserService.*(..))&quot;)</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">getTimelong</span><span class="hljs-params">(ProceedingJoinPoint joinPoint)</span> &#123;<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">long</span> <span class="hljs-variable">startTime</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>        <span class="hljs-comment">// 前置业务代码</span><br>        log.info(<span class="hljs-string">&quot;执行前时间=========&gt;&#123;&#125;&quot;</span>,startTime);<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// 执行目标方法</span><br>            result = joinPoint.proceed();<br>        &#125; <span class="hljs-keyword">catch</span> (Throwable e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-comment">// 后置业务执行代码</span><br>        <span class="hljs-type">long</span> <span class="hljs-variable">endTime</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>        log.info(<span class="hljs-string">&quot;执行耗时=========&gt;&#123;&#125;毫秒&quot;</span>,endTime - startTime);<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="切点表达式"><a href="#切点表达式" class="headerlink" title="切点表达式"></a>切点表达式</h2><p>上边写的**execution(* com.stt.service.IUserService.*(..))**就是切点表达式，AspectJ ⽀持三种通配符：</p><ul><li>***** ：匹配任意字符，只匹配⼀个元素（包，类，或⽅法，⽅法参数）</li><li><strong>..</strong> ：匹配任意字符，可以匹配多个元素 ，在表示类时，必须和 * 联合使⽤。</li><li><strong>+</strong> ：表示按照类型匹配指定类的所有类，必须跟在类名后⾯，如 com.stt.service.IUserService+，表示继承该类的所有子类包括本身</li></ul><p>切点表达式由切点函数组成，其中 <strong>execution()</strong> 是最常⽤的切点函数，⽤来匹配⽅法，语法为：</p><p>execution(&lt;修饰符&gt;&lt;返回类型&gt;&lt;包.类.⽅法(参数)&gt;&lt;异常&gt;)</p><p><img src="1716885380753-08df1bdf-c675-41de-9431-a0904a9163f6.png" alt="img"></p><ul><li><p>修饰符：一般省略</p></li><li><p>public：公共方法</p></li><li><p>*：任意方法</p></li><li><p>返回类型：</p></li><li><p>void：无返回类型</p></li><li><p>数据类型，如String、int等等</p></li><li><p>*：任意类型</p></li><li><p>包：</p></li><li><p><strong>com.stt.service</strong>：固定包</p></li><li><p><strong>com.stt.*.service</strong>：com.stt包下任意包中的service子包</p></li><li><p>**com.stt..**：com.stt下的所有子包，包括自己</p></li><li><p>类：</p></li><li><p>IUserService：指定类</p></li><li><p>*Impl：以Impl结尾的类</p></li><li><p>User*：以User开头的类</p></li><li><p>*：任意</p></li><li><p>方法名：不可省略</p></li><li><p>addUser：固定方法</p></li><li><p>add*：以add开头的方法</p></li><li><p>*User：以User结尾的方法</p></li><li><p>*：任意方法</p></li><li><p>参数：</p></li><li><p>()：无参</p></li><li><p>(数据类型)：指定一个数据类型</p></li><li><p>(数据类型,数据类型)：指定两个数据类型，其他以此类推</p></li><li><p>(..)：任意参数</p></li><li><p>throws：异常类型，一般省略不写</p></li></ul><h3 id="表达式示例"><a href="#表达式示例" class="headerlink" title="表达式示例"></a>表达式示例</h3><ul><li>execution(* com.stt.demo.User.*(..)) ：匹配 User 类⾥的所有⽅法。</li><li>execution(* com.stt.demo.User+.*(..)) ：匹配该类的⼦类包括该类的所有⽅法。</li><li>execution(* com.stt.<em>.</em>(..)) ：匹配 com.stt 包下的所有类的所有⽅法。</li><li>execution(* com.stt..<em>.</em>(..)) ：匹配 com.stt 包下、⼦孙包下所有类的所有⽅法。</li><li>execution(* addUser(String, int)) ：匹配 addUser ⽅法，且第⼀个参数类型是 String，第⼆个参数类型是 int。</li></ul><h3 id="其他切点表达式"><a href="#其他切点表达式" class="headerlink" title="其他切点表达式"></a>其他切点表达式</h3><ul><li>arg()：限定连接点方法参数</li><li>@args()：通过连接点方法参数上的注解进行限定</li><li>execution()：用于匹配是连接点的执行方法</li><li>this() ：限制连接点匹配 OP Bean 用为指定的类型</li><li>target：目标对象（即被代理对象）</li><li>@target()：限制目标对象的配置了指定的注解</li><li>within：限制连接点匹配指定的类型</li><li>@within()：限定连接点带有匹配注解类型</li><li>@annotation()：限定带有指定注解的连接点</li></ul><p>当然表达式之间可以通过**||**【或者】或者 <strong>&amp;&amp;【并且】</strong>连接，所有的表达式可通过<a href="https://docs.spring.io/spring-framework/reference/core/aop/ataspectj/pointcuts.html#aop-pointcuts-designators">官网查看</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 匹配指定包中的所有的方法, 但不包括子包</span><br>within(com.stt.service.*)<br> <br><span class="hljs-comment">// 匹配指定包中的所有的方法, 包括子包</span><br>within(com.stt.service..*)<br> <br><span class="hljs-comment">// 匹配当前包中的指定类中的方法</span><br>within(UserService)<br> <br><span class="hljs-comment">// 匹配一个接口的所有实现类中的实现的方法</span><br>within(UserDao+)<br> <br><span class="hljs-comment">// 匹配以指定名字结尾的 Bean 中的所有方法</span><br>bean(*Service)<br> <br><span class="hljs-comment">// 匹配以 Service 或 ServiceImpl 结尾的 bean</span><br>bean(*Service || *ServiceImpl)<br> <br><span class="hljs-comment">// 匹配名字以 Service 开头, 并且在包 com.stt.service 中的 bean</span><br>bean(*Service) &amp;&amp; within(com.stt.service.*)<br></code></pre></td></tr></table></figure><h3 id="单独定义切点"><a href="#单独定义切点" class="headerlink" title="单独定义切点"></a>单独定义切点</h3><p>切点支持单独配置，之后引用到需要该切点的增强</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 定义切点</span><br><span class="hljs-meta">@Pointcut(&quot;execution(* com.stt.service.IUserService.*(..))&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterLog</span><span class="hljs-params">()</span>&#123;&#125;<br><br><span class="hljs-comment">// 使用切点到增强上</span><br><span class="hljs-meta">@After(&quot;afterLog()&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">insertLog</span><span class="hljs-params">()</span> &#123;<br>    log.info(<span class="hljs-string">&quot;添加日志============》&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="Spring-AOP原理"><a href="#Spring-AOP原理" class="headerlink" title="Spring AOP原理"></a>Spring AOP原理</h1><p>AOP的实现方式其实是代理模式，代理模式是给某一个对象提供一个代理对象，并由代理对象控制对原对象的引用，代理模式分为<strong>静态代理</strong>和<strong>动态代理</strong>。</p><ul><li>静态代理：是由程序员创建或特定工具自动生成源代码，再对其编译。在程序运行之前，代理类.class文件就已经被创建了。</li><li>动态代理：在程序运行时通过反射机制动态创建。</li></ul><p>Spring AOP的原理是构建在<strong>动态代理</strong>基础上，Spring对AOP的支持局限于<strong>方法级别</strong>。Spring AOP 支持 <strong>JDK Proxy</strong> 和 <strong>CGLIB</strong> 方式实现动态代理。</p><ul><li>默认情况下，实现了接口的类，使用 AOP 会基于 JDK ⽣成代理类；</li><li>没有实现接⼝的类，会基于 CGLIB ⽣成代理类。</li></ul><h2 id="静态代理"><a href="#静态代理" class="headerlink" title="静态代理"></a>静态代理</h2><p>接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">IStaticProxyService</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">staticProxyMethod</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StaticProxyServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">IStaticProxyService</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">staticProxyMethod</span><span class="hljs-params">()</span> &#123;<br>        log.info(<span class="hljs-string">&quot;静态代理对象原对象方法===============》&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>代理类：代理类将实现类依赖进来，并实现接口，重写方法在实现自己逻辑的同时调用实现类方法以此实现代理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Service</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StaticProxyServiceProxy</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">IStaticProxyService</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> IStaticProxyService staticProxyServiceImpl;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">StaticProxyServiceProxy</span><span class="hljs-params">(IStaticProxyService staticProxyServiceImpl)</span> &#123;<br>        <span class="hljs-built_in">this</span>.staticProxyServiceImpl = staticProxyServiceImpl;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">staticProxyMethod</span><span class="hljs-params">()</span> &#123;<br>        log.info(<span class="hljs-string">&quot;静态代理对象方法==========》&quot;</span>);<br>        <span class="hljs-comment">// 调用原对象方法</span><br>        staticProxyServiceImpl.staticProxyMethod();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>小结：</strong></p><ul><li>优点：可以做到在符合开闭原则的情况下对目标对象进行功能扩展。</li><li>缺点：需要为每一个服务都得创建代理类，工作量太大，不易管理。同时接口一旦发生改变，代理类也得相应修改。</li></ul><h2 id="JDK动态代理"><a href="#JDK动态代理" class="headerlink" title="JDK动态代理"></a>JDK动态代理</h2><p>不需要生成实现接口，使用JDK的API在内存中构建代理对象</p><p>接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">IJDKProxyService</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">jdkProxyMethod</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JDKProxyServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">IJDKProxyService</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">jdkProxyMethod</span><span class="hljs-params">()</span> &#123;<br>        log.info(<span class="hljs-string">&quot;JDK动态代理接口方法=============》&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>代理类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JDKProxyServiceProxy</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">InvocationHandler</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Object target;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">JDKProxyServiceProxy</span><span class="hljs-params">(Object target)</span> &#123;<br>        <span class="hljs-built_in">this</span>.target = target;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">invoke</span><span class="hljs-params">(Object proxy, Method method, Object[] args)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        log.info(<span class="hljs-string">&quot;JDK动态代理============&gt;&quot;</span>);<br>        <span class="hljs-comment">// 调用被代理对象方法</span><br>        result = method.invoke(target,args);<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//被代理对象</span><br><span class="hljs-type">JDKProxyServiceImpl</span> <span class="hljs-variable">jdkProxyService</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JDKProxyServiceImpl</span>();<br><span class="hljs-comment">//代理对象</span><br><span class="hljs-type">JDKProxyServiceProxy</span> <span class="hljs-variable">serviceProxy</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JDKProxyServiceProxy</span>(jdkProxyService);<br><span class="hljs-comment">//获取类加载器</span><br><span class="hljs-type">ClassLoader</span> <span class="hljs-variable">classLoader</span> <span class="hljs-operator">=</span> jdkProxyService.getClass().getClassLoader();<br><span class="hljs-comment">//获取该类的接口</span><br>Class&lt;?&gt;[] interfaces = jdkProxyService.getClass().getInterfaces();<br><span class="hljs-type">IJDKProxyService</span> <span class="hljs-variable">ijdkProxyService</span> <span class="hljs-operator">=</span> (IJDKProxyService)Proxy.newProxyInstance(classLoader, interfaces, serviceProxy);<br>ijdkProxyService.jdkProxyMethod();<br></code></pre></td></tr></table></figure><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><ul><li>实现InvocationHandler接口重写invoke方法</li><li>创建代理对象使用Proxy类的newProxyInstance方法，传入实现类类加载器，接口和代理类的对象</li></ul><h2 id="CGLB动态代理"><a href="#CGLB动态代理" class="headerlink" title="CGLB动态代理"></a>CGLB动态代理</h2><p>接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">ICGLIBProxyService</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">cglIbMethod</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CGLIBProxyServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ICGLIBProxyService</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">cglIbMethod</span><span class="hljs-params">()</span> &#123;<br>      log.info(<span class="hljs-string">&quot;CGLIB代理实现类方法============》&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>代理类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CGLIBProxyInterceptor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">MethodInterceptor</span> &#123;<br><br>    <span class="hljs-comment">//被代理对象</span><br>    <span class="hljs-keyword">private</span> Object target;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">CGLIBProxyInterceptor</span><span class="hljs-params">(Object target)</span>&#123;<br>        <span class="hljs-built_in">this</span>.target = target;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">intercept</span><span class="hljs-params">(Object obj, Method method, Object[] args, MethodProxy proxy)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>        log.info(<span class="hljs-string">&quot;CGLIB代理方法=============》&quot;</span>);<br>        <span class="hljs-comment">//通过cglib的代理⽅法调⽤</span><br>        <span class="hljs-type">Object</span> <span class="hljs-variable">retVal</span> <span class="hljs-operator">=</span> proxy.invoke(target, args);<br>        <span class="hljs-keyword">return</span> retVal;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 创建实现类对象</span><br>ICGLIBProxyService target= <span class="hljs-keyword">new</span> <span class="hljs-title class_">CGLIBProxyServiceImpl</span>();<br><span class="hljs-comment">// 构建代理对象</span><br>ICGLIBProxyService proxy= (ICGLIBProxyService) <br>                           Enhancer.create(target.getClass(),<br>                           <span class="hljs-keyword">new</span> <span class="hljs-title class_">CGLIBProxyInterceptor</span>(target));<br>proxy.cglIbMethod();<br></code></pre></td></tr></table></figure><h2 id="JDK-和-CGLIB-实现的区别"><a href="#JDK-和-CGLIB-实现的区别" class="headerlink" title="JDK 和 CGLIB 实现的区别"></a>JDK 和 CGLIB 实现的区别</h2><ul><li><strong>JDK实现</strong>：要求被代理类必须实现接⼝，之后是通过 InvocationHandler 及 Proxy，在运⾏时动态的在内存中⽣成了代理类对象，该代理对象是通过实现同样的接⼝实现（类似静态代理接⼝实现的⽅式），只是该代理类是在运⾏期时，动态的织⼊统⼀的业务逻辑字节码来完成。</li><li><strong>CGLIB实现</strong>：被代理类可以不实现接⼝，是通过继承被代理类，在运⾏时动态的⽣成代理类对象 (三方框架，一般性能有优势)。</li></ul>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
      <category>Java</category>
      
      <category>Spring</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Spring</tag>
      
      <tag>AOP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>夯实Spring中的AOP</title>
    <link href="/post/2b22b4e4-e1a8-49dd-aa81-9513c45fda35/"/>
    <url>/post/2b22b4e4-e1a8-49dd-aa81-9513c45fda35/</url>
    
    <content type="html"><![CDATA[<h3 id="夯实Spring中的AOP"><a href="#夯实Spring中的AOP" class="headerlink" title="夯实Spring中的AOP"></a>夯实Spring中的AOP</h3><p><code>hexo template generate by typora plugin templater</code></p><p>AOP全称【Aspect Oriented Programming】意为<strong>面向切面编程</strong>，通过预编译和运行期间通过<strong>动态代理</strong>来实现程序功能统一维护的技术。AOP思想是OOP【面向对象】的延续，在OOP中以类【class】作为基本单元, 而 AOP中的基本单元是 Aspect【切面】，AOP是软件行业的热点，也是Spring框架中的一个重要内容。</p><p><img src="1720316617398-1a3a8d73-b26f-40a1-bd7b-99d37dfc65f6.jpeg" alt="img"></p><h1 id="什么是AOP"><a href="#什么是AOP" class="headerlink" title="什么是AOP"></a>什么是AOP</h1><p>在大多数的业务中都需要验证用户是否登录才可以访问接口内容，如果没有登录或没有权限就会做出对应提示，比如下方的添加用户和修改用户的功能：</p><p><strong>添加用户流程：</strong></p><p><img src="1716860068826-1d200aff-3f9b-403d-8bf3-ae89a77a15ca.png" alt="img"></p><p><strong>修改用户流程：</strong></p><p><img src="1716860027510-c1c40d30-0cd0-44dd-87f1-da334cc1e555.png" alt="img"></p><p>从以上流程可以看出，判断权限和记录日志在方法中都需要调用，如果每个流程中都加入判断权限和记录日志的代码有两个弊端：</p><ul><li>每个业务代码中都需要调用相同的权限判断功能比较<strong>重复</strong>，比较冗余</li><li>业务代码中调用非业务功能，增加<strong>耦合</strong>，<strong>污染</strong>业务流程</li></ul><p>由此AOP思想就出现了，理想的架构就是将<strong>权限判断</strong>、<strong>记录日志</strong>这些共用功能抽离到一个<strong>切片</strong>中，等到需要时再<strong>织入</strong>对象中去，从而改变其原有的行为。</p><p><img src="1716860978742-1608142e-f237-4c4c-8809-9ce78891a11b.png" alt="img"></p><p><strong>AOP</strong>其实只是<strong>OOP</strong>的补充而已。OOP从横向上区分出一个个的类来，而AOP则从纵向上向对象中加入特定的代码。有了AOP，OOP变得立体了。从技术上来说，AOP基本上是通过代理模式实现。</p><h1 id="AOP体系"><a href="#AOP体系" class="headerlink" title="AOP体系"></a>AOP体系</h1><p><img src="1716861714545-104cd564-3e87-4449-beb6-538a90041b07.png" alt="img"></p><h2 id="AOP术语"><a href="#AOP术语" class="headerlink" title="AOP术语"></a>AOP术语</h2><h3 id="通知-增强【advice】"><a href="#通知-增强【advice】" class="headerlink" title="通知&#x2F;增强【advice】"></a>通知&#x2F;增强【advice】</h3><p>就是增强的功能，比如我们的程序中需要添加日志，事务等功能，我们当然需要将代码写好，封装到中，我们写好的这个方法就是通知，也可以称为<strong>增强</strong>，通知分为前置通知，后置通知，环绕通知，异常通知等，说明加在连接点的什么位置，什么时候调用</p><h3 id="连接点【Join-Point】"><a href="#连接点【Join-Point】" class="headerlink" title="连接点【Join Point】"></a>连接点【Join Point】</h3><p>可以增强的功能，比如添加、修改、删除等方法都可以被增强。</p><h3 id="切点【Pointcut】"><a href="#切点【Pointcut】" class="headerlink" title="切点【Pointcut】"></a>切点【Pointcut】</h3><p>实际上增强的方法，如上实际增强添加、删除功能，这个添加、删除就是切点。也称为切入点。需要使用表达式配置</p><h3 id="切面-【Aspect】"><a href="#切面-【Aspect】" class="headerlink" title="切面 【Aspect】"></a>切面 【Aspect】</h3><p>切点、增强所在的那个类叫切面，这些代码需要编写出来，这个配置的类就是切面</p><h3 id="引入【introduction】"><a href="#引入【introduction】" class="headerlink" title="引入【introduction】"></a><strong>引入【introduction】</strong></h3><p>允许我们向现有的类添加新方法属性。这不就是把切面（也就是新方法属性：通知定义的）用到目标类中吗</p><h3 id="目标对象【Target】"><a href="#目标对象【Target】" class="headerlink" title="目标对象【Target】"></a><strong>目标对象【Target】</strong></h3><p>引入中所提到的目标类，也就是要被通知的对象，也就是真正的业务逻辑，他可以在毫不知情的情况下，被咱们织入切面。而自己专注于业务本身的逻辑。</p><h3 id="代理【proxy】"><a href="#代理【proxy】" class="headerlink" title="代理【proxy】"></a><strong>代理【proxy】</strong></h3><p>AOP通过代理模式实现增强，会创建出来一个代理对象，融合了目标对象和增强，执行时使用的是这个新的代理对象。在 Spring AOP 中, 一个 AOP 代理是一个 JDK 动态代理对象或 CGLIB 代理对象</p><h3 id="织入【weaving】"><a href="#织入【weaving】" class="headerlink" title="织入【weaving】"></a><strong>织入【weaving】</strong></h3><p>把<strong>切面</strong>应用到<strong>目标对象</strong>来创建<strong>新的代理对象</strong>的过程。根据不同的实现技术, AOP织入有三种方式:</p><ul><li><strong>编译器织入</strong>：这要求有特殊的Java编译器</li><li><strong>类装载期织入</strong>：这需要有特殊的类装载器</li><li><strong>动态代理织入</strong>：在运行期为目标类添加增强生成代理类的方式</li></ul><p>Spring 采用动态代理织入, 而AspectJ采用编译器织入和类装载期织入</p><h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><p>以用户模块为例，有添加、修改、删除、查询方法，对其中方法按照一定规则增强</p><h2 id="基本实现"><a href="#基本实现" class="headerlink" title="基本实现"></a>基本实现</h2><h3 id="pom依赖"><a href="#pom依赖" class="headerlink" title="pom依赖"></a>pom依赖</h3><p>Spring中要使用AOP需要引入aspectjweaver依赖，如果是SpringBoot引入spring-boot-starter-aop依赖，就已经包含了aspectjweaver。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml">1<br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>2<br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>3<br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-aop<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>4<br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="接口和实现类"><a href="#接口和实现类" class="headerlink" title="接口和实现类"></a>接口和实现类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">1</span><br><span class="hljs-comment">// 接口</span><br><span class="hljs-number">2</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">IUserService</span> &#123;<br><span class="hljs-number">3</span><br>​<br><span class="hljs-number">4</span><br>    List&lt;String&gt; <span class="hljs-title function_">list</span><span class="hljs-params">()</span>;<br><span class="hljs-number">5</span><br>    <span class="hljs-type">int</span> <span class="hljs-title function_">add</span><span class="hljs-params">()</span>;<br><span class="hljs-number">6</span><br>    <span class="hljs-type">int</span> <span class="hljs-title function_">upodate</span><span class="hljs-params">()</span>;<br><span class="hljs-number">7</span><br>    <span class="hljs-type">int</span> <span class="hljs-title function_">delete</span><span class="hljs-params">()</span>;<br><span class="hljs-number">8</span><br>&#125;<br><span class="hljs-number">9</span><br>​<br><span class="hljs-number">10</span><br><span class="hljs-comment">// 实现类</span><br><span class="hljs-number">11</span><br><span class="hljs-meta">@Service</span><br><span class="hljs-number">12</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-number">13</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">IUserService</span> &#123;<br><span class="hljs-number">14</span><br>​<br><span class="hljs-number">15</span><br>    <span class="hljs-meta">@Override</span><br><span class="hljs-number">16</span><br>    <span class="hljs-keyword">public</span> List&lt;String&gt; <span class="hljs-title function_">list</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-number">17</span><br>        log.info(<span class="hljs-string">&quot;查询用户列表&quot;</span>);<br><span class="hljs-number">18</span><br>        <span class="hljs-keyword">return</span> Arrays.asList(<span class="hljs-string">&quot;A&quot;</span>,<span class="hljs-string">&quot;B&quot;</span>,<span class="hljs-string">&quot;C&quot;</span>);<br><span class="hljs-number">19</span><br>    &#125;<br><span class="hljs-number">20</span><br>​<br><span class="hljs-number">21</span><br>    <span class="hljs-meta">@Override</span><br><span class="hljs-number">22</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">add</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-number">23</span><br>        log.info(<span class="hljs-string">&quot;添加用户&quot;</span>);<br><span class="hljs-number">24</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><span class="hljs-number">25</span><br>    &#125;<br><span class="hljs-number">26</span><br>​<br><span class="hljs-number">27</span><br>    <span class="hljs-meta">@Override</span><br><span class="hljs-number">28</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">upodate</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-number">29</span><br>        log.info(<span class="hljs-string">&quot;修改用户&quot;</span>);<br><span class="hljs-number">30</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><span class="hljs-number">31</span><br>    &#125;<br><span class="hljs-number">32</span><br>​<br><span class="hljs-number">33</span><br>    <span class="hljs-meta">@Override</span><br><span class="hljs-number">34</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">delete</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-number">35</span><br>        log.info(<span class="hljs-string">&quot;删除用户&quot;</span>);<br><span class="hljs-number">36</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><span class="hljs-number">37</span><br>    &#125;<br><span class="hljs-number">38</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="增强"><a href="#增强" class="headerlink" title="增强"></a>增强</h3><p>先提供一个权限校验增强和一个日志记录增强，会使用一下几个注解：</p><ul><li><strong>@Aspect</strong>：标明类是一个<strong>切面</strong>类，里边写增强的方法和配置切入点</li><li><strong>@Before</strong>：前置通知，执行方法前执行</li><li><strong>@After</strong>：后置通知，执行方法后，返回退出前执行</li><li><strong>@AfterReturning</strong>：后置增强，方法正常退出时执行</li><li><strong>@AfterThrowing</strong>：异常抛出增强，抛出异常时执行</li><li><strong>@Around</strong>：环绕增强，方法前后都执行</li></ul><p><strong>权限校验：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">1</span><br><span class="hljs-comment">// @Aspect表示这个类是一个切面类</span><br><span class="hljs-number">2</span><br><span class="hljs-meta">@Aspect</span><br><span class="hljs-number">3</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-number">4</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-number">5</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PremissionAdvice</span> &#123;<br><span class="hljs-number">6</span><br>​<br><span class="hljs-number">7</span><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">8</span><br><span class="hljs-comment">     * 权限校验：需要在进入业务之前运行，使用前置通知</span><br><span class="hljs-comment">9</span><br><span class="hljs-comment">     */</span><br><span class="hljs-number">10</span><br>    <span class="hljs-meta">@Before(&quot;execution(* com.stt.service.IUserService.add()) || &quot; +</span><br><span class="hljs-meta">11</span><br><span class="hljs-meta">            &quot;execution(* com.stt.service.IUserService.upodate()) || &quot; +</span><br><span class="hljs-meta">12</span><br><span class="hljs-meta">            &quot;execution(* com.stt.service.IUserService.delete())&quot;)</span><br><span class="hljs-number">13</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">checkPremission</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-number">14</span><br>        log.info(<span class="hljs-string">&quot;权限校验======》&quot;</span>);<br><span class="hljs-number">15</span><br>    &#125;<br><span class="hljs-number">16</span><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>日志记录：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">1</span><br><span class="hljs-meta">@Aspect</span><br><span class="hljs-number">2</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-number">3</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-number">4</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LogAdvice</span> &#123;<br><span class="hljs-number">5</span><br>​<br><span class="hljs-number">6</span><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">7</span><br><span class="hljs-comment">     * 添加日志，日志在执行完业务之后添加，使用后置通知</span><br><span class="hljs-comment">8</span><br><span class="hljs-comment">     */</span><br><span class="hljs-number">9</span><br>    <span class="hljs-meta">@After(&quot;execution(* com.stt.service.IUserService.*(..))&quot;)</span><br><span class="hljs-number">10</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">insertLog</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-number">11</span><br>        log.info(<span class="hljs-string">&quot;添加日志============》&quot;</span>);<br><span class="hljs-number">12</span><br>    &#125;<br><span class="hljs-number">13</span><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>测试：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">1</span><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-number">2</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AOPApplication</span> &#123;<br><span class="hljs-number">3</span><br>​<br><span class="hljs-number">4</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-number">5</span><br>        <span class="hljs-type">ConfigurableApplicationContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> SpringApplication.run(AOPApplication.class);<br><span class="hljs-number">6</span><br>​<br><span class="hljs-number">7</span><br>        <span class="hljs-comment">// 获取Bean</span><br><span class="hljs-number">8</span><br>        <span class="hljs-type">IUserService</span> <span class="hljs-variable">userService</span> <span class="hljs-operator">=</span> context.getBean(IUserService.class);<br><span class="hljs-number">9</span><br>        <span class="hljs-comment">// 调用方法</span><br><span class="hljs-number">10</span><br>        userService.add();<br><span class="hljs-number">11</span><br>        userService.upodate();<br><span class="hljs-number">12</span><br>        userService.delete();<br><span class="hljs-number">13</span><br>        userService.list();<br><span class="hljs-number">14</span><br>    &#125;<br><span class="hljs-number">15</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="环绕通知"><a href="#环绕通知" class="headerlink" title="环绕通知"></a>环绕通知</h2><p>环绕通知会在方法执行前后分别调用，比如要计算一个方法执行耗时就可以使用环绕通知</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">1</span><br><span class="hljs-meta">@Aspect</span><br><span class="hljs-number">2</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-number">3</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-number">4</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ExecuteTimeAdvice</span> &#123;<br><span class="hljs-number">5</span><br>​<br><span class="hljs-number">6</span><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">7</span><br><span class="hljs-comment">     * 获取执行时间，在执行之前</span><br><span class="hljs-comment">8</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">9</span><br><span class="hljs-comment">     */</span><br><span class="hljs-number">10</span><br>    <span class="hljs-meta">@Around(&quot;execution(* com.stt.service.IUserService.*(..))&quot;)</span><br><span class="hljs-number">11</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">getTimelong</span><span class="hljs-params">(ProceedingJoinPoint joinPoint)</span> &#123;<br><span class="hljs-number">12</span><br>        <span class="hljs-type">Object</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><span class="hljs-number">13</span><br>        <span class="hljs-type">long</span> <span class="hljs-variable">startTime</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br><span class="hljs-number">14</span><br>        <span class="hljs-comment">// 前置业务代码</span><br><span class="hljs-number">15</span><br>        log.info(<span class="hljs-string">&quot;执行前时间=========&gt;&#123;&#125;&quot;</span>,startTime);<br><span class="hljs-number">16</span><br>        <span class="hljs-keyword">try</span> &#123;<br><span class="hljs-number">17</span><br>            <span class="hljs-comment">// 执行目标方法</span><br><span class="hljs-number">18</span><br>            result = joinPoint.proceed();<br><span class="hljs-number">19</span><br>        &#125; <span class="hljs-keyword">catch</span> (Throwable e) &#123;<br><span class="hljs-number">20</span><br>            e.printStackTrace();<br><span class="hljs-number">21</span><br>        &#125;<br><span class="hljs-number">22</span><br>        <span class="hljs-comment">// 后置业务执行代码</span><br><span class="hljs-number">23</span><br>        <span class="hljs-type">long</span> <span class="hljs-variable">endTime</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br><span class="hljs-number">24</span><br>        log.info(<span class="hljs-string">&quot;执行耗时=========&gt;&#123;&#125;毫秒&quot;</span>,endTime - startTime);<br><span class="hljs-number">25</span><br>        <span class="hljs-keyword">return</span> result;<br><span class="hljs-number">26</span><br>    &#125;<br><span class="hljs-number">27</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="切点表达式"><a href="#切点表达式" class="headerlink" title="切点表达式"></a>切点表达式</h2><p>上边写的**execution(* com.stt.service.IUserService.*(..))**就是切点表达式，AspectJ ⽀持三种通配符：</p><ul><li>***** ：匹配任意字符，只匹配⼀个元素（包，类，或⽅法，⽅法参数）</li><li><strong>..</strong> ：匹配任意字符，可以匹配多个元素 ，在表示类时，必须和 * 联合使⽤。</li><li><strong>+</strong> ：表示按照类型匹配指定类的所有类，必须跟在类名后⾯，如 com.stt.service.IUserService+，表示继承该类的所有子类包括本身</li></ul><p>切点表达式由切点函数组成，其中 <strong>execution()</strong> 是最常⽤的切点函数，⽤来匹配⽅法，语法为：</p><p>execution(&lt;修饰符&gt;&lt;返回类型&gt;&lt;包.类.⽅法(参数)&gt;&lt;异常&gt;)</p><p><img src="1716885380753-08df1bdf-c675-41de-9431-a0904a9163f6.png" alt="img"></p><ul><li><p>修饰符：一般省略</p></li><li><p>public：公共方法</p></li><li><p>*：任意方法</p></li><li><p>返回类型：</p></li><li><p>void：无返回类型</p></li><li><p>数据类型，如String、int等等</p></li><li><p>*：任意类型</p></li><li><p>包：</p></li><li><p><strong>com.stt.service</strong>：固定包</p></li><li><p><strong>com.stt.*.service</strong>：com.stt包下任意包中的service子包</p></li><li><p>**com.stt..**：com.stt下的所有子包，包括自己</p></li><li><p>类：</p></li><li><p>IUserService：指定类</p></li><li><p>*Impl：以Impl结尾的类</p></li><li><p>User*：以User开头的类</p></li><li><p>*：任意</p></li><li><p>方法名：不可省略</p></li><li><p>addUser：固定方法</p></li><li><p>add*：以add开头的方法</p></li><li><p>*User：以User结尾的方法</p></li><li><p>*：任意方法</p></li><li><p>参数：</p></li><li><p>()：无参</p></li><li><p>(数据类型)：指定一个数据类型</p></li><li><p>(数据类型,数据类型)：指定两个数据类型，其他以此类推</p></li><li><p>(..)：任意参数</p></li><li><p>throws：异常类型，一般省略不写</p></li></ul><h3 id="表达式示例"><a href="#表达式示例" class="headerlink" title="表达式示例"></a>表达式示例</h3><ul><li>execution(* com.stt.demo.User.*(..)) ：匹配 User 类⾥的所有⽅法。</li><li>execution(* com.stt.demo.User+.*(..)) ：匹配该类的⼦类包括该类的所有⽅法。</li><li>execution(* com.stt.<em>.</em>(..)) ：匹配 com.stt 包下的所有类的所有⽅法。</li><li>execution(* com.stt..<em>.</em>(..)) ：匹配 com.stt 包下、⼦孙包下所有类的所有⽅法。</li><li>execution(* addUser(String, int)) ：匹配 addUser ⽅法，且第⼀个参数类型是 String，第⼆个参数类型是 int。</li></ul><h3 id="其他切点表达式"><a href="#其他切点表达式" class="headerlink" title="其他切点表达式"></a>其他切点表达式</h3><ul><li>arg()：限定连接点方法参数</li><li>@args()：通过连接点方法参数上的注解进行限定</li><li>execution()：用于匹配是连接点的执行方法</li><li>this() ：限制连接点匹配 OP Bean 用为指定的类型</li><li>target：目标对象（即被代理对象）</li><li>@target()：限制目标对象的配置了指定的注解</li><li>within：限制连接点匹配指定的类型</li><li>@within()：限定连接点带有匹配注解类型</li><li>@annotation()：限定带有指定注解的连接点</li></ul><p>当然表达式之间可以通过**||**【或者】或者 <strong>&amp;&amp;【并且】</strong>连接，所有的表达式可通过<a href="https://docs.spring.io/spring-framework/reference/core/aop/ataspectj/pointcuts.html#aop-pointcuts-designators">官网查看</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">1</span><br><span class="hljs-comment">// 匹配指定包中的所有的方法, 但不包括子包</span><br><span class="hljs-number">2</span><br>within(com.stt.service.*)<br><span class="hljs-number">3</span><br> <br><span class="hljs-number">4</span><br><span class="hljs-comment">// 匹配指定包中的所有的方法, 包括子包</span><br><span class="hljs-number">5</span><br>within(com.stt.service..*)<br><span class="hljs-number">6</span><br> <br><span class="hljs-number">7</span><br><span class="hljs-comment">// 匹配当前包中的指定类中的方法</span><br><span class="hljs-number">8</span><br>within(UserService)<br><span class="hljs-number">9</span><br> <br><span class="hljs-number">10</span><br><span class="hljs-comment">// 匹配一个接口的所有实现类中的实现的方法</span><br><span class="hljs-number">11</span><br>within(UserDao+)<br><span class="hljs-number">12</span><br> <br><span class="hljs-number">13</span><br><span class="hljs-comment">// 匹配以指定名字结尾的 Bean 中的所有方法</span><br><span class="hljs-number">14</span><br>bean(*Service)<br><span class="hljs-number">15</span><br> <br><span class="hljs-number">16</span><br><span class="hljs-comment">// 匹配以 Service 或 ServiceImpl 结尾的 bean</span><br><span class="hljs-number">17</span><br>bean(*Service || *ServiceImpl)<br><span class="hljs-number">18</span><br> <br><span class="hljs-number">19</span><br><span class="hljs-comment">// 匹配名字以 Service 开头, 并且在包 com.stt.service 中的 bean</span><br><span class="hljs-number">20</span><br>bean(*Service) &amp;&amp; within(com.stt.service.*)<br></code></pre></td></tr></table></figure><h3 id="单独定义切点"><a href="#单独定义切点" class="headerlink" title="单独定义切点"></a>单独定义切点</h3><p>切点支持单独配置，之后引用到需要该切点的增强</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">1</span><br><span class="hljs-comment">// 定义切点</span><br><span class="hljs-number">2</span><br><span class="hljs-meta">@Pointcut(&quot;execution(* com.stt.service.IUserService.*(..))&quot;)</span><br><span class="hljs-number">3</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterLog</span><span class="hljs-params">()</span>&#123;&#125;<br><span class="hljs-number">4</span><br>​<br><span class="hljs-number">5</span><br><span class="hljs-comment">// 使用切点到增强上</span><br><span class="hljs-number">6</span><br><span class="hljs-meta">@After(&quot;afterLog()&quot;)</span><br><span class="hljs-number">7</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">insertLog</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-number">8</span><br>    log.info(<span class="hljs-string">&quot;添加日志============》&quot;</span>);<br><span class="hljs-number">9</span><br>&#125;<br></code></pre></td></tr></table></figure><h1 id="Spring-AOP原理"><a href="#Spring-AOP原理" class="headerlink" title="Spring AOP原理"></a>Spring AOP原理</h1><p>AOP的实现方式其实是代理模式，代理模式是给某一个对象提供一个代理对象，并由代理对象控制对原对象的引用，代理模式分为<strong>静态代理</strong>和<strong>动态代理</strong>。</p><ul><li>静态代理：是由程序员创建或特定工具自动生成源代码，再对其编译。在程序运行之前，代理类.class文件就已经被创建了。</li><li>动态代理：在程序运行时通过反射机制动态创建。</li></ul><p>Spring AOP的原理是构建在<strong>动态代理</strong>基础上，Spring对AOP的支持局限于<strong>方法级别</strong>。Spring AOP 支持 <strong>JDK Proxy</strong> 和 <strong>CGLIB</strong> 方式实现动态代理。</p><ul><li>默认情况下，实现了接口的类，使用 AOP 会基于 JDK ⽣成代理类；</li><li>没有实现接⼝的类，会基于 CGLIB ⽣成代理类。</li></ul><h2 id="静态代理"><a href="#静态代理" class="headerlink" title="静态代理"></a>静态代理</h2><p>接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">1</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">IStaticProxyService</span> &#123;<br><span class="hljs-number">2</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">staticProxyMethod</span><span class="hljs-params">()</span>;<br><span class="hljs-number">3</span><br>&#125;<br></code></pre></td></tr></table></figure><p>实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">1</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-number">2</span><br><span class="hljs-meta">@Service</span><br><span class="hljs-number">3</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StaticProxyServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">IStaticProxyService</span> &#123;<br><span class="hljs-number">4</span><br>    <span class="hljs-meta">@Override</span><br><span class="hljs-number">5</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">staticProxyMethod</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-number">6</span><br>        log.info(<span class="hljs-string">&quot;静态代理对象原对象方法===============》&quot;</span>);<br><span class="hljs-number">7</span><br>    &#125;<br><span class="hljs-number">8</span><br>&#125;<br></code></pre></td></tr></table></figure><p>代理类：代理类将实现类依赖进来，并实现接口，重写方法在实现自己逻辑的同时调用实现类方法以此实现代理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">1</span><br><span class="hljs-meta">@Service</span><br><span class="hljs-number">2</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-number">3</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StaticProxyServiceProxy</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">IStaticProxyService</span> &#123;<br><span class="hljs-number">4</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> IStaticProxyService staticProxyServiceImpl;<br><span class="hljs-number">5</span><br>​<br><span class="hljs-number">6</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">StaticProxyServiceProxy</span><span class="hljs-params">(IStaticProxyService staticProxyServiceImpl)</span> &#123;<br><span class="hljs-number">7</span><br>        <span class="hljs-built_in">this</span>.staticProxyServiceImpl = staticProxyServiceImpl;<br><span class="hljs-number">8</span><br>    &#125;<br><span class="hljs-number">9</span><br>​<br><span class="hljs-number">10</span><br>    <span class="hljs-meta">@Override</span><br><span class="hljs-number">11</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">staticProxyMethod</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-number">12</span><br>        log.info(<span class="hljs-string">&quot;静态代理对象方法==========》&quot;</span>);<br><span class="hljs-number">13</span><br>        <span class="hljs-comment">// 调用原对象方法</span><br><span class="hljs-number">14</span><br>        staticProxyServiceImpl.staticProxyMethod();<br><span class="hljs-number">15</span><br>    &#125;<br><span class="hljs-number">16</span><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>小结：</strong></p><ul><li>优点：可以做到在符合开闭原则的情况下对目标对象进行功能扩展。</li><li>缺点：需要为每一个服务都得创建代理类，工作量太大，不易管理。同时接口一旦发生改变，代理类也得相应修改。</li></ul><h2 id="JDK动态代理"><a href="#JDK动态代理" class="headerlink" title="JDK动态代理"></a>JDK动态代理</h2><p>不需要生成实现接口，使用JDK的API在内存中构建代理对象</p><p>接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">1</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">IJDKProxyService</span> &#123;<br><span class="hljs-number">2</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">jdkProxyMethod</span><span class="hljs-params">()</span>;<br><span class="hljs-number">3</span><br>&#125;<br></code></pre></td></tr></table></figure><p>实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">1</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-number">2</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JDKProxyServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">IJDKProxyService</span> &#123;<br><span class="hljs-number">3</span><br>    <span class="hljs-meta">@Override</span><br><span class="hljs-number">4</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">jdkProxyMethod</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-number">5</span><br>        log.info(<span class="hljs-string">&quot;JDK动态代理接口方法=============》&quot;</span>);<br><span class="hljs-number">6</span><br>    &#125;<br><span class="hljs-number">7</span><br>&#125;<br></code></pre></td></tr></table></figure><p>代理类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">1</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-number">2</span><br><span class="hljs-meta">@Service</span><br><span class="hljs-number">3</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JDKProxyServiceProxy</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">InvocationHandler</span> &#123;<br><span class="hljs-number">4</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Object target;<br><span class="hljs-number">5</span><br>​<br><span class="hljs-number">6</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">JDKProxyServiceProxy</span><span class="hljs-params">(Object target)</span> &#123;<br><span class="hljs-number">7</span><br>        <span class="hljs-built_in">this</span>.target = target;<br><span class="hljs-number">8</span><br>    &#125;<br><span class="hljs-number">9</span><br>​<br><span class="hljs-number">10</span><br>    <span class="hljs-meta">@Override</span><br><span class="hljs-number">11</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">invoke</span><span class="hljs-params">(Object proxy, Method method, Object[] args)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br><span class="hljs-number">12</span><br>        <span class="hljs-type">Object</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><span class="hljs-number">13</span><br>        log.info(<span class="hljs-string">&quot;JDK动态代理============&gt;&quot;</span>);<br><span class="hljs-number">14</span><br>        <span class="hljs-comment">// 调用被代理对象方法</span><br><span class="hljs-number">15</span><br>        result = method.invoke(target,args);<br><span class="hljs-number">16</span><br>        <span class="hljs-keyword">return</span> result;<br><span class="hljs-number">17</span><br>    &#125;<br><span class="hljs-number">18</span><br>&#125;<br></code></pre></td></tr></table></figure><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">1</span><br><span class="hljs-comment">//被代理对象</span><br><span class="hljs-number">2</span><br><span class="hljs-type">JDKProxyServiceImpl</span> <span class="hljs-variable">jdkProxyService</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JDKProxyServiceImpl</span>();<br><span class="hljs-number">3</span><br><span class="hljs-comment">//代理对象</span><br><span class="hljs-number">4</span><br><span class="hljs-type">JDKProxyServiceProxy</span> <span class="hljs-variable">serviceProxy</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JDKProxyServiceProxy</span>(jdkProxyService);<br><span class="hljs-number">5</span><br><span class="hljs-comment">//获取类加载器</span><br><span class="hljs-number">6</span><br><span class="hljs-type">ClassLoader</span> <span class="hljs-variable">classLoader</span> <span class="hljs-operator">=</span> jdkProxyService.getClass().getClassLoader();<br><span class="hljs-number">7</span><br><span class="hljs-comment">//获取该类的接口</span><br><span class="hljs-number">8</span><br>Class&lt;?&gt;[] interfaces = jdkProxyService.getClass().getInterfaces();<br><span class="hljs-number">9</span><br><span class="hljs-type">IJDKProxyService</span> <span class="hljs-variable">ijdkProxyService</span> <span class="hljs-operator">=</span> (IJDKProxyService)Proxy.newProxyInstance(classLoader, interfaces, serviceProxy);<br><span class="hljs-number">10</span><br>ijdkProxyService.jdkProxyMethod();<br></code></pre></td></tr></table></figure><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><ul><li>实现InvocationHandler接口重写invoke方法</li><li>创建代理对象使用Proxy类的newProxyInstance方法，传入实现类类加载器，接口和代理类的对象</li></ul><h2 id="CGLB动态代理"><a href="#CGLB动态代理" class="headerlink" title="CGLB动态代理"></a>CGLB动态代理</h2><p>接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">1</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">ICGLIBProxyService</span> &#123;<br><span class="hljs-number">2</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">cglIbMethod</span><span class="hljs-params">()</span>;<br><span class="hljs-number">3</span><br>&#125;<br></code></pre></td></tr></table></figure><p>实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">1</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-number">2</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CGLIBProxyServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ICGLIBProxyService</span> &#123;<br><span class="hljs-number">3</span><br>    <span class="hljs-meta">@Override</span><br><span class="hljs-number">4</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">cglIbMethod</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-number">5</span><br>      log.info(<span class="hljs-string">&quot;CGLIB代理实现类方法============》&quot;</span>);<br><span class="hljs-number">6</span><br>    &#125;<br><span class="hljs-number">7</span><br>&#125;<br></code></pre></td></tr></table></figure><p>代理类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">1</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-number">2</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CGLIBProxyInterceptor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">MethodInterceptor</span> &#123;<br><span class="hljs-number">3</span><br>​<br><span class="hljs-number">4</span><br>    <span class="hljs-comment">//被代理对象</span><br><span class="hljs-number">5</span><br>    <span class="hljs-keyword">private</span> Object target;<br><span class="hljs-number">6</span><br>​<br><span class="hljs-number">7</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">CGLIBProxyInterceptor</span><span class="hljs-params">(Object target)</span>&#123;<br><span class="hljs-number">8</span><br>        <span class="hljs-built_in">this</span>.target = target;<br><span class="hljs-number">9</span><br>    &#125;<br><span class="hljs-number">10</span><br>​<br><span class="hljs-number">11</span><br>    <span class="hljs-meta">@Override</span><br><span class="hljs-number">12</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">intercept</span><span class="hljs-params">(Object obj, Method method, Object[] args, MethodProxy proxy)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br><span class="hljs-number">13</span><br>        log.info(<span class="hljs-string">&quot;CGLIB代理方法=============》&quot;</span>);<br><span class="hljs-number">14</span><br>        <span class="hljs-comment">//通过cglib的代理⽅法调⽤</span><br><span class="hljs-number">15</span><br>        <span class="hljs-type">Object</span> <span class="hljs-variable">retVal</span> <span class="hljs-operator">=</span> proxy.invoke(target, args);<br><span class="hljs-number">16</span><br>        <span class="hljs-keyword">return</span> retVal;<br><span class="hljs-number">17</span><br>    &#125;<br><span class="hljs-number">18</span><br>&#125;<br></code></pre></td></tr></table></figure><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">1</span><br><span class="hljs-comment">// 创建实现类对象</span><br><span class="hljs-number">2</span><br>ICGLIBProxyService target= <span class="hljs-keyword">new</span> <span class="hljs-title class_">CGLIBProxyServiceImpl</span>();<br><span class="hljs-number">3</span><br><span class="hljs-comment">// 构建代理对象</span><br><span class="hljs-number">4</span><br>ICGLIBProxyService proxy= (ICGLIBProxyService) <br><span class="hljs-number">5</span><br>                           Enhancer.create(target.getClass(),<br><span class="hljs-number">6</span><br>                           <span class="hljs-keyword">new</span> <span class="hljs-title class_">CGLIBProxyInterceptor</span>(target));<br><span class="hljs-number">7</span><br>proxy.cglIbMethod();<br></code></pre></td></tr></table></figure><h2 id="JDK-和-CGLIB-实现的区别"><a href="#JDK-和-CGLIB-实现的区别" class="headerlink" title="JDK 和 CGLIB 实现的区别"></a>JDK 和 CGLIB 实现的区别</h2><ul><li><strong>JDK实现</strong>：要求被代理类必须实现接⼝，之后是通过 InvocationHandler 及 Proxy，在运⾏时动态的在内存中⽣成了代理类对象，该代理对象是通过实现同样的接⼝实现（类似静态代理接⼝实现的⽅式），只是该代理类是在运⾏期时，动态的织⼊统⼀的业务逻辑字节码来完成。</li><li><strong>CGLIB实现</strong>：被代理类可以不实现接⼝，是通过继承被代理类，在运⾏时动态的⽣成代理类对象 (三方框架，一般性能有优势)。</li></ul>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
      <category>Java</category>
      
      <category>Spring</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Spring</tag>
      
      <tag>IOC</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hexo主题安装</title>
    <link href="/post/fgke1014-1e8b-5gjn-8369-ec9a1a9a42c3/"/>
    <url>/post/fgke1014-1e8b-5gjn-8369-ec9a1a9a42c3/</url>
    
    <content type="html"><![CDATA[<p><code>千里之行，始于足下。</code></p><p><strong>hexo 安装参考</strong> <a href="https://hexo.io/zh-cn/docs/index.html">文档 | Hexo</a></p><p><strong>hexo 主题安装</strong> <a href="https://hexo.io/themes/">Themes | Hexo</a></p><p>前往主题网站 , 搜索主题 <code>fluid</code> , 可以预览 和前往 github 安装</p><p><img src="image-20240707152913095.png" alt="image-20240707152913095"></p><p>直接克隆这个主题到themes目录下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> git@github.com:fluid-dev/hexo-theme-fluid.git themes/fluid<br></code></pre></td></tr></table></figure><p><img src="image-20240707153426510.png" alt="image-20240707153426510"></p><p>修改<code>Hexo/_config</code>主题配置</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">theme:</span> <span class="hljs-string">fluid</span><br></code></pre></td></tr></table></figure><p><img src="image-20240707153713218.png" alt="image-20240707153713218"></p><p>将 <code>Hexo/themes/fluid/_config</code>.yml 配置文件复制一份到 hexo 根目录 并命名为 <code>_config.fluid.yml</code></p><p><img src="image-20240707153550259.png" alt="image-20240707153550259"></p><p>这个 <code>_config.fluid.yml</code> 是用户对主题的配置, 优先级高于 默认主题 <code>_config</code> </p><p>这个主题配置中有很多可配置项 , 请自行配置 </p><p>预览结果</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo clean &amp; hexo g &amp; hexo s<br></code></pre></td></tr></table></figure><p><img src="image-20240707154309268.png" alt="image-20240707154309268"></p><p><img src="image-20240707154325052.png" alt="image-20240707154325052"></p><p>我的配置如下</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br><span class="line">669</span><br><span class="line">670</span><br><span class="line">671</span><br><span class="line">672</span><br><span class="line">673</span><br><span class="line">674</span><br><span class="line">675</span><br><span class="line">676</span><br><span class="line">677</span><br><span class="line">678</span><br><span class="line">679</span><br><span class="line">680</span><br><span class="line">681</span><br><span class="line">682</span><br><span class="line">683</span><br><span class="line">684</span><br><span class="line">685</span><br><span class="line">686</span><br><span class="line">687</span><br><span class="line">688</span><br><span class="line">689</span><br><span class="line">690</span><br><span class="line">691</span><br><span class="line">692</span><br><span class="line">693</span><br><span class="line">694</span><br><span class="line">695</span><br><span class="line">696</span><br><span class="line">697</span><br><span class="line">698</span><br><span class="line">699</span><br><span class="line">700</span><br><span class="line">701</span><br><span class="line">702</span><br><span class="line">703</span><br><span class="line">704</span><br><span class="line">705</span><br><span class="line">706</span><br><span class="line">707</span><br><span class="line">708</span><br><span class="line">709</span><br><span class="line">710</span><br><span class="line">711</span><br><span class="line">712</span><br><span class="line">713</span><br><span class="line">714</span><br><span class="line">715</span><br><span class="line">716</span><br><span class="line">717</span><br><span class="line">718</span><br><span class="line">719</span><br><span class="line">720</span><br><span class="line">721</span><br><span class="line">722</span><br><span class="line">723</span><br><span class="line">724</span><br><span class="line">725</span><br><span class="line">726</span><br><span class="line">727</span><br><span class="line">728</span><br><span class="line">729</span><br><span class="line">730</span><br><span class="line">731</span><br><span class="line">732</span><br><span class="line">733</span><br><span class="line">734</span><br><span class="line">735</span><br><span class="line">736</span><br><span class="line">737</span><br><span class="line">738</span><br><span class="line">739</span><br><span class="line">740</span><br><span class="line">741</span><br><span class="line">742</span><br><span class="line">743</span><br><span class="line">744</span><br><span class="line">745</span><br><span class="line">746</span><br><span class="line">747</span><br><span class="line">748</span><br><span class="line">749</span><br><span class="line">750</span><br><span class="line">751</span><br><span class="line">752</span><br><span class="line">753</span><br><span class="line">754</span><br><span class="line">755</span><br><span class="line">756</span><br><span class="line">757</span><br><span class="line">758</span><br><span class="line">759</span><br><span class="line">760</span><br><span class="line">761</span><br><span class="line">762</span><br><span class="line">763</span><br><span class="line">764</span><br><span class="line">765</span><br><span class="line">766</span><br><span class="line">767</span><br><span class="line">768</span><br><span class="line">769</span><br><span class="line">770</span><br><span class="line">771</span><br><span class="line">772</span><br><span class="line">773</span><br><span class="line">774</span><br><span class="line">775</span><br><span class="line">776</span><br><span class="line">777</span><br><span class="line">778</span><br><span class="line">779</span><br><span class="line">780</span><br><span class="line">781</span><br><span class="line">782</span><br><span class="line">783</span><br><span class="line">784</span><br><span class="line">785</span><br><span class="line">786</span><br><span class="line">787</span><br><span class="line">788</span><br><span class="line">789</span><br><span class="line">790</span><br><span class="line">791</span><br><span class="line">792</span><br><span class="line">793</span><br><span class="line">794</span><br><span class="line">795</span><br><span class="line">796</span><br><span class="line">797</span><br><span class="line">798</span><br><span class="line">799</span><br><span class="line">800</span><br><span class="line">801</span><br><span class="line">802</span><br><span class="line">803</span><br><span class="line">804</span><br><span class="line">805</span><br><span class="line">806</span><br><span class="line">807</span><br><span class="line">808</span><br><span class="line">809</span><br><span class="line">810</span><br><span class="line">811</span><br><span class="line">812</span><br><span class="line">813</span><br><span class="line">814</span><br><span class="line">815</span><br><span class="line">816</span><br><span class="line">817</span><br><span class="line">818</span><br><span class="line">819</span><br><span class="line">820</span><br><span class="line">821</span><br><span class="line">822</span><br><span class="line">823</span><br><span class="line">824</span><br><span class="line">825</span><br><span class="line">826</span><br><span class="line">827</span><br><span class="line">828</span><br><span class="line">829</span><br><span class="line">830</span><br><span class="line">831</span><br><span class="line">832</span><br><span class="line">833</span><br><span class="line">834</span><br><span class="line">835</span><br><span class="line">836</span><br><span class="line">837</span><br><span class="line">838</span><br><span class="line">839</span><br><span class="line">840</span><br><span class="line">841</span><br><span class="line">842</span><br><span class="line">843</span><br><span class="line">844</span><br><span class="line">845</span><br><span class="line">846</span><br><span class="line">847</span><br><span class="line">848</span><br><span class="line">849</span><br><span class="line">850</span><br><span class="line">851</span><br><span class="line">852</span><br><span class="line">853</span><br><span class="line">854</span><br><span class="line">855</span><br><span class="line">856</span><br><span class="line">857</span><br><span class="line">858</span><br><span class="line">859</span><br><span class="line">860</span><br><span class="line">861</span><br><span class="line">862</span><br><span class="line">863</span><br><span class="line">864</span><br><span class="line">865</span><br><span class="line">866</span><br><span class="line">867</span><br><span class="line">868</span><br><span class="line">869</span><br><span class="line">870</span><br><span class="line">871</span><br><span class="line">872</span><br><span class="line">873</span><br><span class="line">874</span><br><span class="line">875</span><br><span class="line">876</span><br><span class="line">877</span><br><span class="line">878</span><br><span class="line">879</span><br><span class="line">880</span><br><span class="line">881</span><br><span class="line">882</span><br><span class="line">883</span><br><span class="line">884</span><br><span class="line">885</span><br><span class="line">886</span><br><span class="line">887</span><br><span class="line">888</span><br><span class="line">889</span><br><span class="line">890</span><br><span class="line">891</span><br><span class="line">892</span><br><span class="line">893</span><br><span class="line">894</span><br><span class="line">895</span><br><span class="line">896</span><br><span class="line">897</span><br><span class="line">898</span><br><span class="line">899</span><br><span class="line">900</span><br><span class="line">901</span><br><span class="line">902</span><br><span class="line">903</span><br><span class="line">904</span><br><span class="line">905</span><br><span class="line">906</span><br><span class="line">907</span><br><span class="line">908</span><br><span class="line">909</span><br><span class="line">910</span><br><span class="line">911</span><br><span class="line">912</span><br><span class="line">913</span><br><span class="line">914</span><br><span class="line">915</span><br><span class="line">916</span><br><span class="line">917</span><br><span class="line">918</span><br><span class="line">919</span><br><span class="line">920</span><br><span class="line">921</span><br><span class="line">922</span><br><span class="line">923</span><br><span class="line">924</span><br><span class="line">925</span><br><span class="line">926</span><br><span class="line">927</span><br><span class="line">928</span><br><span class="line">929</span><br><span class="line">930</span><br><span class="line">931</span><br><span class="line">932</span><br><span class="line">933</span><br><span class="line">934</span><br><span class="line">935</span><br><span class="line">936</span><br><span class="line">937</span><br><span class="line">938</span><br><span class="line">939</span><br><span class="line">940</span><br><span class="line">941</span><br><span class="line">942</span><br><span class="line">943</span><br><span class="line">944</span><br><span class="line">945</span><br><span class="line">946</span><br><span class="line">947</span><br><span class="line">948</span><br><span class="line">949</span><br><span class="line">950</span><br><span class="line">951</span><br><span class="line">952</span><br><span class="line">953</span><br><span class="line">954</span><br><span class="line">955</span><br><span class="line">956</span><br><span class="line">957</span><br><span class="line">958</span><br><span class="line">959</span><br><span class="line">960</span><br><span class="line">961</span><br><span class="line">962</span><br><span class="line">963</span><br><span class="line">964</span><br><span class="line">965</span><br><span class="line">966</span><br><span class="line">967</span><br><span class="line">968</span><br><span class="line">969</span><br><span class="line">970</span><br><span class="line">971</span><br><span class="line">972</span><br><span class="line">973</span><br><span class="line">974</span><br><span class="line">975</span><br><span class="line">976</span><br><span class="line">977</span><br><span class="line">978</span><br><span class="line">979</span><br><span class="line">980</span><br><span class="line">981</span><br><span class="line">982</span><br><span class="line">983</span><br><span class="line">984</span><br><span class="line">985</span><br><span class="line">986</span><br><span class="line">987</span><br><span class="line">988</span><br><span class="line">989</span><br><span class="line">990</span><br><span class="line">991</span><br><span class="line">992</span><br><span class="line">993</span><br><span class="line">994</span><br><span class="line">995</span><br><span class="line">996</span><br><span class="line">997</span><br><span class="line">998</span><br><span class="line">999</span><br><span class="line">1000</span><br><span class="line">1001</span><br><span class="line">1002</span><br><span class="line">1003</span><br><span class="line">1004</span><br><span class="line">1005</span><br><span class="line">1006</span><br><span class="line">1007</span><br><span class="line">1008</span><br><span class="line">1009</span><br><span class="line">1010</span><br><span class="line">1011</span><br><span class="line">1012</span><br><span class="line">1013</span><br><span class="line">1014</span><br><span class="line">1015</span><br><span class="line">1016</span><br><span class="line">1017</span><br><span class="line">1018</span><br><span class="line">1019</span><br><span class="line">1020</span><br><span class="line">1021</span><br><span class="line">1022</span><br><span class="line">1023</span><br><span class="line">1024</span><br><span class="line">1025</span><br><span class="line">1026</span><br><span class="line">1027</span><br><span class="line">1028</span><br><span class="line">1029</span><br><span class="line">1030</span><br><span class="line">1031</span><br><span class="line">1032</span><br><span class="line">1033</span><br><span class="line">1034</span><br><span class="line">1035</span><br><span class="line">1036</span><br><span class="line">1037</span><br><span class="line">1038</span><br><span class="line">1039</span><br><span class="line">1040</span><br><span class="line">1041</span><br><span class="line">1042</span><br><span class="line">1043</span><br><span class="line">1044</span><br><span class="line">1045</span><br><span class="line">1046</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-comment">#---------------------------</span><br><span class="hljs-comment"># Hexo Theme Fluid</span><br><span class="hljs-comment"># Author: Fluid-dev</span><br><span class="hljs-comment"># Github: https://github.com/fluid-dev/hexo-theme-fluid</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># 配置指南: https://hexo.fluid-dev.com/docs/guide/</span><br><span class="hljs-comment"># 你可以从指南中获得更详细的说明</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># Guide: https://hexo.fluid-dev.com/docs/en/guide/</span><br><span class="hljs-comment"># You can get more detailed help from the guide</span><br><span class="hljs-comment">#---------------------------</span><br><br><br><span class="hljs-comment">#---------------------------</span><br><span class="hljs-comment"># 全局</span><br><span class="hljs-comment"># Global</span><br><span class="hljs-comment">#---------------------------</span><br><br><span class="hljs-comment"># 用于浏览器标签的图标</span><br><span class="hljs-comment"># Icon for browser tab</span><br><span class="hljs-attr">favicon:</span> <span class="hljs-string">/img/fluid.png</span><br><br><span class="hljs-comment"># 用于苹果设备的图标</span><br><span class="hljs-comment"># Icon for Apple touch</span><br><span class="hljs-attr">apple_touch_icon:</span> <span class="hljs-string">/img/fluid.png</span><br><br><span class="hljs-comment"># 浏览器标签页中的标题分隔符，效果： 文章名 - 站点名</span><br><span class="hljs-comment"># Title separator in browser tab, eg: article - site</span><br><span class="hljs-attr">tab_title_separator:</span> <span class="hljs-string">&quot; - &quot;</span><br><br><span class="hljs-comment"># 强制所有链接升级为 HTTPS（适用于图片等资源出现 HTTP 混入报错）</span><br><span class="hljs-comment"># Force all links to be HTTPS (applicable to HTTP mixed error)</span><br><span class="hljs-attr">force_https:</span> <span class="hljs-literal">false</span><br><br><span class="hljs-comment"># 代码块的增强配置</span><br><span class="hljs-comment"># Enhancements to code blocks</span><br><span class="hljs-attr">code:</span><br>  <span class="hljs-comment"># 是否开启复制代码的按钮</span><br>  <span class="hljs-comment"># Enable copy code button</span><br>  <span class="hljs-attr">copy_btn:</span> <span class="hljs-literal">true</span><br><br>  <span class="hljs-comment"># 代码语言</span><br>  <span class="hljs-comment"># Code language</span><br>  <span class="hljs-attr">language:</span><br>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">default:</span> <span class="hljs-string">&quot;TEXT&quot;</span><br><br>  <span class="hljs-comment"># 代码高亮</span><br>  <span class="hljs-comment"># Code highlight</span><br>  <span class="hljs-attr">highlight:</span><br>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br><br>    <span class="hljs-comment"># 代码块是否显示行号</span><br>    <span class="hljs-comment"># If true, the code block display line numbers</span><br>    <span class="hljs-attr">line_number:</span> <span class="hljs-literal">true</span><br><br>    <span class="hljs-comment"># 实现高亮的库，对应下面的设置</span><br>    <span class="hljs-comment"># Highlight library</span><br>    <span class="hljs-comment"># Options: highlightjs | prismjs</span><br>    <span class="hljs-attr">lib:</span> <span class="hljs-string">&quot;highlightjs&quot;</span><br><br>    <span class="hljs-attr">highlightjs:</span><br>      <span class="hljs-comment"># 在链接中挑选 style 填入</span><br>      <span class="hljs-comment"># Select a style in the link</span><br>      <span class="hljs-comment"># See: https://highlightjs.org/static/demo/</span><br>      <span class="hljs-attr">style:</span> <span class="hljs-string">&quot;github gist&quot;</span><br>      <span class="hljs-attr">style_dark:</span> <span class="hljs-string">&quot;dark&quot;</span><br><br>    <span class="hljs-attr">prismjs:</span><br>      <span class="hljs-comment"># 在下方链接页面右侧的圆形按钮挑选 style 填入，也可以直接填入 css 链接</span><br>      <span class="hljs-comment"># Select the style button on the right side of the link page, you can also set the CSS link</span><br>      <span class="hljs-comment"># See: https://prismjs.com/</span><br>      <span class="hljs-attr">style:</span> <span class="hljs-string">&quot;default&quot;</span><br>      <span class="hljs-attr">style_dark:</span> <span class="hljs-string">&quot;tomorrow night&quot;</span><br><br>      <span class="hljs-comment"># 设为 true 高亮将本地静态生成（但只支持部分 prismjs 插件），设为 false 高亮将在浏览器通过 js 生成</span><br>      <span class="hljs-comment"># If true, it will be generated locally (but some prismjs plugins are not supported). If false, it will be generated via JS in the browser</span><br>      <span class="hljs-attr">preprocess:</span> <span class="hljs-literal">true</span><br><br><span class="hljs-comment"># 一些好玩的功能</span><br><span class="hljs-comment"># Some fun features</span><br><span class="hljs-attr">fun_features:</span><br>  <span class="hljs-comment"># 为 subtitle 添加打字机效果</span><br>  <span class="hljs-comment"># Typing animation for subtitle</span><br>  <span class="hljs-attr">typing:</span><br>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br><br>    <span class="hljs-comment"># 打印速度，数字越大越慢</span><br>    <span class="hljs-comment"># Typing speed, the larger the number, the slower</span><br>    <span class="hljs-attr">typeSpeed:</span> <span class="hljs-number">70</span><br><br>    <span class="hljs-comment"># 游标字符</span><br>    <span class="hljs-comment"># Cursor character</span><br>    <span class="hljs-attr">cursorChar:</span> <span class="hljs-string">&quot;_&quot;</span><br><br>    <span class="hljs-comment"># 是否循环播放效果</span><br>    <span class="hljs-comment"># If true, loop animation</span><br>    <span class="hljs-attr">loop:</span> <span class="hljs-literal">false</span><br><br>    <span class="hljs-comment"># 在指定页面开启，不填则在所有页面开启</span><br>    <span class="hljs-comment"># Enable in specified page, all pages by default</span><br>    <span class="hljs-comment"># Options: home | post | tag | category | about | links | page | 404</span><br>    <span class="hljs-attr">scope:</span> []<br><br>  <span class="hljs-comment"># 为文章内容中的标题添加锚图标</span><br>  <span class="hljs-comment"># Add an anchor icon to the title on the post page</span><br>  <span class="hljs-attr">anchorjs:</span><br>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">element:</span> <span class="hljs-string">h1,h2,h3,h4,h5,h6</span><br>    <span class="hljs-comment"># Options: left | right</span><br>    <span class="hljs-attr">placement:</span> <span class="hljs-string">left</span><br>    <span class="hljs-comment"># Options: hover | always | touch</span><br>    <span class="hljs-attr">visible:</span> <span class="hljs-string">hover</span><br>    <span class="hljs-comment"># Options: § | # | ❡</span><br>    <span class="hljs-attr">icon:</span> <span class="hljs-string">&quot;&quot;</span><br><br>  <span class="hljs-comment"># 加载进度条</span><br>  <span class="hljs-comment"># Progress bar when loading</span><br>  <span class="hljs-attr">progressbar:</span><br>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">height_px:</span> <span class="hljs-number">3</span><br>    <span class="hljs-attr">color:</span> <span class="hljs-string">&quot;#29d&quot;</span><br>    <span class="hljs-comment"># See: https://github.com/rstacruz/nprogress</span><br>    <span class="hljs-attr">options:</span> &#123; <span class="hljs-attr">showSpinner:</span> <span class="hljs-literal">false</span>, <span class="hljs-attr">trickleSpeed:</span> <span class="hljs-number">100</span> &#125;<br><br><span class="hljs-comment"># 主题暗色模式，开启后菜单中会出现切换按钮，用户浏览器会存储切换选项，并且会遵循 prefers-color-scheme 自动切换</span><br><span class="hljs-comment"># Theme dark mode. If enable, a switch button will appear on the menu, each of the visitor&#x27;s browser will store his switch option</span><br><span class="hljs-attr">dark_mode:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-comment"># 默认的选项（当用户手动切换后则不再按照默认模式），选择 `auto` 会优先遵循 prefers-color-scheme，其次按用户本地时间 18 点到次日 6 点之间进入暗色模式</span><br>  <span class="hljs-comment"># Default option (when the visitor switches manually, the default mode is no longer followed), choosing `auto` will give priority to prefers-color-scheme, and then enter the dark mode from 18:00 to 6:00 in the visitor’s local time</span><br>  <span class="hljs-comment"># Options: auto | light | dark</span><br>  <span class="hljs-attr">default:</span> <span class="hljs-string">auto</span><br><br><span class="hljs-comment"># 主题颜色配置，其他不生效的地方请使用自定义 css 解决，配色可以在下方链接中获得启发</span><br><span class="hljs-comment"># Theme color, please use custom CSS to solve other colors, color schema can be inspired by the links below</span><br><span class="hljs-comment"># See: https://www.webdesignrankings.com/resources/lolcolors/</span><br><span class="hljs-attr">color:</span><br>  <span class="hljs-comment"># body 背景色</span><br>  <span class="hljs-comment"># Color of body background</span><br>  <span class="hljs-attr">body_bg_color:</span> <span class="hljs-string">&quot;#eee&quot;</span><br>  <span class="hljs-comment"># 暗色模式下的 body 背景色，下同</span><br>  <span class="hljs-comment"># Color in dark mode, the same below</span><br>  <span class="hljs-attr">body_bg_color_dark:</span> <span class="hljs-string">&quot;#181c27&quot;</span><br><br>  <span class="hljs-comment"># 顶部菜单背景色</span><br>  <span class="hljs-comment"># Color of navigation bar background</span><br>  <span class="hljs-attr">navbar_bg_color:</span> <span class="hljs-string">&quot;#2f4154&quot;</span><br>  <span class="hljs-attr">navbar_bg_color_dark:</span> <span class="hljs-string">&quot;#1f3144&quot;</span><br><br>  <span class="hljs-comment"># 顶部菜单字体色</span><br>  <span class="hljs-comment"># Color of navigation bar text</span><br>  <span class="hljs-attr">navbar_text_color:</span> <span class="hljs-string">&quot;#fff&quot;</span><br>  <span class="hljs-attr">navbar_text_color_dark:</span> <span class="hljs-string">&quot;#d0d0d0&quot;</span><br><br>  <span class="hljs-comment"># 副标题字体色</span><br>  <span class="hljs-comment"># Color of navigation bar text</span><br>  <span class="hljs-attr">subtitle_color:</span> <span class="hljs-string">&quot;#fff&quot;</span><br>  <span class="hljs-attr">subtitle_color_dark:</span> <span class="hljs-string">&quot;#d0d0d0&quot;</span><br><br>  <span class="hljs-comment"># 全局字体色</span><br>  <span class="hljs-comment"># Color of global text</span><br>  <span class="hljs-attr">text_color:</span> <span class="hljs-string">&quot;#3c4858&quot;</span><br>  <span class="hljs-attr">text_color_dark:</span> <span class="hljs-string">&quot;#c4c6c9&quot;</span><br><br>  <span class="hljs-comment"># 全局次级字体色（摘要、简介等位置）</span><br>  <span class="hljs-comment"># Color of global secondary text (excerpt, introduction, etc.)</span><br>  <span class="hljs-attr">sec_text_color:</span> <span class="hljs-string">&quot;#718096&quot;</span><br>  <span class="hljs-attr">sec_text_color_dark:</span> <span class="hljs-string">&quot;#a7a9ad&quot;</span><br><br>  <span class="hljs-comment"># 主面板背景色</span><br>  <span class="hljs-comment"># Color of main board</span><br>  <span class="hljs-attr">board_color:</span> <span class="hljs-string">&quot;#fff&quot;</span><br>  <span class="hljs-attr">board_color_dark:</span> <span class="hljs-string">&quot;#252d38&quot;</span><br><br>  <span class="hljs-comment"># 文章正文字体色</span><br>  <span class="hljs-comment"># Color of post text</span><br>  <span class="hljs-attr">post_text_color:</span> <span class="hljs-string">&quot;#2c3e50&quot;</span><br>  <span class="hljs-attr">post_text_color_dark:</span> <span class="hljs-string">&quot;#c4c6c9&quot;</span><br><br>  <span class="hljs-comment"># 文章正文字体色（h1 h2 h3...）</span><br>  <span class="hljs-comment"># Color of Article heading (h1 h2 h3...)</span><br>  <span class="hljs-attr">post_heading_color:</span> <span class="hljs-string">&quot;#1a202c&quot;</span><br>  <span class="hljs-attr">post_heading_color_dark:</span> <span class="hljs-string">&quot;#c4c6c9&quot;</span><br><br>  <span class="hljs-comment"># 文章超链接字体色</span><br>  <span class="hljs-comment"># Color of post link</span><br>  <span class="hljs-attr">post_link_color:</span> <span class="hljs-string">&quot;#0366d6&quot;</span><br>  <span class="hljs-attr">post_link_color_dark:</span> <span class="hljs-string">&quot;#1589e9&quot;</span><br><br>  <span class="hljs-comment"># 超链接悬浮时字体色</span><br>  <span class="hljs-comment"># Color of link when hovering</span><br>  <span class="hljs-attr">link_hover_color:</span> <span class="hljs-string">&quot;#30a9de&quot;</span><br>  <span class="hljs-attr">link_hover_color_dark:</span> <span class="hljs-string">&quot;#30a9de&quot;</span><br><br>  <span class="hljs-comment"># 超链接悬浮背景色</span><br>  <span class="hljs-comment"># Color of link background when hovering</span><br>  <span class="hljs-attr">link_hover_bg_color:</span> <span class="hljs-string">&quot;#f8f9fa&quot;</span><br>  <span class="hljs-attr">link_hover_bg_color_dark:</span> <span class="hljs-string">&quot;#364151&quot;</span><br><br>  <span class="hljs-comment"># 分隔线和表格边线的颜色</span><br>  <span class="hljs-comment"># Color of horizontal rule and table border</span><br>  <span class="hljs-attr">line_color:</span> <span class="hljs-string">&quot;#eaecef&quot;</span><br>  <span class="hljs-attr">line_color_dark:</span> <span class="hljs-string">&quot;#435266&quot;</span><br><br>  <span class="hljs-comment"># 滚动条颜色</span><br>  <span class="hljs-comment"># Color of scrollbar</span><br>  <span class="hljs-attr">scrollbar_color:</span> <span class="hljs-string">&quot;#c4c6c9&quot;</span><br>  <span class="hljs-attr">scrollbar_color_dark:</span> <span class="hljs-string">&quot;#687582&quot;</span><br>  <span class="hljs-comment"># 滚动条悬浮颜色</span><br>  <span class="hljs-comment"># Color of scrollbar when hovering</span><br>  <span class="hljs-attr">scrollbar_hover_color:</span> <span class="hljs-string">&quot;#a6a6a6&quot;</span><br>  <span class="hljs-attr">scrollbar_hover_color_dark:</span> <span class="hljs-string">&quot;#9da8b3&quot;</span><br><br>  <span class="hljs-comment"># 按钮背景色</span><br>  <span class="hljs-comment"># Color of button</span><br>  <span class="hljs-attr">button_bg_color:</span> <span class="hljs-string">&quot;transparent&quot;</span><br>  <span class="hljs-attr">button_bg_color_dark:</span> <span class="hljs-string">&quot;transparent&quot;</span><br>  <span class="hljs-comment"># 按钮悬浮背景色</span><br>  <span class="hljs-comment"># Color of button when hovering</span><br>  <span class="hljs-attr">button_hover_bg_color:</span> <span class="hljs-string">&quot;#f2f3f5&quot;</span><br>  <span class="hljs-attr">button_hover_bg_color_dark:</span> <span class="hljs-string">&quot;#46647e&quot;</span><br><br><span class="hljs-comment"># 主题字体配置</span><br><span class="hljs-comment"># Font</span><br><span class="hljs-attr">font:</span><br>  <span class="hljs-attr">font_size:</span> <span class="hljs-string">16px</span><br>  <span class="hljs-attr">font_family:</span><br>  <span class="hljs-attr">letter_spacing:</span> <span class="hljs-number">0.</span><span class="hljs-string">02em</span><br>  <span class="hljs-attr">code_font_size:</span> <span class="hljs-number">85</span><span class="hljs-string">%</span><br><br><span class="hljs-comment"># 指定自定义 .js 文件路径，支持列表；路径是相对 source 目录，如 /js/custom.js 对应存放目录 source/js/custom.js</span><br><span class="hljs-comment"># Specify the path of your custom js file, support list. The path is relative to the source directory, such as `/js/custom.js` corresponding to the directory `source/js/custom.js`</span><br><span class="hljs-attr">custom_js:</span><br><br><span class="hljs-comment"># 指定自定义 .css 文件路径，用法和 custom_js 相同</span><br><span class="hljs-comment"># The usage is the same as custom_js</span><br><span class="hljs-attr">custom_css:</span><br><br><span class="hljs-comment"># 网页访问统计</span><br><span class="hljs-comment"># Analysis of website visitors</span><br><span class="hljs-attr">web_analytics:</span>  <span class="hljs-comment"># 网页访问统计</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">false</span><br><br>  <span class="hljs-comment"># 遵循访客浏览器&quot;请勿追踪&quot;的设置，如果开启则不统计其访问</span><br>  <span class="hljs-comment"># Follow the &quot;Do Not Track&quot; setting of the visitor&#x27;s browser</span><br>  <span class="hljs-comment"># See: https://www.w3.org/TR/tracking-dnt/</span><br>  <span class="hljs-attr">follow_dnt:</span> <span class="hljs-literal">true</span><br><br>  <span class="hljs-comment"># 百度统计的 Key，值需要获取下方链接中 `hm.js?` 后边的字符串</span><br>  <span class="hljs-comment"># Baidu analytics, get the string behind `hm.js?`</span><br>  <span class="hljs-comment"># See: https://tongji.baidu.com/sc-web/10000033910/home/site/getjs?siteId=13751376</span><br>  <span class="hljs-attr">baidu:</span><br><br>  <span class="hljs-comment"># Google Analytics 4 的媒体资源 ID</span><br>  <span class="hljs-comment"># Google Analytics 4 MEASUREMENT_ID</span><br>  <span class="hljs-comment"># See: https://support.google.com/analytics/answer/9744165#zippy=%2Cin-this-article</span><br>  <span class="hljs-attr">google:</span><br>    <span class="hljs-attr">measurement_id:</span><br><br>  <span class="hljs-comment"># 腾讯统计的 H5 App ID，开启高级功能才有cid</span><br>  <span class="hljs-comment"># Tencent analytics, set APP ID</span><br>  <span class="hljs-comment"># See: https://mta.qq.com/h5/manage/ctr_app_manage</span><br>  <span class="hljs-attr">tencent:</span><br>    <span class="hljs-attr">sid:</span><br>    <span class="hljs-attr">cid:</span><br><br>  <span class="hljs-comment"># 51.la 站点统计 ID</span><br>  <span class="hljs-comment"># 51.la analytics</span><br>  <span class="hljs-comment"># See: https://www.51.la/user/site/index</span><br>  <span class="hljs-attr">woyaola:</span>  <span class="hljs-comment"># 51.la 站点统计 ID，参见</span><br><br>  <span class="hljs-comment"># 友盟/cnzz 站点统计 web_id</span><br>  <span class="hljs-comment"># cnzz analytics</span><br>  <span class="hljs-comment"># See: https://web.umeng.com/main.php?c=site&amp;a=show</span><br>  <span class="hljs-attr">cnzz:</span><br><br>  <span class="hljs-comment"># LeanCloud 计数统计，可用于 PV UV 展示，如果 `web_analytics: enable` 没有开启，PV UV 展示只会查询不会增加</span><br>  <span class="hljs-comment"># LeanCloud count statistics, which can be used for PV UV display. If `web_analytics: enable` is false, PV UV display will only query and not increase</span><br>  <span class="hljs-attr">leancloud:</span><br>    <span class="hljs-attr">app_id:</span><br>    <span class="hljs-attr">app_key:</span><br>    <span class="hljs-comment"># REST API 服务器地址，国际版不填</span><br>    <span class="hljs-comment"># Only the Chinese mainland users need to set</span><br>    <span class="hljs-attr">server_url:</span><br>    <span class="hljs-comment"># 统计页面时获取路径的属性</span><br>    <span class="hljs-comment"># Get the attribute of the page path during statistics</span><br>    <span class="hljs-attr">path:</span> <span class="hljs-string">window.location.pathname</span><br>    <span class="hljs-comment"># 开启后不统计本地路径( localhost 与 127.0.0.1 )</span><br>    <span class="hljs-comment"># If true, ignore localhost &amp; 127.0.0.1</span><br>    <span class="hljs-attr">ignore_local:</span> <span class="hljs-literal">false</span><br><br><span class="hljs-comment"># 对页面中的图片和评论插件进行懒加载处理，可见范围外的元素不会提前加载</span><br><span class="hljs-comment"># Lazy loading of images and comment plugin on the page</span><br><span class="hljs-attr">lazyload:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br><br>  <span class="hljs-comment"># 加载时的占位图片</span><br>  <span class="hljs-comment"># The placeholder image when loading</span><br>  <span class="hljs-attr">loading_img:</span> <span class="hljs-string">/img/loading.gif</span><br><br>  <span class="hljs-comment"># 开启后懒加载仅在文章页生效，如果自定义页面需要使用，可以在 Front-matter 里指定 `lazyload: true`</span><br>  <span class="hljs-comment"># If true, only enable lazyload on the post page. For custom pages, you can set &#x27;lazyload: true&#x27; in front-matter</span><br>  <span class="hljs-attr">onlypost:</span> <span class="hljs-literal">false</span><br><br>  <span class="hljs-comment"># 触发加载的偏移倍数，基数是视窗高度，可根据部署环境的请求速度调节</span><br>  <span class="hljs-comment"># The factor of viewport height that triggers loading</span><br>  <span class="hljs-attr">offset_factor:</span> <span class="hljs-number">2</span><br><br><span class="hljs-comment"># 图标库，包含了大量社交类图标，主题依赖的不包含在内，因此可自行修改，详见 https://hexo.fluid-dev.com/docs/icon/</span><br><span class="hljs-comment"># Icon library, which includes many social icons, does not include those theme dependent, so your can modify link by yourself. See: https://hexo.fluid-dev.com/docs/en/icon/</span><br><span class="hljs-attr">iconfont:</span> <span class="hljs-string">//at.alicdn.com/t/font_1736178_lbnruvf0jn.css</span><br><br><br><span class="hljs-comment">#---------------------------</span><br><span class="hljs-comment"># 页头</span><br><span class="hljs-comment"># Header</span><br><span class="hljs-comment">#---------------------------</span><br><br><span class="hljs-comment"># 导航栏的相关配置</span><br><span class="hljs-comment"># Navigation bar</span><br><span class="hljs-attr">navbar:</span><br>  <span class="hljs-comment"># 导航栏左侧的标题，为空则按 hexo config 中 `title` 显示</span><br>  <span class="hljs-comment"># The title on the left side of the navigation bar. If empty, it is based on `title` in hexo config</span><br>  <span class="hljs-attr">blog_title:</span> <span class="hljs-string">&quot;Hexo&quot;</span><br><br>  <span class="hljs-comment"># 导航栏毛玻璃特效，实验性功能，可能会造成页面滚动掉帧和抖动，部分浏览器不支持会自动不生效</span><br>  <span class="hljs-comment"># Navigation bar frosted glass special animation. It is an experimental feature</span><br>  <span class="hljs-attr">ground_glass:</span><br>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br><br>    <span class="hljs-comment"># 模糊像素，只能为数字，数字越大模糊度越高</span><br>    <span class="hljs-comment"># Number of blurred pixel. the larger the number, the higher the blur</span><br>    <span class="hljs-attr">px:</span> <span class="hljs-number">3</span><br><br>    <span class="hljs-comment"># 不透明度，数字越大透明度越低，注意透明过度可能看不清菜单字体</span><br>    <span class="hljs-comment"># Ratio of opacity, 1.0 is completely opaque</span><br>    <span class="hljs-comment"># available: 0 - 1.0</span><br>    <span class="hljs-attr">alpha:</span> <span class="hljs-number">0.7</span><br><br>  <span class="hljs-comment"># 导航栏菜单，可自行增减，key 用来关联 languages/*.yml，如不存在关联则显示 key 本身的值；icon 是 css class，可以省略；增加 name 可以强制显示指定名称</span><br>  <span class="hljs-comment"># Navigation bar menu. `key` is used to associate languages/*.yml. If there is no association, the value of `key` itself will be displayed; if `icon` is a css class, it can be omitted; adding `name` can force the display of the specified name</span><br>  <span class="hljs-attr">menu:</span><br>    <span class="hljs-bullet">-</span> &#123; <span class="hljs-attr">key:</span> <span class="hljs-string">&quot;home&quot;</span>, <span class="hljs-attr">link:</span> <span class="hljs-string">&quot;/&quot;</span>, <span class="hljs-attr">icon:</span> <span class="hljs-string">&quot;iconfont icon-home-fill&quot;</span> &#125;<br>    <span class="hljs-bullet">-</span> &#123; <span class="hljs-attr">key:</span> <span class="hljs-string">&quot;archive&quot;</span>, <span class="hljs-attr">link:</span> <span class="hljs-string">&quot;/archives/&quot;</span>, <span class="hljs-attr">icon:</span> <span class="hljs-string">&quot;iconfont icon-archive-fill&quot;</span> &#125;<br>    <span class="hljs-bullet">-</span> &#123; <span class="hljs-attr">key:</span> <span class="hljs-string">&quot;category&quot;</span>, <span class="hljs-attr">link:</span> <span class="hljs-string">&quot;/categories/&quot;</span>, <span class="hljs-attr">icon:</span> <span class="hljs-string">&quot;iconfont icon-category-fill&quot;</span> &#125;<br>    <span class="hljs-bullet">-</span> &#123; <span class="hljs-attr">key:</span> <span class="hljs-string">&quot;tag&quot;</span>, <span class="hljs-attr">link:</span> <span class="hljs-string">&quot;/tags/&quot;</span>, <span class="hljs-attr">icon:</span> <span class="hljs-string">&quot;iconfont icon-tags-fill&quot;</span> &#125;<br>    <span class="hljs-bullet">-</span> &#123; <span class="hljs-attr">key:</span> <span class="hljs-string">&quot;about&quot;</span>, <span class="hljs-attr">link:</span> <span class="hljs-string">&quot;/about/&quot;</span>, <span class="hljs-attr">icon:</span> <span class="hljs-string">&quot;iconfont icon-user-fill&quot;</span> &#125;<br>    <span class="hljs-bullet">-</span> &#123; <span class="hljs-attr">key:</span> <span class="hljs-string">&quot;links&quot;</span>, <span class="hljs-attr">link:</span> <span class="hljs-string">&quot;/links/&quot;</span>, <span class="hljs-attr">icon:</span> <span class="hljs-string">&quot;iconfont icon-link-fill&quot;</span> &#125;<br><br><span class="hljs-comment"># 搜索功能，基于 hexo-generator-search 插件，若已安装其他搜索插件请关闭此功能，以避免生成多余的索引文件</span><br><span class="hljs-comment"># Search feature, based on hexo-generator-search. If you have installed other search plugins, please disable this feature to avoid generating redundant index files</span><br><span class="hljs-attr">search:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br><br>  <span class="hljs-comment"># 搜索索引文件的路径，可以是相对路径或外站的绝对路径</span><br>  <span class="hljs-comment"># Path for search index file, it can be a relative path or an absolute path</span><br>  <span class="hljs-attr">path:</span> <span class="hljs-string">/local-search.xml</span><br><br>  <span class="hljs-comment"># 文件生成在本地的位置，必须是相对路径</span><br>  <span class="hljs-comment"># The location where the index file is generated locally, it must be a relative location</span><br>  <span class="hljs-attr">generate_path:</span> <span class="hljs-string">/local-search.xml</span><br><br>  <span class="hljs-comment"># 搜索的范围</span><br>  <span class="hljs-comment"># Search field</span><br>  <span class="hljs-comment"># Options: post | page | all</span><br>  <span class="hljs-attr">field:</span> <span class="hljs-string">all</span><br><br>  <span class="hljs-comment"># 搜索是否扫描正文</span><br>  <span class="hljs-comment"># If true, search will scan the post content</span><br>  <span class="hljs-attr">content:</span> <span class="hljs-literal">true</span><br><br><span class="hljs-comment"># 首屏图片的相关配置</span><br><span class="hljs-comment"># Config of the big image on the first screen</span><br><span class="hljs-attr">banner:</span><br>  <span class="hljs-comment"># 视差滚动，图片与板块会随着屏幕滚动产生视差效果</span><br>  <span class="hljs-comment"># Scrolling parallax</span><br>  <span class="hljs-attr">parallax:</span> <span class="hljs-literal">true</span><br><br>  <span class="hljs-comment"># 图片最小的宽高比，以免图片两边被过度裁剪，适用于移动端竖屏时，如需关闭设为 0</span><br>  <span class="hljs-comment"># Minimum ratio of width to height, applicable to the vertical screen of mobile device, if you need to close it, set it to 0</span><br>  <span class="hljs-attr">width_height_ratio:</span> <span class="hljs-number">1.0</span><br><br><span class="hljs-comment"># 向下滚动的箭头</span><br><span class="hljs-comment"># Scroll down arrow</span><br><span class="hljs-attr">scroll_down_arrow:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br><br>  <span class="hljs-comment"># 头图高度不小于指定比例，才显示箭头</span><br>  <span class="hljs-comment"># Only the height of the banner image is greater than the ratio, the arrow is displayed</span><br>  <span class="hljs-comment"># Available: 0 - 100</span><br>  <span class="hljs-attr">banner_height_limit:</span> <span class="hljs-number">80</span><br><br>  <span class="hljs-comment"># 翻页后自动滚动</span><br>  <span class="hljs-comment"># Auto scroll after page turning</span><br>  <span class="hljs-attr">scroll_after_turning_page:</span> <span class="hljs-literal">true</span><br><br><span class="hljs-comment"># 向顶部滚动的箭头</span><br><span class="hljs-comment"># Scroll top arrow</span><br><span class="hljs-attr">scroll_top_arrow:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br><br><span class="hljs-comment"># Open Graph metadata</span><br><span class="hljs-comment"># See: https://hexo.io/docs/helpers.html#open-graph</span><br><span class="hljs-attr">open_graph:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">twitter_card:</span> <span class="hljs-string">summary_large_image</span><br>  <span class="hljs-attr">twitter_id:</span><br>  <span class="hljs-attr">twitter_site:</span><br>  <span class="hljs-attr">google_plus:</span><br>  <span class="hljs-attr">fb_admins:</span><br>  <span class="hljs-attr">fb_app_id:</span><br><br><br><span class="hljs-comment">#---------------------------</span><br><span class="hljs-comment"># 页脚</span><br><span class="hljs-comment"># Footer</span><br><span class="hljs-comment">#---------------------------</span><br><span class="hljs-attr">footer:</span><br>  <span class="hljs-comment"># 页脚第一行文字的 HTML，建议保留 Fluid 的链接，用于向更多人推广本主题</span><br>  <span class="hljs-comment"># HTML of the first line of the footer, it is recommended to keep the Fluid link to promote this theme to more people</span><br>  <span class="hljs-attr">content:</span> <span class="hljs-string">&#x27;</span><br><span class="hljs-string">    &lt;a href=&quot;https://hexo.io&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener&quot;&gt;&lt;span&gt;Hexo&lt;/span&gt;&lt;/a&gt;</span><br><span class="hljs-string">    &lt;i class=&quot;iconfont icon-love&quot;&gt;&lt;/i&gt;</span><br><span class="hljs-string">    &lt;a href=&quot;https://github.com/fluid-dev/hexo-theme-fluid&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener&quot;&gt;&lt;span&gt;Fluid&lt;/span&gt;&lt;/a&gt;</span><br><span class="hljs-string">  &lt;div style=&quot;font-size: 0.85rem&quot;&gt;</span><br><span class="hljs-string">      &lt;span id=&quot;timeDate&quot;&gt;载入天数...&lt;/span&gt;</span><br><span class="hljs-string">      &lt;span id=&quot;times&quot;&gt;载入时分秒...&lt;/span&gt;</span><br><span class="hljs-string">      &lt;script src=&quot;/js/duration.js&quot;&gt;&lt;/script&gt;</span><br><span class="hljs-string">    &lt;/div&gt;</span><br><span class="hljs-string">  &#x27;</span><br><br>  <span class="hljs-comment"># 展示网站的 PV、UV 统计数</span><br>  <span class="hljs-comment"># Display website PV and UV statistics</span><br>  <span class="hljs-attr">statistics:</span><br>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">false</span><br><br>    <span class="hljs-comment"># 统计数据来源，使用 leancloud 需要设置 `web_analytics: leancloud` 中的参数；使用 busuanzi 不需要额外设置，但是有时不稳定，另外本地运行时 busuanzi 显示统计数据很大属于正常现象，部署后会正常</span><br>    <span class="hljs-comment"># Data source. If use leancloud, you need to set the parameter in `web_analytics: leancloud`</span><br>    <span class="hljs-comment"># Options: busuanzi | leancloud</span><br>    <span class="hljs-attr">source:</span> <span class="hljs-string">&quot;busuanzi&quot;</span><br><br>  <span class="hljs-comment"># 国内大陆服务器的备案信息</span><br>  <span class="hljs-comment"># For Chinese mainland website policy, other areas keep disable</span><br>  <span class="hljs-attr">beian:</span><br>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">false</span><br>    <span class="hljs-comment"># ICP证号</span><br>    <span class="hljs-attr">icp_text:</span> <span class="hljs-string">京ICP证123456号</span><br>    <span class="hljs-comment"># 公安备案号，不填则只显示ICP</span><br>    <span class="hljs-attr">police_text:</span> <span class="hljs-string">京公网安备12345678号</span><br>    <span class="hljs-comment"># 公安备案的编号，用于URL跳转查询</span><br>    <span class="hljs-attr">police_code:</span> <span class="hljs-number">12345678</span><br>    <span class="hljs-comment"># 公安备案的图片. 为空时不显示备案图片</span><br>    <span class="hljs-attr">police_icon:</span> <span class="hljs-string">/img/police_beian.png</span><br><br><br><span class="hljs-comment">#---------------------------</span><br><span class="hljs-comment"># 首页</span><br><span class="hljs-comment"># Home Page</span><br><span class="hljs-comment">#---------------------------</span><br><span class="hljs-attr">index:</span><br>  <span class="hljs-comment"># 首页 Banner 头图，可以是相对路径或绝对路径，以下相同</span><br>  <span class="hljs-comment"># Path of Banner image, can be a relative path or an absolute path, the same on other pages</span><br>  <span class="hljs-attr">banner_img:</span> <span class="hljs-string">/images/page-home.webp</span><br><br>  <span class="hljs-comment"># 头图高度，屏幕百分比</span><br>  <span class="hljs-comment"># Height ratio of banner image</span><br>  <span class="hljs-comment"># Available: 0 - 100</span><br>  <span class="hljs-attr">banner_img_height:</span> <span class="hljs-number">100</span><br><br>  <span class="hljs-comment"># 头图黑色蒙版的不透明度，available: 0 - 1.0， 1 是完全不透明</span><br>  <span class="hljs-comment"># Opacity of the banner mask, 1.0 is completely opaque</span><br>  <span class="hljs-comment"># Available: 0 - 1.0</span><br>  <span class="hljs-attr">banner_mask_alpha:</span> <span class="hljs-number">0.3</span><br><br>  <span class="hljs-comment"># 首页副标题的独立设置</span><br>  <span class="hljs-comment"># Independent config of home page subtitle</span><br>  <span class="hljs-attr">slogan:</span><br>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br><br>    <span class="hljs-comment"># 为空则按 hexo config.subtitle 显示</span><br>    <span class="hljs-comment"># If empty, text based on `subtitle` in hexo config</span><br>    <span class="hljs-attr">text:</span> <span class="hljs-string">&quot;An elegant Material-Design theme for Hexo&quot;</span><br><br>    <span class="hljs-comment"># 通过 API 接口作为首页副标题的内容，必须返回的是 JSON 格式，如果请求失败则按 text 字段显示，该功能必须先开启 typing 打字机功能</span><br>    <span class="hljs-comment"># Subtitle of the homepage through the API, must be returned a JSON. If the request fails, it will be displayed in `text` value. This feature must first enable the typing animation</span><br>    <span class="hljs-attr">api:</span><br>      <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br><br>      <span class="hljs-comment"># 请求地址</span><br>      <span class="hljs-comment"># Request url</span><br>      <span class="hljs-attr">url:</span> <span class="hljs-string">&quot;https://v1.hitokoto.cn/&quot;</span><br><br>      <span class="hljs-comment"># 请求方法</span><br>      <span class="hljs-comment"># Request method</span><br>      <span class="hljs-comment"># Available: GET | POST | PUT</span><br>      <span class="hljs-attr">method:</span> <span class="hljs-string">&quot;GET&quot;</span><br><br>      <span class="hljs-comment"># 请求头</span><br>      <span class="hljs-comment"># Request headers</span><br>      <span class="hljs-attr">headers:</span> &#123;&#125;<br><br>      <span class="hljs-comment"># 从请求结果获取字符串的取值字段，最终必须是一个字符串，例如返回结果为 &#123;&quot;data&quot;: &#123;&quot;author&quot;: &quot;fluid&quot;, &quot;content&quot;: &quot;An elegant theme&quot;&#125;&#125;, 则取值字段为 [&#x27;data&#x27;, &#x27;content&#x27;]；如果返回是列表则自动选择第一项</span><br>      <span class="hljs-comment"># The value field of the string obtained from the response. For example, the response content is &#123;&quot;data&quot;: &#123;&quot;author&quot;: &quot;fluid&quot;, &quot;content&quot;: &quot;An elegant theme&quot;&#125;&#125;, the expected `keys: [&#x27;data&#x27;,&#x27;content&#x27;]`; if the return is a list, the first item is automatically selected</span><br>      <span class="hljs-attr">keys:</span> [<span class="hljs-string">&quot;hitokoto&quot;</span>]<br><br>  <span class="hljs-comment"># 自动截取文章摘要</span><br>  <span class="hljs-comment"># Auto extract post</span><br>  <span class="hljs-attr">auto_excerpt:</span><br>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br><br>  <span class="hljs-comment"># 打开文章的标签方式</span><br>  <span class="hljs-comment"># The browser tag to open the post</span><br>  <span class="hljs-comment"># Available: _blank | _self</span><br>  <span class="hljs-attr">post_url_target:</span> <span class="hljs-string">_self</span><br><br>  <span class="hljs-comment"># 是否显示文章信息（时间、分类、标签）</span><br>  <span class="hljs-comment"># Meta information of post</span><br>  <span class="hljs-attr">post_meta:</span><br>    <span class="hljs-attr">date:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">category:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">tag:</span> <span class="hljs-literal">true</span><br><br>  <span class="hljs-comment"># 文章通过 sticky 排序后，在首页文章标题前显示图标</span><br>  <span class="hljs-comment"># If the posts are sorted by `sticky`, an icon is displayed in front of the post title</span><br>  <span class="hljs-attr">post_sticky:</span><br>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">icon:</span> <span class="hljs-string">&quot;iconfont icon-top&quot;</span><br><br><br><span class="hljs-comment">#---------------------------</span><br><span class="hljs-comment"># 文章页</span><br><span class="hljs-comment"># Post Page</span><br><span class="hljs-comment">#---------------------------</span><br><span class="hljs-attr">post:</span><br>  <span class="hljs-attr">banner_img:</span> <span class="hljs-string">/images/page-article.webp</span><br>  <span class="hljs-attr">banner_img_height:</span> <span class="hljs-number">70</span><br>  <span class="hljs-attr">banner_mask_alpha:</span> <span class="hljs-number">0.3</span><br><br>  <span class="hljs-comment"># 文章在首页的默认封面图，当没有指定 index_img 时会使用该图片，若两者都为空则不显示任何图片</span><br>  <span class="hljs-comment"># Path of the default post cover when `index_img` is not set. If both are empty, no image will be displayed</span><br>  <span class="hljs-attr">default_index_img:</span><br><br>  <span class="hljs-comment"># 文章标题下方的元信息</span><br>  <span class="hljs-comment"># Meta information below title</span><br>  <span class="hljs-attr">meta:</span><br>    <span class="hljs-comment"># 作者，优先根据 front-matter 里 author 字段，其次是 hexo 配置中 author 值</span><br>    <span class="hljs-comment"># Author, based on `author` field in front-matter, if not set, based on `author` value in hexo config</span><br>    <span class="hljs-attr">author:</span><br>      <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br><br>    <span class="hljs-comment"># 文章日期，优先根据 front-matter 里 date 字段，其次是 md 文件日期</span><br>    <span class="hljs-comment"># Post date, based on `date` field in front-matter, if not set, based on create date of .md file</span><br>    <span class="hljs-attr">date:</span><br>      <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>      <span class="hljs-comment"># 格式参照 ISO-8601 日期格式化</span><br>      <span class="hljs-comment"># ISO-8601 date format</span><br>      <span class="hljs-comment"># See: http://momentjs.cn/docs/#/parsing/string-format/</span><br>      <span class="hljs-attr">format:</span> <span class="hljs-string">&quot;LL a&quot;</span><br><br>    <span class="hljs-comment"># 字数统计</span><br>    <span class="hljs-comment"># Word count</span><br>    <span class="hljs-attr">wordcount:</span><br>      <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br><br>    <span class="hljs-comment"># 估计阅读全文需要的时长</span><br>    <span class="hljs-comment"># Estimated reading time</span><br>    <span class="hljs-attr">min2read:</span><br>      <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>      <span class="hljs-comment"># 每个字词的长度，建议：中文≈2，英文≈5，中英混合可自行调节</span><br>      <span class="hljs-comment"># Average word length (chars count in word), ZH ≈ 2, EN ≈ 5</span><br>      <span class="hljs-attr">awl:</span> <span class="hljs-number">2</span><br>      <span class="hljs-comment"># 每分钟阅读字数，如果大部分是技术文章可适度调低</span><br>      <span class="hljs-comment"># Words per minute</span><br>      <span class="hljs-attr">wpm:</span> <span class="hljs-number">60</span><br><br>    <span class="hljs-comment"># 浏览量计数</span><br>    <span class="hljs-comment"># Number of visits</span><br>    <span class="hljs-attr">views:</span><br>      <span class="hljs-attr">enable:</span> <span class="hljs-literal">false</span><br>      <span class="hljs-comment"># 统计数据来源</span><br>      <span class="hljs-comment"># Data Source</span><br>      <span class="hljs-comment"># Options: busuanzi | leancloud</span><br>      <span class="hljs-attr">source:</span> <span class="hljs-string">&quot;busuanzi&quot;</span><br><br>  <span class="hljs-comment"># 在文章开头显示文章更新时间，该时间默认是 md 文件更新时间，可通过 front-matter 中 `updated` 手动指定（和 date 一样格式）</span><br>  <span class="hljs-comment"># Update date is displayed at the beginning of the post. The default date is the update date of the md file, which can be manually specified by `updated` in front-matter (same format as date)</span><br>  <span class="hljs-attr">updated:</span><br>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">false</span><br><br>    <span class="hljs-comment"># 格式参照 ISO-8601 日期格式化</span><br>    <span class="hljs-comment"># ISO-8601 date format</span><br>    <span class="hljs-comment"># See: http://momentjs.cn/docs/#/parsing/string-format/</span><br>    <span class="hljs-attr">date_format:</span> <span class="hljs-string">&quot;LL a&quot;</span><br><br>    <span class="hljs-comment"># 是否使用相对时间表示，比如：&quot;3 天前&quot;</span><br>    <span class="hljs-comment"># If true, it will be a relative time, such as: &quot;3 days ago&quot;</span><br>    <span class="hljs-attr">relative:</span> <span class="hljs-literal">false</span><br><br>    <span class="hljs-comment"># 提示标签类型</span><br>    <span class="hljs-comment"># Note class</span><br>    <span class="hljs-comment"># Options: default | primary | info | success | warning | danger | light</span><br>    <span class="hljs-attr">note_class:</span> <span class="hljs-string">info</span><br><br>  <span class="hljs-comment"># 侧边栏展示当前分类下的文章</span><br>  <span class="hljs-comment"># Sidebar of category</span><br>  <span class="hljs-attr">category_bar:</span><br>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br><br>    <span class="hljs-comment"># 开启后，只有在文章 Front-matter 里指定 `category_bar: true` 才会展示分类，也可以通过 `category_bar: [&quot;分类A&quot;]` 来指定分类</span><br>    <span class="hljs-comment"># If true, only set `category_bar: true` in Front-matter will enable sidebar of category, also set `category_bar: [&quot;CategoryA&quot;]` to specify categories</span><br>    <span class="hljs-attr">specific:</span> <span class="hljs-literal">true</span><br><br>    <span class="hljs-comment"># 置于板块的左侧或右侧</span><br>    <span class="hljs-comment"># place in the board</span><br>    <span class="hljs-comment"># Options: left | right</span><br>    <span class="hljs-attr">placement:</span> <span class="hljs-string">left</span><br><br>    <span class="hljs-comment"># 文章的排序字段，前面带减号是倒序，不带减号是正序</span><br>    <span class="hljs-comment"># Sort field for posts, with a minus sign is reverse order</span><br>    <span class="hljs-comment"># Options: date | title | or other field of front-matter</span><br>    <span class="hljs-attr">post_order_by:</span> <span class="hljs-string">&quot;title&quot;</span><br><br>    <span class="hljs-comment"># 单个分类中折叠展示文章数的最大值，超过限制会显示 More，0 则不限制</span><br>    <span class="hljs-comment"># The maximum number of posts in a single category. If the limit is exceeded, it will be displayed More. If 0 no limit</span><br>    <span class="hljs-attr">post_limit:</span> <span class="hljs-number">0</span><br><br>  <span class="hljs-comment"># 侧边栏展示文章目录</span><br>  <span class="hljs-comment"># Table of contents (TOC) in the sidebar</span><br>  <span class="hljs-attr">toc:</span><br>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br><br>    <span class="hljs-comment"># 置于板块的左侧或右侧</span><br>    <span class="hljs-comment"># place in the board</span><br>    <span class="hljs-comment"># Options: left | right</span><br>    <span class="hljs-attr">placement:</span> <span class="hljs-string">right</span><br><br>    <span class="hljs-comment"># 目录会选择这些节点作为标题</span><br>    <span class="hljs-comment"># TOC will select these nodes as headings</span><br>    <span class="hljs-attr">headingSelector:</span> <span class="hljs-string">&quot;h1,h2,h3,h4,h5,h6&quot;</span><br><br>    <span class="hljs-comment"># 层级的折叠深度，0 是全部折叠，大于 0 后如果存在下级标题则默认展开</span><br>    <span class="hljs-comment"># Collapse depth. If 0, all headings collapsed. If greater than 0, it will be expanded by default if there are sub headings</span><br>    <span class="hljs-attr">collapseDepth:</span> <span class="hljs-number">0</span><br><br>  <span class="hljs-comment"># 版权声明，会显示在每篇文章的结尾</span><br>  <span class="hljs-comment"># Copyright, will be displayed at the end of each post</span><br>  <span class="hljs-attr">copyright:</span><br>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br><br>    <span class="hljs-comment"># CreativeCommons license</span><br>    <span class="hljs-comment"># Options: BY | BY-SA | BY-ND | BY-NC | BY-NC-SA | BY-NC-ND</span><br>    <span class="hljs-attr">license:</span> <span class="hljs-string">&#x27;BY&#x27;</span><br><br>    <span class="hljs-comment"># 显示作者</span><br>    <span class="hljs-attr">author:</span><br>      <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br><br>    <span class="hljs-comment"># 显示发布日期</span><br>    <span class="hljs-comment"># Show post date</span><br>    <span class="hljs-attr">post_date:</span><br>      <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>      <span class="hljs-attr">format:</span> <span class="hljs-string">&quot;LL&quot;</span><br><br>    <span class="hljs-comment"># 显示更新日期</span><br>    <span class="hljs-comment"># Show update date</span><br>    <span class="hljs-attr">update_date:</span><br>      <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>      <span class="hljs-attr">format:</span> <span class="hljs-string">&quot;LL&quot;</span><br><br>  <span class="hljs-comment"># 文章底部上一篇下一篇功能</span><br>  <span class="hljs-comment"># Link to previous/next post</span><br>  <span class="hljs-attr">prev_next:</span><br>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br><br>  <span class="hljs-comment"># 文章图片标题</span><br>  <span class="hljs-comment"># Image caption</span><br>  <span class="hljs-attr">image_caption:</span><br>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br><br>  <span class="hljs-comment"># 文章图片可点击放大</span><br>  <span class="hljs-comment"># Zoom feature of images</span><br>  <span class="hljs-attr">image_zoom:</span><br>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-comment"># 放大后图片链接替换规则，可用于将压缩图片链接替换为原图片链接，如 [&#x27;-slim&#x27;, &#x27;&#x27;] 是将链接中 `-slim` 移除；如果想使用正则请使用 `re:` 前缀，如 [&#x27;re:\\d&#123;3,4&#125;\\/\\d&#123;3,4&#125;\\/&#x27;, &#x27;&#x27;]</span><br>    <span class="hljs-comment"># The image url replacement when zooming, the feature can be used to replace the compressed image to the original image, eg: [&#x27;-slim&#x27;, &#x27;&#x27;] removes `-slim` from the image url when zooming; if you want to use regular, use prefix `re:`, eg: [&#x27;re:\\d&#123;3,4&#125;\\/\\d&#123;3,4&#125;\\/&#x27;,&#x27;&#x27;]</span><br>    <span class="hljs-attr">img_url_replace:</span> [<span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>]<br><br>  <span class="hljs-comment"># 脚注语法，会在文章底部生成脚注，如果 Markdown 渲染器本身支持，则建议关闭，否则可能会冲突</span><br>  <span class="hljs-comment"># Support footnote syntax, footnotes will be generated at the bottom of the post page. If the Markdown renderer itself supports it, please disable it, otherwise it may conflict</span><br>  <span class="hljs-attr">footnote:</span><br>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-comment"># 脚注的节标题，也可以在 front-matter 中通过 `foot<span class="hljs-doctag">note:</span> &lt;h2&gt;Reference&lt;/h2&gt;` 这种形式修改单独页面的 header</span><br>    <span class="hljs-comment"># The section title of the footnote, you can also modify the header of a single page in the form of `foot<span class="hljs-doctag">note:</span> &lt;h2&gt;Reference&lt;/h2&gt;` in front-matter</span><br>    <span class="hljs-attr">header:</span> <span class="hljs-string">&#x27;&#x27;</span><br><br>  <span class="hljs-comment"># 数学公式，开启之前需要更换 Markdown 渲染器，否则复杂公式会有兼容问题，具体请见：https://hexo.fluid-dev.com/docs/guide/##latex-数学公式</span><br>  <span class="hljs-comment"># Mathematical formula. If enable, you need to change the Markdown renderer, see: https://hexo.fluid-dev.com/docs/en/guide/#math</span><br>  <span class="hljs-attr">math:</span><br>    <span class="hljs-comment"># 开启后文章默认可用，自定义页面如需使用，需在 Front-matter 中指定 `math: true`</span><br>    <span class="hljs-comment"># If you want to use math on the custom page, you need to set `math: true` in Front-matter</span><br>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">false</span><br><br>    <span class="hljs-comment"># 开启后，只有在文章 Front-matter 里指定 `math: true` 才会在文章页启动公式转换，以便在页面不包含公式时提高加载速度</span><br>    <span class="hljs-comment"># If true, only set `math: true` in Front-matter will enable math, to load faster when the page does not contain math</span><br>    <span class="hljs-attr">specific:</span> <span class="hljs-literal">false</span><br><br>    <span class="hljs-comment"># Options: mathjax | katex</span><br>    <span class="hljs-attr">engine:</span> <span class="hljs-string">mathjax</span><br><br>  <span class="hljs-comment"># 流程图，基于 mermaid-js，具体请见：https://hexo.fluid-dev.com/docs/guide/#mermaid-流程图</span><br>  <span class="hljs-comment"># Flow chart, based on mermaid-js, see: https://hexo.fluid-dev.com/docs/en/guide/#mermaid</span><br>  <span class="hljs-attr">mermaid:</span><br>    <span class="hljs-comment"># 开启后文章默认可用，自定义页面如需使用，需在 Front-matter 中指定 `mermaid: true`</span><br>    <span class="hljs-comment"># If you want to use mermaid on the custom page, you need to set `mermaid: true` in Front-matter</span><br>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">false</span><br><br>    <span class="hljs-comment"># 开启后，只有在文章 Front-matter 里指定 `mermaid: true` 才会在文章页启动公式转换，以便在页面不包含公式时提高加载速度</span><br>    <span class="hljs-comment"># If true, only set `mermaid: true` in Front-matter will enable mermaid, to load faster when the page does not contain mermaid</span><br>    <span class="hljs-attr">specific:</span> <span class="hljs-literal">false</span><br><br>    <span class="hljs-comment"># See: http://mermaid-js.github.io/mermaid/</span><br>    <span class="hljs-attr">options:</span> &#123; <span class="hljs-attr">theme:</span> <span class="hljs-string">&#x27;default&#x27;</span> &#125;<br><br>  <span class="hljs-comment"># 评论插件</span><br>  <span class="hljs-comment"># Comment plugin</span><br>  <span class="hljs-attr">comments:</span><br>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">false</span><br>    <span class="hljs-comment"># 指定的插件，需要同时设置对应插件的必要参数</span><br>    <span class="hljs-comment"># The specified plugin needs to set the necessary parameters at the same time</span><br>    <span class="hljs-comment"># Options: utterances | disqus | gitalk | valine | waline | changyan | livere | remark42 | twikoo | cusdis | giscus | discuss</span><br>    <span class="hljs-attr">type:</span> <span class="hljs-string">disqus</span><br><br><br><span class="hljs-comment">#---------------------------</span><br><span class="hljs-comment"># 评论插件</span><br><span class="hljs-comment"># Comment plugins</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># 开启评论需要先设置上方 `post: comments: enable: true`，然后根据 `type` 设置下方对应的评论插件参数</span><br><span class="hljs-comment"># Enable comments need to be set `post: comments: enable: true`, then set the corresponding comment plugin parameters below according to `type`</span><br><span class="hljs-comment">#---------------------------</span><br><br><span class="hljs-comment"># Utterances</span><br><span class="hljs-comment"># 基于 GitHub Issues</span><br><span class="hljs-comment"># Based on GitHub Issues</span><br><span class="hljs-comment"># See: https://utteranc.es</span><br><span class="hljs-attr">utterances:</span><br>  <span class="hljs-attr">repo:</span><br>  <span class="hljs-attr">issue_term:</span> <span class="hljs-string">pathname</span><br>  <span class="hljs-attr">label:</span> <span class="hljs-string">utterances</span><br>  <span class="hljs-attr">theme:</span> <span class="hljs-string">github-light</span><br>  <span class="hljs-attr">theme_dark:</span> <span class="hljs-string">github-dark</span><br><br><span class="hljs-comment"># Disqus</span><br><span class="hljs-comment"># 基于第三方的服务，国内用户直接使用容易被墙，建议配合 Disqusjs</span><br><span class="hljs-comment"># Based on third-party service</span><br><span class="hljs-comment"># See: https://disqus.com</span><br><span class="hljs-attr">disqus:</span><br>  <span class="hljs-attr">shortname:</span><br>  <span class="hljs-comment"># 以下为 Disqusjs 支持, 国内用户如果想使用 Disqus 建议配合使用</span><br>  <span class="hljs-comment"># The following are Disqusjs configurations, please ignore if DisqusJS is not required</span><br>  <span class="hljs-comment"># See: https://github.com/SukkaW/DisqusJS</span><br>  <span class="hljs-attr">disqusjs:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-attr">apikey:</span><br><br><span class="hljs-comment"># Gitalk</span><br><span class="hljs-comment"># 基于 GitHub Issues</span><br><span class="hljs-comment"># Based on GitHub Issues</span><br><span class="hljs-comment"># See: https://github.com/gitalk/gitalk#options</span><br><span class="hljs-attr">gitalk:</span><br>  <span class="hljs-attr">clientID:</span><br>  <span class="hljs-attr">clientSecret:</span><br>  <span class="hljs-attr">repo:</span><br>  <span class="hljs-attr">owner:</span><br>  <span class="hljs-attr">admin:</span> [<span class="hljs-string">&#x27;name&#x27;</span>]<br>  <span class="hljs-attr">language:</span> <span class="hljs-string">zh-CN</span><br>  <span class="hljs-attr">labels:</span> [<span class="hljs-string">&#x27;Gitalk&#x27;</span>]<br>  <span class="hljs-attr">perPage:</span> <span class="hljs-number">10</span><br>  <span class="hljs-attr">pagerDirection:</span> <span class="hljs-string">last</span><br>  <span class="hljs-attr">distractionFreeMode:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-attr">createIssueManually:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-comment"># 默认 proxy 可能会失效，解决方法请见下方链接</span><br>  <span class="hljs-comment"># The default proxy may be invalid, refer to the links for solutions</span><br>  <span class="hljs-comment"># https://github.com/gitalk/gitalk/issues/429</span><br>  <span class="hljs-comment"># https://github.com/Zibri/cloudflare-cors-anywhere</span><br>  <span class="hljs-attr">proxy:</span> <span class="hljs-string">https://cors-anywhere.azm.workers.dev/https://github.com/login/oauth/access_token</span><br><br><span class="hljs-comment"># Valine</span><br><span class="hljs-comment"># 基于 LeanCloud</span><br><span class="hljs-comment"># Based on LeanCloud</span><br><span class="hljs-comment"># See: https://valine.js.org/</span><br><span class="hljs-attr">valine:</span><br>  <span class="hljs-attr">appId:</span><br>  <span class="hljs-attr">appKey:</span><br>  <span class="hljs-attr">path:</span> <span class="hljs-string">window.location.pathname</span><br>  <span class="hljs-attr">placeholder:</span><br>  <span class="hljs-attr">avatar:</span> <span class="hljs-string">&#x27;retro&#x27;</span><br>  <span class="hljs-attr">meta:</span> [<span class="hljs-string">&#x27;nick&#x27;</span>, <span class="hljs-string">&#x27;mail&#x27;</span>, <span class="hljs-string">&#x27;link&#x27;</span>]<br>  <span class="hljs-attr">requiredFields:</span> []<br>  <span class="hljs-attr">pageSize:</span> <span class="hljs-number">10</span><br>  <span class="hljs-attr">lang:</span> <span class="hljs-string">&#x27;zh-CN&#x27;</span><br>  <span class="hljs-attr">highlight:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-attr">recordIP:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-attr">serverURLs:</span> <span class="hljs-string">&#x27;&#x27;</span><br>  <span class="hljs-attr">emojiCDN:</span><br>  <span class="hljs-attr">emojiMaps:</span><br>  <span class="hljs-attr">enableQQ:</span> <span class="hljs-literal">false</span><br><br><span class="hljs-comment"># Waline</span><br><span class="hljs-comment"># 从 Valine 衍生而来，额外增加了服务端和多种功能</span><br><span class="hljs-comment"># Derived from Valine, with self-hosted service and new features</span><br><span class="hljs-comment"># See: https://waline.js.org/</span><br><span class="hljs-attr">waline:</span><br>  <span class="hljs-attr">serverURL:</span> <span class="hljs-string">&#x27;&#x27;</span><br>  <span class="hljs-attr">path:</span> <span class="hljs-string">window.location.pathname</span><br>  <span class="hljs-attr">meta:</span> [<span class="hljs-string">&#x27;nick&#x27;</span>, <span class="hljs-string">&#x27;mail&#x27;</span>, <span class="hljs-string">&#x27;link&#x27;</span>]<br>  <span class="hljs-attr">requiredMeta:</span> [<span class="hljs-string">&#x27;nick&#x27;</span>]<br>  <span class="hljs-attr">lang:</span> <span class="hljs-string">&#x27;zh-CN&#x27;</span><br>  <span class="hljs-attr">emoji:</span> [<span class="hljs-string">&#x27;https://cdn.jsdelivr.net/gh/walinejs/emojis/weibo&#x27;</span>]<br>  <span class="hljs-attr">dark:</span> <span class="hljs-string">&#x27;html[data-user-color-scheme=&quot;dark&quot;]&#x27;</span><br>  <span class="hljs-attr">wordLimit:</span> <span class="hljs-number">0</span><br>  <span class="hljs-attr">pageSize:</span> <span class="hljs-number">10</span><br><br><span class="hljs-comment"># 畅言 Changyan</span><br><span class="hljs-comment"># 基于第三方的服务</span><br><span class="hljs-comment"># Based on third-party service, insufficient support for regions outside China</span><br><span class="hljs-comment"># http://changyan.kuaizhan.com</span><br><span class="hljs-attr">changyan:</span><br>  <span class="hljs-attr">appid:</span> <span class="hljs-string">&#x27;&#x27;</span><br>  <span class="hljs-attr">appkey:</span> <span class="hljs-string">&#x27;&#x27;</span><br><br><span class="hljs-comment"># 来必力 Livere</span><br><span class="hljs-comment"># 基于第三方的服务</span><br><span class="hljs-comment"># Based on third-party service</span><br><span class="hljs-comment"># See: https://www.livere.com</span><br><span class="hljs-attr">livere:</span><br>  <span class="hljs-attr">uid:</span> <span class="hljs-string">&#x27;&#x27;</span><br><br><span class="hljs-comment"># Remark42</span><br><span class="hljs-comment"># 需要自托管服务端</span><br><span class="hljs-comment"># Based on self-hosted service</span><br><span class="hljs-comment"># See: https://remark42.com</span><br><span class="hljs-attr">remark42:</span><br>  <span class="hljs-attr">host:</span><br>  <span class="hljs-attr">site_id:</span><br>  <span class="hljs-attr">max_shown_comments:</span> <span class="hljs-number">10</span><br>  <span class="hljs-attr">locale:</span> <span class="hljs-string">zh</span><br>  <span class="hljs-attr">components:</span> [<span class="hljs-string">&#x27;embed&#x27;</span>]<br><br><span class="hljs-comment"># Twikoo</span><br><span class="hljs-comment"># 支持腾讯云、Vercel、Railway 等多种平台部署</span><br><span class="hljs-comment"># Based on Tencent CloudBase</span><br><span class="hljs-comment"># See: https://twikoo.js.org</span><br><span class="hljs-attr">twikoo:</span><br>  <span class="hljs-attr">envId:</span><br>  <span class="hljs-attr">region:</span> <span class="hljs-string">ap-shanghai</span><br>  <span class="hljs-attr">path:</span> <span class="hljs-string">window.location.pathname</span><br><br><span class="hljs-comment"># Cusdis</span><br><span class="hljs-comment"># 基于第三方服务或自托管服务</span><br><span class="hljs-comment"># Based on third-party or self-hosted service</span><br><span class="hljs-comment"># See https://cusdis.com</span><br><span class="hljs-attr">cusdis:</span><br>  <span class="hljs-attr">host:</span><br>  <span class="hljs-attr">app_id:</span><br>  <span class="hljs-attr">lang:</span> <span class="hljs-string">zh-cn</span><br><br><span class="hljs-comment"># Giscus</span><br><span class="hljs-comment"># 基于 GitHub Discussions，类似于 Utterances</span><br><span class="hljs-comment"># Based on GitHub Discussions, similar to Utterances</span><br><span class="hljs-comment"># See: https://giscus.app/</span><br><span class="hljs-attr">giscus:</span><br>  <span class="hljs-attr">repo:</span><br>  <span class="hljs-attr">repo-id:</span><br>  <span class="hljs-attr">category:</span><br>  <span class="hljs-attr">category-id:</span><br>  <span class="hljs-attr">theme-light:</span> <span class="hljs-string">light</span><br>  <span class="hljs-attr">theme-dark:</span> <span class="hljs-string">dark</span><br>  <span class="hljs-attr">mapping:</span> <span class="hljs-string">pathname</span><br>  <span class="hljs-attr">reactions-enabled:</span> <span class="hljs-number">1</span><br>  <span class="hljs-attr">emit-metadata:</span> <span class="hljs-number">0</span><br>  <span class="hljs-attr">input-position:</span> <span class="hljs-string">top</span><br>  <span class="hljs-attr">lang:</span> <span class="hljs-string">zh-CN</span><br><br><span class="hljs-comment"># Discuss</span><br><span class="hljs-comment"># 多平台、多数据库、自托管、免费开源评论系统</span><br><span class="hljs-comment"># Self-hosted, small size, multi-platform, multi-database, free and open source commenting system</span><br><span class="hljs-comment"># See: https://discuss.js.org</span><br><span class="hljs-attr">discuss:</span><br>  <span class="hljs-attr">serverURLs:</span><br>  <span class="hljs-attr">path:</span> <span class="hljs-string">window.location.pathname</span><br><br><br><span class="hljs-comment">#---------------------------</span><br><span class="hljs-comment"># 归档页</span><br><span class="hljs-comment"># Archive Page</span><br><span class="hljs-comment">#---------------------------</span><br><span class="hljs-attr">archive:</span><br>  <span class="hljs-attr">banner_img:</span> <span class="hljs-string">/images/page-archives.webp</span><br>  <span class="hljs-attr">banner_img_height:</span> <span class="hljs-number">60</span><br>  <span class="hljs-attr">banner_mask_alpha:</span> <span class="hljs-number">0.3</span><br><br><br><span class="hljs-comment">#---------------------------</span><br><span class="hljs-comment"># 分类页</span><br><span class="hljs-comment"># Category Page</span><br><span class="hljs-comment">#---------------------------</span><br><span class="hljs-attr">category:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">banner_img:</span> <span class="hljs-string">/images/page-categories.webp</span><br>  <span class="hljs-attr">banner_img_height:</span> <span class="hljs-number">60</span><br>  <span class="hljs-attr">banner_mask_alpha:</span> <span class="hljs-number">0.3</span><br><br>  <span class="hljs-comment"># 分类的排序字段，前面带减号是倒序，不带减号是正序</span><br>  <span class="hljs-comment"># Sort field for categories, with a minus sign is reverse order</span><br>  <span class="hljs-comment"># Options: length | name</span><br>  <span class="hljs-attr">order_by:</span> <span class="hljs-string">&quot;-length&quot;</span><br><br>  <span class="hljs-comment"># 层级的折叠深度，0 是全部折叠，大于 0 后如果存在子分类则默认展开</span><br>  <span class="hljs-comment"># Collapse depth. If 0, all posts collapsed. If greater than 0, it will be expanded by default if there are subcategories</span><br>  <span class="hljs-attr">collapse_depth:</span> <span class="hljs-number">0</span><br><br>  <span class="hljs-comment"># 文章的排序字段，前面带减号是倒序，不带减号是正序</span><br>  <span class="hljs-comment"># Sort field for posts, with a minus sign is reverse order</span><br>  <span class="hljs-comment"># Options: date | title | or other field of front-matter</span><br>  <span class="hljs-attr">post_order_by:</span> <span class="hljs-string">&quot;-date&quot;</span><br><br>  <span class="hljs-comment"># 单个分类中折叠展示文章数的最大值，超过限制会显示 More，0 则不限制</span><br>  <span class="hljs-comment"># The maximum number of posts in a single category. If the limit is exceeded, it will be displayed More. If 0 no limit</span><br>  <span class="hljs-attr">post_limit:</span> <span class="hljs-number">10</span><br><br><br><span class="hljs-comment">#---------------------------</span><br><span class="hljs-comment"># 标签页</span><br><span class="hljs-comment"># Tag Page</span><br><span class="hljs-comment">#---------------------------</span><br><span class="hljs-attr">tag:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">banner_img:</span> <span class="hljs-string">/images/page-tags.webp</span><br>  <span class="hljs-attr">banner_img_height:</span> <span class="hljs-number">80</span><br>  <span class="hljs-attr">banner_mask_alpha:</span> <span class="hljs-number">0.3</span><br>  <span class="hljs-attr">tagcloud:</span><br>    <span class="hljs-attr">min_font:</span> <span class="hljs-number">15</span><br>    <span class="hljs-attr">max_font:</span> <span class="hljs-number">30</span><br>    <span class="hljs-attr">unit:</span> <span class="hljs-string">px</span><br>    <span class="hljs-attr">start_color:</span> <span class="hljs-string">&quot;#e27faa&quot;</span><br>    <span class="hljs-attr">end_color:</span> <span class="hljs-string">&quot;#efff00&quot;</span><br><br><br><span class="hljs-comment">#---------------------------</span><br><span class="hljs-comment"># 关于页</span><br><span class="hljs-comment"># About Page</span><br><span class="hljs-comment">#---------------------------</span><br><span class="hljs-attr">about:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">banner_img:</span> <span class="hljs-string">/images/page-about.webp</span><br>  <span class="hljs-attr">banner_img_height:</span> <span class="hljs-number">60</span><br>  <span class="hljs-attr">banner_mask_alpha:</span> <span class="hljs-number">0.3</span><br>  <span class="hljs-attr">avatar:</span> <span class="hljs-string">/images/logo.jpg</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">&quot;Inyxin&quot;</span><br>  <span class="hljs-attr">intro:</span> <span class="hljs-string">&quot;An elegant theme for Hexo&quot;</span><br>  <span class="hljs-comment"># 更多图标可从 https://hexo.fluid-dev.com/docs/icon/ 查找，`class` 代表图标的 css class，添加 `qrcode` 后，图标不再是链接而是悬浮二维码</span><br>  <span class="hljs-comment"># More icons can be found from https://hexo.fluid-dev.com/docs/en/icon/  `class` is the css class of the icon. If adding `qrcode`, The icon is no longer a link, but a hovering QR code</span><br>  <span class="hljs-attr">icons:</span><br>    <span class="hljs-bullet">-</span> &#123; <span class="hljs-attr">class:</span> <span class="hljs-string">&quot;iconfont icon-github-fill&quot;</span>, <span class="hljs-attr">link:</span> <span class="hljs-string">&quot;https://github.com&quot;</span>, <span class="hljs-attr">tip:</span> <span class="hljs-string">&quot;GitHub&quot;</span> &#125;<br>    <span class="hljs-bullet">-</span> &#123; <span class="hljs-attr">class:</span> <span class="hljs-string">&quot;iconfont icon-gitee-fill&quot;</span>, <span class="hljs-attr">link:</span> <span class="hljs-string">&quot;https://gitee.com/inyxin/inyxin&quot;</span>, <span class="hljs-attr">tip:</span> <span class="hljs-string">&quot;Gitee&quot;</span> &#125;<br>    <span class="hljs-bullet">-</span> &#123; <span class="hljs-attr">class:</span> <span class="hljs-string">&quot;iconfont icon-qq-fill&quot;</span>, <span class="hljs-attr">qrcode:</span> <span class="hljs-string">&quot;/images/qrcode-qq.jpg&quot;</span>&#125;<br><br><br><span class="hljs-comment">#---------------------------</span><br><span class="hljs-comment"># 自定义页</span><br><span class="hljs-comment"># Custom Page</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># 通过 hexo new page 命令创建的页面</span><br><span class="hljs-comment"># Custom Page through `hexo new page`</span><br><span class="hljs-comment">#---------------------------</span><br><span class="hljs-attr">page:</span><br>  <span class="hljs-attr">banner_img:</span> <span class="hljs-string">/images/page-tags.webp</span><br>  <span class="hljs-attr">banner_img_height:</span> <span class="hljs-number">60</span><br>  <span class="hljs-attr">banner_mask_alpha:</span> <span class="hljs-number">0.3</span><br><br><br><span class="hljs-comment">#---------------------------</span><br><span class="hljs-comment"># 404页</span><br><span class="hljs-comment"># 404 Page</span><br><span class="hljs-comment">#---------------------------</span><br><span class="hljs-attr">page404:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">banner_img:</span> <span class="hljs-string">/img/default.png</span><br>  <span class="hljs-attr">banner_img_height:</span> <span class="hljs-number">85</span><br>  <span class="hljs-attr">banner_mask_alpha:</span> <span class="hljs-number">0.3</span><br>  <span class="hljs-comment"># 重定向到首页的延迟(毫秒)</span><br>  <span class="hljs-comment"># Delay in redirecting to home page (milliseconds)</span><br>  <span class="hljs-attr">redirect_delay:</span> <span class="hljs-number">5000</span><br><br><br><span class="hljs-comment">#---------------------------</span><br><span class="hljs-comment"># 友链页</span><br><span class="hljs-comment"># Links Page</span><br><span class="hljs-comment">#---------------------------</span><br><span class="hljs-attr">links:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">banner_img:</span> <span class="hljs-string">/images/page-links.webp</span><br>  <span class="hljs-attr">banner_img_height:</span> <span class="hljs-number">60</span><br>  <span class="hljs-attr">banner_mask_alpha:</span> <span class="hljs-number">0.3</span><br>  <span class="hljs-comment"># 友链的成员项</span><br>  <span class="hljs-comment"># Member item of page</span><br>  <span class="hljs-attr">items:</span><br>    <span class="hljs-bullet">-</span> &#123;<br>      <span class="hljs-attr">title:</span> <span class="hljs-string">&quot;Fluid Blog&quot;</span>,<br>      <span class="hljs-attr">intro:</span> <span class="hljs-string">&quot;主题博客&quot;</span>,<br>      <span class="hljs-attr">link:</span> <span class="hljs-string">&quot;https://hexo.fluid-dev.com/&quot;</span>,<br>      <span class="hljs-attr">avatar:</span> <span class="hljs-string">&quot;/img/favicon.png&quot;</span><br>    &#125;<br>    <span class="hljs-bullet">-</span> &#123;<br>      <span class="hljs-attr">title:</span> <span class="hljs-string">&quot;Fluid Docs&quot;</span>,<br>      <span class="hljs-attr">intro:</span> <span class="hljs-string">&quot;主题使用指南&quot;</span>,<br>      <span class="hljs-attr">link:</span> <span class="hljs-string">&quot;https://hexo.fluid-dev.com/docs/&quot;</span>,<br>      <span class="hljs-attr">avatar:</span> <span class="hljs-string">&quot;/img/favicon.png&quot;</span><br>    &#125;<br>    <span class="hljs-bullet">-</span> &#123;<br>      <span class="hljs-attr">title:</span> <span class="hljs-string">&quot;Fluid Repo&quot;</span>,<br>      <span class="hljs-attr">intro:</span> <span class="hljs-string">&quot;主题 GitHub 仓库&quot;</span>,<br>      <span class="hljs-attr">link:</span> <span class="hljs-string">&quot;https://github.com/fluid-dev/hexo-theme-fluid&quot;</span>,<br>      <span class="hljs-attr">avatar:</span> <span class="hljs-string">&quot;/img/favicon.png&quot;</span><br>    &#125;<br><br>  <span class="hljs-comment"># 当成员头像加载失败时，替换为指定图片</span><br>  <span class="hljs-comment"># When the member avatar fails to load, replace the specified image</span><br>  <span class="hljs-attr">onerror_avatar:</span> <span class="hljs-string">/img/avatar.png</span><br><br>  <span class="hljs-comment"># 友链下方自定义区域，支持 HTML，可插入例如申请友链的文字</span><br>  <span class="hljs-comment"># Custom content at the bottom of the links</span><br>  <span class="hljs-attr">custom:</span><br>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">false</span><br>    <span class="hljs-attr">content:</span> <span class="hljs-string">&#x27;&lt;hr&gt;&lt;p&gt;在下方留言申请加入我的友链，按如下格式提供信息：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;博客名：Fluid&lt;/li&gt;&lt;li&gt;简介：Fluid 主题官方博客&lt;/li&gt;&lt;li&gt;链接：https://hexo.fluid-dev.com&lt;/li&gt;&lt;li&gt;图片：https://hexo.fluid-dev.com/img/favicon.png&lt;/li&gt;&lt;/ul&gt;&#x27;</span><br><br>  <span class="hljs-comment"># 评论插件</span><br>  <span class="hljs-comment"># Comment plugin</span><br>  <span class="hljs-attr">comments:</span><br>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">false</span><br>    <span class="hljs-comment"># 指定的插件，需要同时设置对应插件的必要参数</span><br>    <span class="hljs-comment"># The specified plugin needs to set the necessary parameters at the same time</span><br>    <span class="hljs-comment"># Options: utterances | disqus | gitalk | valine | waline | changyan | livere | remark42 | twikoo | cusdis | giscus | discuss</span><br>    <span class="hljs-attr">type:</span> <span class="hljs-string">disqus</span><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>工具</category>
      
      <category>Markdown</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
      <tag>Markdown</tag>
      
      <tag>Theme</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>花生壳</title>
    <link href="/post/d2322c4d3105/"/>
    <url>/post/d2322c4d3105/</url>
    
    <content type="html"><![CDATA[<p><code>千里之行，始于足下。</code></p><p><a href="https://hsk.oray.com/download">花生壳客户端官方下载 - 贝锐花生壳官网 (oray.com)</a></p><p>优点: 固定IP</p><p>缺点: 限流1M , 只有2条隧道</p><h1 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h1><p><img src="image-20240706164818305.png" alt="image-20240706164818305"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">wget <span class="hljs-string">&quot;https://dl.oray.com/hsk/linux/phddns_5.3.0_amd64.deb&quot;</span> -O phddns_5.3.0_amd64.deb<br></code></pre></td></tr></table></figure><p><a href="https://service.oray.com/question/11630.html">Linux版使用教程-贝锐官网 (oray.com)</a></p><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs bash">root@beelink:~<span class="hljs-comment"># apt install ./phddns_5.3.0_amd64.deb</span><br>正在读取软件包列表... 完成<br>正在分析软件包的依赖关系树... 完成<br>正在读取状态信息... 完成<br>注意，选中 <span class="hljs-string">&#x27;phddns&#x27;</span> 而非 <span class="hljs-string">&#x27;./phddns_5.3.0_amd64.deb&#x27;</span><br>下列【新】软件包将被安装：<br>  phddns<br>升级了 0 个软件包，新安装了 1 个软件包，要卸载 0 个软件包，有 48 个软件包未 被升级。<br>需要下载 0 B/270 kB 的归档。<br>解压缩后会消耗 12.5 MB 的额外空间。<br>获取:1 /root/phddns_5.3.0_amd64.deb phddns amd64 5.3.0 [270 kB]<br>正在选中未选择的软件包 phddns。<br>(正在读取数据库 ... 系统当前共安装有 224640 个文件和目录。)<br>准备解压 /root/phddns_5.3.0_amd64.deb  ...<br>正在解压 phddns (5.3.0) ...<br>正在设置 phddns (5.3.0) ...<br><span class="hljs-keyword">in</span> systemv<br>Installation, please later...<br>Successful installation of Phddns Service.<br><br> +--------------------------------------------------+<br> |             Oray PeanutHull Linux 5.3.0          |<br> +--------------------------------------------------+<br> |  SN: orayf7285ff174f3   Default password: admin  |<br> +--------------------------------------------------+<br> |    Remote Management Address http://b.oray.com   |<br> +--------------------------------------------------+<br>N: 由于文件<span class="hljs-string">&#x27;/root/phddns_5.3.0_amd64.deb&#x27;</span>无法被用户<span class="hljs-string">&#x27;_apt&#x27;</span>访问，已脱离沙盒并 提权为根用户来进行下载。 - pkgAcquire::Run (13: 权限不够)<br>root@beelink:~<span class="hljs-comment">#</span><br></code></pre></td></tr></table></figure><h3 id="卸载"><a href="#卸载" class="headerlink" title="卸载"></a>卸载</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs bash">root@beelink:~<span class="hljs-comment"># apt remove phddns</span><br>正在读取软件包列表... 完成<br>正在分析软件包的依赖关系树... 完成<br>正在读取状态信息... 完成<br>下列软件包将被【卸载】：<br>  phddns<br>升级了 0 个软件包，新安装了 0 个软件包，要卸载 1 个软件包，有 48 个软件包未 被升级。<br>解压缩后将会空出 12.5 MB 的空间。<br>您希望继续执行吗？ [Y/n] y<br>(正在读取数据库 ... 系统当前共安装有 224651 个文件和目录。)<br>正在卸载 phddns (5.3.0) ...<br>phdaemon: 未找到进程<br>phtunnel: 未找到进程<br>phddns_mini_httpd: 未找到进程<br>Remove Phtunnel Service Success.<br>Thanks For Using Phtunnel Service.<br>root@beelink:~<span class="hljs-comment">#</span><br></code></pre></td></tr></table></figure><h1 id="扩展功能"><a href="#扩展功能" class="headerlink" title="扩展功能"></a>扩展功能</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">root@beelink:~<span class="hljs-comment"># phddns</span><br>Phtunnel Serive called with  unknown argument<br>(phddns  |start|status|stop|restart|reset|<span class="hljs-built_in">enable</span>|<span class="hljs-built_in">disable</span>|version)<br></code></pre></td></tr></table></figure><ul><li>start 启动</li><li>stop 停止</li><li>status 状态</li><li>restart 重启</li><li>reset 重置</li><li>enable 开机自启</li><li>disable 取消开机自启</li><li>version 查看版本号</li></ul><p><strong>注意: 除phddns version命令不需要管理员权限外,其他命令均需要管理员权限</strong></p><p><img src="image-20240706165746108.png" alt="image-20240706165746108"></p><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><p>1、浏览器访问<a href="http://b.oray.com/">http://b.oray.com</a> ，输入花生壳Linux 5.0在安装时产生<strong>SN码与默认登录密码admin</strong>登录。</p><p><img src="image-20240706165910674.png" alt="image-20240706165910674"></p><p><img src="image-20240706165936080.png" alt="image-20240706165936080"></p><p><img src="image-20240706170003456.png" alt="image-20240706170003456"></p><p>激活成功后就可以正常使用了</p><h1 id="添加映射"><a href="#添加映射" class="headerlink" title="添加映射"></a>添加映射</h1><table><thead><tr><th>选项</th><th>描述</th></tr></thead><tbody><tr><td>应用名称</td><td>自定义</td></tr><tr><td>应用图标</td><td>自行选择</td></tr><tr><td>映射类型</td><td>选择TCP</td></tr><tr><td>映射模板</td><td>暂不选择模板</td></tr><tr><td>外网<a href="https://domain.oray.com/">域名</a></td><td>选择用作外网访问的域名</td></tr><tr><td>外网端口</td><td>选择动态端口</td></tr><tr><td>内网主机</td><td>映射的Ubuntu系统内网IP地址</td></tr><tr><td>内网端口</td><td>映射的服务类型对应端口22</td></tr><tr><td>访问控制</td><td>设置在指定条件下才可访问映射 , 提升应用安全。针对网页类映射可支持设置访问密码</td></tr><tr><td>带宽</td><td>购买映射带宽后，可支持给映射分配额外带宽，这里保存默认</td></tr><tr><td>夜间带宽</td><td>18:00-次日8:00带宽速度提升100%，速度不低于5Mbps；带宽基数越大，夜间越快</td></tr></tbody></table><p><a href="https://console.hsk.oray.com/forward">贝锐花生壳管理 - 内网穿透 (oray.com)</a></p><p><img src="image-20240706170558042.png" alt="image-20240706170558042"></p><p><strong>内网主机</strong> : 127.0.0.1也行</p><p>访问部署在linux 80 端口上的nginx </p><p><img src="image-20240706172025539.png" alt="image-20240706172025539"></p><p>穿透成功</p>]]></content>
    
    
    <categories>
      
      <category>工具</category>
      
      <category>内网穿透</category>
      
    </categories>
    
    
    <tags>
      
      <tag>内网穿透</tag>
      
      <tag>花生壳</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Cpolar-使用教程</title>
    <link href="/post/cb717c9eae02/"/>
    <url>/post/cb717c9eae02/</url>
    
    <content type="html"><![CDATA[<p><code>千里之行，始于足下。</code></p><p><a href="https://dashboard.cpolar.com/">cpolar - secure introspectable tunnels to localhost</a></p><p><strong>优点</strong>: 不限流量 , 4 条隧道</p><p><strong>缺点</strong>: CPU 占用高 , 随机 IP</p><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">curl</span> <span class="hljs-literal">-L</span> https://www.cpolar.com/<span class="hljs-keyword">static</span>/downloads/<span class="hljs-built_in">install-release</span><span class="hljs-literal">-cpolar</span>.sh | sudo bash<br><br></code></pre></td></tr></table></figure><p><img src="image-20240706160413788.png" alt="image-20240706160413788"></p><h3 id="查看版本"><a href="#查看版本" class="headerlink" title="查看版本"></a>查看版本</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">inyxin<span class="hljs-meta">@beelink</span>:~$ cpolar version<br>cpolar version <span class="hljs-number">3.3</span><span class="hljs-number">.12</span><br></code></pre></td></tr></table></figure><h3 id="token-认证"><a href="#token-认证" class="headerlink" title="token 认证"></a>token 认证</h3><p>登录 <a href="https://dashboard.cpolar.com/get-started">cpolar 官网后台</a>，点击左侧的验证，查看自己的认证 token，之后将 token 贴在命令行里</p><p><img src="image-20240706160658210.png" alt="image-20240706160658210"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">inyxin@beelink:~$ cpolar authtoken YWVmMDQ0NGEtMTEyZC00Yjg2LTk4ZjktZDRlOThi<br>Authtoken saved to configuration file: /usr/local/etc/cpolar/cpolar.yml<br></code></pre></td></tr></table></figure><h3 id="简单穿透测试一下"><a href="#简单穿透测试一下" class="headerlink" title="简单穿透测试一下"></a>简单穿透测试一下</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java">cpolar <span class="hljs-number">9998</span><br>    cpolar by <span class="hljs-meta">@bestexpresser</span>                                    (Ctrl+C to quit)                                                                            Tunnel Status       online<br>Account             <span class="hljs-title function_">inyxin</span> <span class="hljs-params">(Plan: Free)</span><br>Version             <span class="hljs-number">3.12</span>/<span class="hljs-number">3.22</span><br>Web Interface       <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">4040</span><br>Forwarding          http:<span class="hljs-comment">//31526c8c.r25.cpolar.top -&gt; http://localhost: 9998 Forwarding          https://31526c8c.r25.cpolar.top -&gt; http://localhost: 9998# Conn              0</span><br>Avg Conn Time       <span class="hljs-number">0.</span>00ms                                 <br>    <br>    <br></code></pre></td></tr></table></figure><p>穿透成功 , 只是 IP 不固定</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">https:<span class="hljs-comment">//31526c8c.r25.cpolar.top/#/</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>工具</category>
      
      <category>内网穿透</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Cpolar</tag>
      
      <tag>内网穿透</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo中Typero图片插入问题</title>
    <link href="/post/8fc22e81-ab43-4043-aef1-e9092fc59e87/"/>
    <url>/post/8fc22e81-ab43-4043-aef1-e9092fc59e87/</url>
    
    <content type="html"><![CDATA[<p><strong><a href="https://hexo.io/zh-cn/">Hexo 官网</a></strong></p><p><strong>Question :</strong> </p><p>​hexo 处理 本地编写的带有图片的markdown时, 无法正确加载图片的路径</p><p><strong>Solution :</strong></p><ol><li><p>安装插件 <code>hexo-typora-img</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install hexo-typora-img --save<br></code></pre></td></tr></table></figure><p><img src="image-20240706153100037.png" alt="image-20240706153100037"></p></li><li><p>修改_config.yml</p><p><img src="image-20240706153226789.png" alt="image-20240706153226789"></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">post_asset_folder:</span> <span class="hljs-literal">true</span> <span class="hljs-comment">#启用 资源文件夹</span><br><span class="hljs-attr">relative_link:</span> <span class="hljs-literal">true</span> <span class="hljs-comment">#把链接改为与根目录的相对位址</span><br></code></pre></td></tr></table></figure></li><li><p>修改typora图片配置</p></li></ol><p><img src="image-20240706145214903.png" alt="image-20240706145214903"></p><p>这种做法 将当前目录下 与 <strong>abc.md</strong> 同名的文件夹作为 <strong>abc</strong> 的资源目录</p>]]></content>
    
    
    <categories>
      
      <category>工具</category>
      
      <category>Markdown</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
      <tag>Markdown</tag>
      
      <tag>Typora</tag>
      
      <tag>Bug</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Typero v1.8.10 破解</title>
    <link href="/post/0d82c848-4ee7-4650-b0ee-ac9f4aef2ed9/"/>
    <url>/post/0d82c848-4ee7-4650-b0ee-ac9f4aef2ed9/</url>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h2 id="Download"><a href="#Download" class="headerlink" title="Download"></a>Download</h2><p><a href="https://pan.baidu.com/share/init?surl=AXfxqM9KBSp7fvbpkeQ8KA&pwd=9sla"> 👉百度网盘下载 </a></p><h2 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h2><p><strong>解压密码</strong></p><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lasso">www.ittel.<span class="hljs-literal">cn</span><br></code></pre></td></tr></table></figure><p><img src="image-20240706144336808.png" alt="image-20240706144336808"></p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p><img src="image-20240706144510255.png" alt="image-20240706144510255"></p><h2 id="激活"><a href="#激活" class="headerlink" title="激活"></a>激活</h2><h3 id="方式1-亲测可行"><a href="#方式1-亲测可行" class="headerlink" title="方式1 (亲测可行)"></a>方式1 (亲测可行)</h3><p>将 <code>ittel/winmm.dll</code> 复制到Typora安装目录下</p><p><img src="image-20240706150128143.png" alt="image-20240706150128143"></p><p> <img src="image-20240706145801712.png" alt="image-20240706145801712"></p><p>最后重启 查看许可证</p><p><img src="image-20240706150207507.png" alt="image-20240706150207507"></p><h3 id="方式2-我不行"><a href="#方式2-我不行" class="headerlink" title="方式2  (我不行)"></a>方式2  (我不行)</h3><p>How to use?</p><ol><li><p>运行 typora-setup-x64-1.7.0-dev-cracked.exe 安装Typora</p></li><li><p>运行 LicenseGen.exe 获得激活码</p><p><img src="image-20240706144737512.png" alt="image-20240706144737512"></p></li><li><p>输入你的邮箱和得到的激活码</p><p><img src="image-20240706144851917.png" alt="image-20240706144851917"></p></li><li><p>完美激活！</p></li></ol><p>这里也提供几个可以用的激活码</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">VMLM7G</span>-<span class="hljs-number">2</span>A45QN-DBM3UZ-GSC7U3<br><span class="hljs-attribute">NXYAC8</span>-NQLVG3-<span class="hljs-number">4</span>ZMB4Z-W4APQA<br><span class="hljs-attribute">7UMJ6D</span>-BWHGKL-KD7ZN9-DNFA3E<br><span class="hljs-attribute">6TFNEN</span>-EFC3MK-QC5VC7-XHWY6A<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>工具</category>
      
      <category>Markdown</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Typora</tag>
      
      <tag>破解</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo Quick Start</title>
    <link href="/post/a6c23c07bd1b/"/>
    <url>/post/a6c23c07bd1b/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    <categories>
      
      <category>工具</category>
      
      <category>Markdown</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
      <tag>Markdown</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>计算机图形学期末复习题</title>
    <link href="/post/9ae56c810397/"/>
    <url>/post/9ae56c810397/</url>
    
    <content type="html"><![CDATA[<p><strong>单项选择题：</strong></p><p>1．计算机的最小存储单位是   A    。</p><p>  A． 位  B． 字节   C． 字  D． 双字 </p><p>2．关于计算机图形学研究内容，不正确的说法是    D 。</p><p>  A． 几何模型构造及图形生成技术       B． 图形的操作与处理方法  </p><p>C． 图形信息的存储、检索与交换技术   D． 人机交互及用户串联技术</p><ol start="3"><li>C&#x2F;C++ Windows 应用程序的入口函数名称是    B   。</li></ol><p>A． main    B． WinMain    C． mian     D． winMain</p><ol start="4"><li>本学期的计算机图形学课程选用的编程语言是   A   。</li></ol><p>A． C&#x2F;C++      B． Java     C． C#      D． Python</p><ol start="5"><li>以下属于本课程选用的编程语言的特点是   B    。</li></ol><p>A． 不支持多继承    B．执行效率高    </p><p>C． 需要解释执行    D． 不适合编写系统软件</p><ol start="6"><li>在Win32 Application平台上绘制图形的类型是   A   。</li></ol><p>A． HDC      B．DCC      C．PDC       D．CDD</p><ol start="7"><li>本学期本课程介绍的绘制直线段的算法共有    D  种。</li></ol><p>A． 1      B． 2      C． 3       D． 4</p><p>8．平面直角坐标系的第一象限有两点A（x0,y0）、B（x1,y1），其中x0、y0、x1、y1均是正整数，则用逐点比较法绘制直线段AB共需执行   A  次画点命令。</p><p>A. | x1-x0| + | y1-y0| + 1    B. | x1-x0| + | y1-y0| </p><p>C. | x1-x0| + | y1-y0| - 1     D. 无法确定</p><p>9．若用逐点比较法在平面直角坐标系的第一象限内绘制直线段，则需要该线段的斜率K的绝对值   A   。</p><p>A. ≥0  B. ≥1  C. 没有要求  D. 无法确定</p><p>10．在平面直角坐标系的第一象限内绘制直线段，下列  D   算法对线段的斜率K没有限制。</p><p>A. 逐点比较  B. DDA  C. 中点 D. Bresenham</p><p>11．不属于Bresenham算法绘制直线段效率高的原因是    D   。</p><p>A. 斜率K不大于1  B. 减少了绘制次数  C. 避免了浮点数运用算 D. 不可进行移位运算</p><p>12．采用Bresenham算法绘制从点A（10,10）到点B（20,15）的直线段，共需执行 A     次画点命令。</p><p>A. 11  B. 15  C. 10  D. 12</p><p>13．计算机图形学中表达一条曲线的方程一般有    C   种形式。</p><p>A. 一  B. 二  C. 三 D. 无穷</p><p>14．解算三次样条插值函数需要额外补充    B   个条件。</p><p>   A. 1  B. 2  C. 3 D. 0</p><p>15．下列不属于曲线插值方法的是  D     。</p><p>A.多项式插值 B.分段多项式插值 C.样条函数插值 D.最小二乘插值</p><p>16．最小二乘法曲线拟合的原理是：使型值点的坐标值与曲线上对应点的坐标值的偏差的平方和达到     B  。</p><p>A.最大  B.最小  C.给定的取值范围 D.以上说法均不正确</p><p>17．区域内部点的判断方法可以是：射线法、检验夹角之和</p><p>18．    B   不属于简单种子填充算法的特点。</p><p>A.操作过程简单  B.需进行深度递归  C.算法的效率低 D.仅需少量的内存空间</p><p>19．二维图形的几何变换共有   B   种基本变换形式。</p><p>A． 2     B． 3     C． 5      D． 4</p><p>20．对于任意一条直线段，它相对于一个已定义的窗口位置关系最多有   D   种情况。</p><p>A． 2     B． 3     C． 5      D． 4</p><p>21．编码裁剪法中，每个区域用一个    D  位代码来表示。</p><p>A． 2     B． 3     C． 5      D． 4</p><p>22．编码裁剪法中，每个点的编码从高到低位依次分别代表   A   。</p><p>A．上下右左     B．右左上下    C．上下左右     D．下上左右</p><p>23．编码裁剪法中，每位的编码只有    A  状态。</p><p>A． 1    B． 3     C． 2      D． 4</p><p>24．编码裁剪法中，若线段两端点编码均为零，则两点    A  。</p><p>A．在窗口外    B．在窗口内    C． 不可见      D． 不能确定</p><p>25．要判断两端点所构成的线段与窗口对应关系，可用两个端点编码进行  C   运算。</p><p>A．逻辑“非”    B．逻辑“或”    C．逻辑“与”      D．逻辑“异或”</p><p>26．若线段两端点的编码的逻辑   C  不为0，则这两个端点必然位于某条边界的同侧，故必在窗口外，应不可见。</p><p>A．非    B． 或    C． 与       D． 异或</p><p>27．多边形的逐边裁剪算法中需要设置   C   个顶点表。</p><p>A． 1    B． 3     C． 2      D． 4</p><p>28．计算机图形学中，一般有   B   种表示三维图形的方法。</p><p>A． 1    B． 3     C． 2      D． 4 (线框模型、表面模型、实体模型)</p><p>29．在三维空间里，给定(n＋l)×(m+1)个空间点,可生成   D   次Bezier曲面。</p><p>A． (n＋l)×(m+1)    B． n ×(m+1)     C．(n＋l)×m      D． n×m</p><p>30．在三维空间中，,生成双三次Bezier曲面，需要    B  个控制顶点。</p><p>A． 9    B． 16     C．25      D． 20</p><p>31．以下不属于正轴测投影的是   D   。</p><p>A． 正等测    B． 正二测    C．正三测      D．正四测</p><ol start="32"><li>透视投影是透视变换与   A   的组合。</li></ol><p>A．平行投影变换    B． 正二测    C．正三测      D．正四测</p><ol start="33"><li>影响真实感图形因素有   D   。</li></ol><p>A．物体本身形状及物体表面特征  B．照射物体光源及物体与光源相对位置</p><p>C. 物体周围环境        D. 以上都是</p><ol start="34"><li>光照在物体表面上通常有   C    种情况。</li></ol><p>A． 1      B． 2      C． 3       D． 4</p><ol start="35"><li>Lambert光照模型主要考虑漫反射光和   A   的影响。</li></ol><p>A. 环境光      B． 镜面光     C． 透射光       D． 高光</p><ol start="36"><li>Phong光照模型有  C    种类型的光的影响。</li></ol><p>A． 1      B． 2      C． 3       D． 4</p><p>37．下列有关投影的叙述语句中,正确的论述为    D  。</p><p>A. 透视投影与平行投影相比，能真实地反映物体的精确的尺寸和形状</p><p>B. 平行投影的投影中心到投影面的距离是无限的</p><p>C. 透视投影变换中，一组平行于投影面的线的投影产生一个灭点</p><p>D. 灭点可以看作是有限远处的一个点在投影面上的投影</p><p>38．以下    D  不是贝塞尔曲线的特点。</p><p> A.贝塞尔曲线只要给出数据点就可构造曲线</p><p> B.贝塞尔曲线次数严格依赖于确定该段曲线的数据点个数</p><p> C.贝塞尔曲线不完全通过数据点</p><p>D.贝塞尔曲线处处可以调整</p><p>39．三维图形是相对于    A   作旋转变换。</p><p>A. 点   B. 直线    C. 平面   D. 曲线</p><p>40．三维空间XYZ中的图形绕x轴的逆时针旋转可看成是图形在  B   绕原点O的二维旋转变换。 </p><p>A．XOY平面  B．YOZ 平面  C．ZOX 平面  D．都不是</p><p>41．已知平面裁剪矩形域的左下角点(50,60)及右上角点(200，200)，利用编码裁剪算法对某线段的端点(56,115)进行编码，其编码是   D  。</p><p>A．1100  B．0000   C．0101  D．1001</p><p>42．在进行扫描线多边形区域填充时，若位于扫描线异侧的两相邻边与扫描线相交于同一点，则该点应视为    C  个交点。</p><p>  A．舍弃  B．1  C．2  D．3</p><p>43．下面哪一项是Bezier曲线的特性    A   。</p><p>A．局部可调性     B．凹凸性    C．对称性    D．中点性</p><p>44．在透视投影中，主灭点的个数最多是   C    。</p><p>A． 1      B． 2     C． 3      D． 0 </p><p>45．下列有关简单光反射模型的描述语句中，正确的是   C  。 </p><p>A．简单光反射模型，又称为Phong模型，它模拟物体表面对光的透射作用</p><p>B．在简单光反射模型中，假定光源是点光源，且仅关注物体表面对光的镜面反射作用 </p><p>C．简单光反射模型主要考虑物体表面对直射光照的漫反射作用</p><p>D．在简单光反射模型中，对物体间的光反射作用，只用一个环境光变量做近似处理</p><p>46．正等轴测图的三个投影轴间的夹角是   D   度。</p><p>A．30     B．60      C．90     D．120</p><p>47．一般情况下，三次B样条曲线需要   B  个控制顶点。 </p><p>A． 5       B． 4      C． 6       D． 3</p><ol start="48"><li>下列设备中，   B    是图形输出设备。</li></ol><p>A． 数字化仪      B． 绘图仪      C．扫描仪       D．键盘</p><ol start="49"><li>直线DDA算法中，当斜率|m|&gt;1时，x方向的增量△x和y方向的增量△y分别</li></ol><p>是   C  。</p><p>A. ±m和±1   B. ±1和±1&#x2F;m   C. ±1和±m   D. ±1&#x2F;m和±1</p><ol start="50"><li>计算机图形学中，CAD是指计算机  B   。</li></ol><p>A. 辅助制造   B. 辅助设计   C. 辅助教学   D. 辅助探测</p><p>51．计算机的基本存储单位是   D   。</p><p>  A． 位  B． 双字   C． 字  D．字节</p><p>52．关于计算机图形学的特点，不正确的说法是    C   。</p><p>A． 计算机产生的图形有规律、光滑 </p><p>B． 计算机产生的图形纯净美观、无噪声干扰</p><p>C．通过计算机产生的图形不能描绘纯粹是想像的主观世界中的各种对象。 </p><p>D．交互式产生的图形可修改性强，且速度快、差错少。</p><ol start="53"><li>关于C&#x2F;C++中的类的说法不正确的是  A     。</li></ol><p>A． 定义类的关键字是struct       B． 类的成员通常具有访问属性</p><p>C． 定义类的对象需要构造函数      D． 类具有封装特性</p><ol start="54"><li>最小二乘法是实际测量值和真实值之差（误差）的平方和达到     B 。</li></ol><p>A． 最大     B． 最小     C． 零       D． 无穷大</p><ol start="55"><li>以下属于本课程选用的编程语言的特点是    A   。</li></ol><p>A． 支持多继承      B． 执行效率低      </p><p>C． 需要解释执行    D． 不适合编写系统软件</p><ol start="56"><li>本学期在MFC平台上绘制图形时通常在   C   类进行实现。</li></ol><p>A． 应用程序类      B．对话框类      C．视图类       D．文档类</p><ol start="57"><li>对于同一条线段而言，Bresenham方法较DDA绘制法的效率   A   。</li></ol><p>A．高     B． 低     C． 相同      D． 没有可比性  </p><p>58．下列有关几何变换的叙述语句中，正确的论述是  C    。</p><p>A．几何变换就是把一个图形从一个位置移到别的位置</p><p>B．几何变换后图形连线次序发生改变</p><p>C．一个正方体经几何变换后可能会变成长方体</p><p>D．几何变换过程中不能让图形产生变形</p><p>59．三维空间XYZ中的图形绕Y轴的正向旋转可以被看作是在 A   绕原点O的二维旋转变换。 </p><p>A．XOY平面  B．YOZ 平面  C．ZOX 平面  D．都不是</p><p>60． 用编码裁剪算法裁剪二维线段时，若直线段两端点M、N的编码分别为1001和1011，则对该线段采用的处理方法是   C    。</p><p>A． 直接保留   B． 直接放弃  C． 对MN在求交分割  D．不能判断</p><p>61．在进行扫描线多边形区域填充时，若位于扫描线同侧的两相邻边与扫描线相交于同一点，则该点应视为   A 个交点。</p><p>  A． 1   B． 2   C． 3   D． 舍弃</p><p>62．下面哪一项不是Bezier曲线的特性   A    。</p><p>A．对称性    B．凸包性    C．局部性可调    D．几何不变性</p><p>63．在透视投影中，投影面仅与两个坐标轴相交,此透视被称为   B   点透视。</p><p>A．1   B．2    C．3   D．4 </p><p>64．下列不属于三视图范围的是      C  。</p><p>A．俯视图       B．主视图      C．正轴测图    D．侧视图</p><p>65．二次B样条曲线具有     B  导数的连续性。 </p><p>A．0阶      B．一阶      C．二阶       D．三阶</p><p>66．MFC应用程序的入口函数名是   C    。 </p><p>A．main      B．mian      C．WinMain       D．winmain</p><p>67．下列有关B样条曲线性质的说明语句中，正确的论述为   B   。</p><p>A． 一条直线与n个顶点控制的B样条曲线可有n个或更多个交点</p><p>B． B样条曲线可构造直线段和切线等特殊情况</p><p>C． 当移动B样条曲线一个顶点时，必定会对整条B样条曲线产生影响</p><p>D． B样条曲线的形状与坐标系的选择无关</p><p>68．下列关于数据的逻辑结构的叙述中，正确的是   A   。</p><p>A．数据的逻辑结构是数据间关系的描述</p><p>B．数据的逻辑结构反映了数据在计算机中的存储方式</p><p>C．数据的逻辑结构分为顺序结构和链式结构</p><p>D．数据的逻辑结构分为静态结构和动态结构</p><p>69．下列有关简单光反射模型的描述中，错误的论述为   D   。</p><p>A．漫反射光是由于表面粗糙不平引起的</p><p>B．环境光是光在物体和环境之间多次反射后最终达到平衡时的一种光</p><p>C．镜面反射光产生的高光区域只反映光源的颜色</p><p>D．该模型中必须考虑透射光</p><p>70．解算平面上5个点所确定的4段自然三次样条函数共需要   C   个附加条件。</p><p>A．1       B．2       C．3       D．4</p><p><strong>判断题：</strong></p><p>( F ) 1. 计算机生成图形时，只能用矢量法而没有其它别的方法。</p><p>( T ) 2. 简单种子填充算法中，选择的种子点必须位于待填充的区域内。 </p><p>( T ) 3. 图形学中可以用线段来近似逼近平面上的曲线。</p><p>( F  ) 4. 两空间向量v1(2，3，4)与v2(4，6，8)可唯一地确定一个平面。</p><p>(  F ) 5.由RGB颜色模型所定义的量所需存储空间是15位。</p><p>( F ) 6. 活动边表AET是多边形所有边记录链表。 </p><p>( T ) 7. 用齐次坐标表示法可以非常方便地处理平移变换。</p><p>(  T  ) 8. 一般情况下，透视投影的投影中心到投影面之间的距离是有限的。   </p><p>（ T  ）9. 由于物体表面凹凸不平而向四周均匀反射的光叫漫射光。 </p><p>（  T ）10.可以通过适当的变换将三点透视转换为一点透视。 </p><p>（  T ）11.计算机生成的直线在显示时往往呈现锯齿状，这种现象叫走样。   </p><p>（ F  ）12.在构建B样条曲线时，绝不允许出现重结点，否则将出错。</p><p>（  T  ）13.平面点P的齐次坐标为(16,6,2)，其对应的实际坐标为（8,3）。</p><p>（ T ）14.移动一个控制点时，可以调整B样条曲线的局部形状。</p><p>（ T ）15.平面上两个点是否位于某直线的同侧可用向量的叉乘进行判断。</p><p>（  F ）16.绘图仪绘制线段是笔在X,Y方向移动，画线时单方向的一次移动距离称为步矩，设备的步矩越小，绘出的图形越精确。</p><p>（  F ）17.自由曲线是一条无法用标准代数方程来描述的曲线。</p><p>曲线插值方法可使用使用高次多项式，因为次数越高，曲线越精确。</p><p>（ T ）18.三次样条曲线要求通过所有指定的数据点，但曲线的形状依赖于边界条件.</p><p>（  T ）19.曲线的形状由特征多边形的顶点Pi（i＝0，l，……，n）唯一确定，与坐标系的选取无关。这就是几何不变性，Bezier曲线的几何作图法就是一个很好的例证。</p><p>（ T ）20.区域填充就是将区域内的像素置成新的颜色值或图案。</p><p>（ T ）21.平面上的区域通常由一个封闭的轮廓来定义，处于一个封闭轮廓线内的所有像素点即构成一个区域。</p><p>（ T ）22.多边形区域填充就是将区域内的像素置成新的颜色值或图案。</p><p>（  T ）23.任何一个封闭曲线都可以用多边形来逼近。</p><p>（  T ）24.对于一个给定的多边形区域而言，显示平面上每个像素点内外特性是互相关联的，即相邻像素间具有相关属性。</p><p>（  T ）25.活动边表AET是一个只与当前扫描线相交的边记录链表。随着扫描线从一条到另一条的转换，AET表的内容也应随之变动。</p><p>（  T ）26.几何变换的规则可以用函数来表示。</p><p>（  T ）27.一般而言，复杂的图形变换都可以基本交换的适当组合来实现。</p><p>（  T ）28.对图形作几何变换，其实质是对点的几何变换。</p><p>（ T ）29.齐次坐标的应用，扩大了变换矩阵功能，只要对矩阵中有关元素赋以不同的 值，即可达到预期变换目的。</p><p>（  T ）30.组合变换顺序不能颠倒，顺序不同，则变换结果不同。</p><p>（  T ）31.裁剪就是将指定窗口作为图形边界，从一幅大的画面中抽取所需的具体信息，以显示某一局部画面或视图。</p><p>（ T ）32.裁剪实质上是从数据集合中抽取信息的过程。</p><p>（  T ）33.视图区（视图Viewport），是在屏幕上定义的一个小于或等于屏幕区域一个矩形块。</p><p>（  T ）34.窗口—视图变换是比例变换和平移变换的组合变换。</p><p>（ F ）35.中点分割裁剪法也叫最远（或近）的可见点算法。</p><p>（  T ）36.线段裁剪确良的多边形裁剪的基础。</p><p>（ T ）37.裁剪多边形要解决两个问题。其一是一个完整的封闭多边形经裁剪后一般不再是封闭的，需要用窗口边界适当部分来封闭它。其二是矩形窗口的四个角点在裁剪中是否要与其它交点连线。</p><p>（ T ）38.计算机图形学中，可以用曲线网格来近似地表示自由曲面。</p><p>（ T ）39.在产生一张自由曲面时，可以利用一系列的纵横交错且相互平行的样条曲线来构造。</p><p>（ T ）40.在空间解析几何中，三维空间内一张任意曲面片用两个参数曲面矢量方程或参数方程表示。</p><p>（  T ）41.在三维空间里，给定(n＋l)×(m+1)个空间点,可生成n×m次参数曲面。</p><p>（ F ）42.双二次Bezier曲面由四条抛物线段包围而，中间的一个顶点的变化对边界曲线不产生影响，这意味着在周边八点不变的情况下，适当选择中心顶点的位置可以控制曲面凹凸，这种控制方式是极其直观的，而且极其简易。</p><p>（ T ）43.双三次Bezier曲面中间的四个顶点的变化对边界曲线不产生影响，但影响曲面片的形状。</p><p>（  T ）44.NURBS曲面拥有非常良好的性质，目前已经成为曲面造型中最为广泛应用的技术。</p><p>（  T ）45.三维图形几何变换后仍然是三维图形。</p><p>（  T ）46. 三维图形旋转变换前后立体的大小和形状不发生变化，只是空间位置相对原位置发生了变化。</p><p>（ T ）47.通常图形输出设备（显示器、绘图仪等）都是二维的，用这些二维设备来输出三维图形，就得把三维坐标系下图形上各点的坐标转化为某一平面坐标系下的二维坐标。</p><p>（  T ）48.把三维物体用二维图形表示的过程称为三维投影变换。</p><p>（  T ）49.斜轴测投影是先将立体沿两个方向产生错切，再向投影面作正投影而得到。</p><p>（ T ）50.透视图是一种将三维物体用二维平面来表达的立体图。</p><p>（ T ）51. 将立体上各点与视点相连所得到的投影线分别与投影面相交，其交点就是立体上相应点的透视投影，再将其依次相连，即获得具有真实立体感的透视图。</p><p>（ F ）52.透视变换是将空间中的物体透视成空间中的另一物体，然后再把这一物体形投影到一个平面上，从而得到透视投影图。</p><p>（  F ）53.透视投影是透视变换与平行投影变换的组合。</p><p>（ T ）54.当视点位于Y轴上时,Y轴上的无限远点［0 1 0 0］进行透视变换后成为有限远点［0 l／q 0 1］。由此可以证明，原来平行于X轴和Z轴直线变换后仍平行于对应坐标轴，但原与Y轴平行直线，透视变换后不再与Y轴平行，而是汇交于Y轴上一点（0，1／q，0） ，该点称为透视的灭点。</p><p>（ T ）55.三点透视: 投影面α与X、Y、Z轴均有交点。三点透视可转换为一点透视进行计算。</p><p>（  T ）56.透视投影符合人类的生理机制，即离视点近的物体大，离视点远的物体小，远到极点即为消失，成为灭点。</p><p>（ T ）57.一个物体离观察点越远，那么它越有可能被其他物体所遮挡。</p><p>（ T ）58.物体空间算法有比较高的精度，生成的图形即使放大一定倍数后仍有令人满意的观感，因此在比较精密的对象显示方面有较多的应用。</p><p>（ T ）59.图像空间的算法在精度上不及前者，它最多到屏幕分辨率时就无法再提高精度，但计算效率较高，因为在图像空间中各种相关性可以得到充分应用，所以也有许多方法是在图像空间中实现的。</p><p>（ T ）60.背面消除算法不是一个完整的隐面消除方法，但它是隐面消除算法中的关键部分。</p><p>（ T ）61.凸多面体是指连接形体上不属于同一表面的任意两点的线段完全位于形体的内部的形体。</p><p>（ T ）62.若点A、B、C三个点中的任意两点所构成的两个向量的叉乘为0，则三点共线。</p><p>（ F ）63.根据三角形面积的坐标表示法所得到的面积的符号可判别顶点的排列顺序，若符号为正是逆序排列，为负则为顺序排列。</p><p>（ T ）64.场景坐标系通常是右手坐标系。</p><p>（ F ）65.观察坐标系通常是左手坐标系。</p><p>（ T ）66.镜面反射光与物体颜色无关，即镜面反射光产生的高光区域只反映光源的颜色。</p><p>（ T ）67.阴影是指景物中没有被光源直接照射的暗区。</p><p>（ T ）68. 纹理：物体表面的细节，分颜色纹理和几何纹理。</p><p>（ T ）69. 颜色纹理：指光滑表面上附加花纹和图案</p><p>（ T ）70. 几何纹理：景物表面微观上呈现的起伏不平；</p><p>(  T ) 71. 一般而言，矢量图所需要的存储空间要比位图小得多。</p><p>(  T ) 72. 若生成的曲线必须通过给定的每个型值点，这种生成曲线的方法叫插值法。</p><p>(  T ) 73. 用射线与多边形边界的交点个数可判数一个点是否是该多边形的内点。</p><p>(  T ) 74. 一般情况下,两个空间三维向量v1与v2的叉积是一个新的向量。</p><p>(  T ) 75. 在视点坐标系中，视点是原点O(0，0，0)，投影面经过点V(0，1，1)，则与OV垂直的投影面方程是y+z-1&#x3D;0。</p><p>( T ) 76. 齐次坐标表示法可以在计算机中表示无穷远点。</p><p>( T ) 77. 可以用梯形法来计算机平面多边形的面积。</p><p>( F ) 78. 在进行扫描线多边形区域填充时，通常需要构建边结点，边结点的数据结构一般有包含该边斜率信息在内的4个域。</p><p>( T ) 79. 由于物体表面的粗糙因素造成入射光向周围均匀反射的光叫环境光。</p><p>( F ) 80.给定平面上4个不同点可以生成一段4次贝塞尔曲线。</p><p>( T ) 81. Windows经经常用句柄（Handle）来标识对象。 </p><p>( T ) 82.基于单文档的MFC应用程序会自动生成包括应用程序类在内的基本类。</p><p>( T ) 83.C++中类的析构函数可完成一些清理性的任务。</p><p>( T ) 84.Z_Buffer算法是一种消隐算法。 </p><p>(  T ) 85.复杂变换通常可以用一系列的基本变换的组合来实现。</p><p>(  T ) 86. 颜色纹理用纹理映射来处理，几何纹理用扰动函数来描述。</p><p>(  T ) 87.图形显示器是由一个个排列有序的像素所构成，画一条直线实际上</p><p>是根据一系列计算出来并与该线靠近的像素而绘制。</p><p>Phong光照明模型中，反射光是由哪几部分组成的？</p><p>答：环境光（Ambient Light）：环境光模拟了场景中所有物体都会接收到的间接光照，即使它们没有被直接的光源照射。这种光照通常用来提供场景的基本亮度，使得物体即使在阴影中也能被看到。</p><p>漫反射光（Diffuse Light）：漫反射光模拟了光线照射到粗糙表面时向各个方向散射的现象。这种光照取决于物体表面的材质属性（如漫反射系数）和光线与表面法线之间的角度。漫反射光照使得物体表面看起来均匀受光，并且颜色取决于物体材质的颜色。</p><p>镜面反射光（Specular Light）：镜面反射光模拟了光线照射到光滑表面时反射的现象。这种光照产生高光（specular highlights），其强度和位置取决于光源、观察者、物体表面法线以及表面材质的镜面反射系数。镜面反射光照使得物体表面看起来有光泽，并且高光的亮度随着观察角度的变化而变化。</p><p>问题：什么是正轴测投影变换？</p><p>答案：正轴测投影变换是一种将三维物体投影到二维平面上的方法，它保持了物体各个轴之间的比例关系。在正轴测投影中，投影线（光线）与投影面（通常是二维平面）垂直，且投影线与物体的三个主要坐标轴（通常是x、y、z轴）成相同的夹角。这种投影方法通常用于工程制图和计算机图形学中，因为它可以提供一个物体的三维视图，同时保持各个方向的比例一致。</p><p>正轴测投影可以进一步分为几种类型，包括：</p><ol><li><p>正等测投影（Isometric Projection）：在正等测投影中，三个轴之间的夹角都是120度，且每个轴的长度在投影中都被缩短到原始长度的√2&#x2F;2倍（大约是原始长度的70.7%）。这种投影保持了三个轴之间的比例关系，使得物体在二维视图上看起来是等比例的。</p></li><li><p>正二测投影（Dimetric Projection）：在正二测投影中，两个轴之间的夹角是120度，而第三个轴与这两个轴的夹角不同。这种投影保持了两个轴之间的比例关系，但第三个轴的比例可能不同。</p></li><li><p>正三测投影（Trimetric Projection）：在正三测投影中，三个轴之间的夹角都不相同，且每个轴的长度在投影中都被缩短到不同的比例。这种投影不保持任何轴之间的比例关系，因此物体的形状在二维视图上可能看起来有些扭曲。</p></li></ol><p>正轴测投影变换在工程制图中非常有用，因为它可以提供一个清晰的、易于理解的物体三维视图，同时避免了透视投影中由于距离造成的尺寸变化。在计算机图形学中，正轴测投影也用于创建技术图和概念设计图，因为它可以提供一种直观的方式来展示物体的三维结构。</p><p>问题：背面消除算法的基本步骤。</p><p>答案：</p><p>1.确定多边形的法线： 对于每个多边形，计算其法线向量。法线向量是垂直于多边形平面的向量，可以通过取多边形上两个非共线边的叉积来得到。</p><p>2.计算观察者到多边形的向量： 确定观察者的位置（通常为摄像机位置），并计算从观察者位置到多边形中心的向量。</p><p>3.计算法线与观察者向量的点积： 将多边形的法线向量与观察者到多边形中心的向量进行点积运算。点积的结果是一个标量，表示两个向量的夹角的余弦值。</p><p>4.判断多边形的可见性：</p><p>如果点积结果大于0，则表示法线向量与观察者向量之间的夹角小于90度，即多边形面向观察者，因此是可见的。</p><p>如果点积结果小于或等于0，则表示法线向量与观察者向量之间的夹角大于或等于90度，即多边形背向观察者，因此是不可见的。</p><p>5.消除背面多边形： 对于那些被判定为不可见的多边形，跳过它们的渲染过程，不进行进一步的绘制操作。</p><p>6.渲染可见多边形： 对于那些被判定为可见的多边形，继续进行渲染过程，包括光照计算、纹理映射等。</p><p>请写出扫描线多边形区域填充的算法过程。</p><p>答案：<strong>预处理多边形，构建活动边表（<strong><strong>AET</strong></strong>），扫描线遍历，处理活动边表，更新活动边表，重复步骤<strong><strong>3-5</strong></strong>，结束</strong></p><p>三次贝塞尔曲线段的有关计算</p><p>答：</p><p>二维、三维几何变换</p><p>答：</p><p>二维几何变换：</p><p>平移变换：将图形沿着x轴和y轴移动一定的距离</p><p>旋转变换：围绕原点或任意点旋转图形</p><p>缩放变换：放大或缩小图形。</p><p>剪切变换：沿x轴或y轴方向倾斜图形</p><p>反射变换：沿x轴或y轴翻转图形</p><p>三位几何变换：</p><p>平移变换：将图形沿着x轴、y轴和z轴移动。</p><p>旋转变换：将图形沿着x轴、y轴和z轴移动。</p><p>缩放变换：放大或缩小图形</p><p>剪切变换：将图形沿着x轴、y轴和z轴移动。</p><p>反射变换：沿x轴、y轴或z轴翻转图形。</p><p>DDA、逐点比较法画直线段</p><p>答：</p><p>DDA步骤：</p><p><img src="clip_image002-1719382350883-1.png" alt="屏幕截图 2024-06-13 115224"></p><p>逐点比较法;</p><p><img src="clip_image004-1719382350883-2.png" alt="屏幕截图 2024-06-13 115634"></p><p><strong>已知平面四点依次是P0(0,0)，P1(1,1)，P2(2,1)，P3(3,0)。用其作为特征多边形P0P1P2P3来构造一条三次贝塞尔曲线段，请写出该曲线的参数化表达式，并分别计算参数为1、2&#x2F;3时曲线上点的值。</strong></p><p><strong>答：表达式：<img src="clip_image005-1719382350884-5.png" alt="屏幕截图 2024-06-13 120039"></strong></p><p><strong>计算<img src="clip_image007-1719382350884-3.png" alt="屏幕截图 2024-06-13 120154"></strong></p><p><strong>简述Gouraud双线性插值算法的基本步骤。</strong></p><p><strong>答：</strong>1.顶点着色：首先，为多边形的每个顶点分配颜色值。</p><p>2.计算边上的颜色梯度：对于多边形的每条边，计算两个顶点之间的颜色梯度，即颜色变化率。</p><p>3.线性插值：沿着每条边，根据参数 𝑡（通常是从0到1的值，表示从一个顶点到另一个顶点的位置），使用线性插值计算边上的每个点的颜色。</p><p>4.填充多边形：使用扫描线算法填充多边形内部。对于扫描线上的每个点，根据该点所在的水平位置，使用相邻边的颜色插值结果来计算该点的颜色。</p><p><strong>如下图所示三角形ABC，将其关于A点顺时针旋转2700，写出其变换矩阵和变换后图形各点的坐标。</strong></p><p><img src="clip_image009-1719382350884-4.png" alt="img"></p><p><strong>简述计算机图形的分类及其特点</strong><strong>:</strong></p><p>计算机图形主要分为两大类：基于线条信息的图形和真实感图形。</p><p>基于线条信息的图形：</p><p>特点：这类图形主要使用线条来表示物体的轮廓和结构，例如工程图、等高线地图、曲面的线框图等。</p><p>应用：常用于工程设计和地理信息系统等领域，强调物体的结构和几何形状。</p><p>真实感图形：</p><p>特点：这类图形通过模拟光线在物体表面的反射、折射、散射等现象，来创建具有真实感的图像。它们通常包含明暗、纹理、阴影等细节。</p><p>应用：广泛应用于电影、游戏、虚拟现实等领域，用于创建逼真的视觉效果。</p><p>计算机图形的这两类各有特点，基于线条信息的图形强调结构和轮廓，而真实感图形则注重图像的真实性和细节。</p><p>问题：请写出多边形区域填充的算法过程:</p><p>1.<strong>多边形表示</strong>：</p><p>使用顶点列表来表示多边形，每个顶点包含其坐标（x, y）。</p><p>2.<strong>排序顶点</strong>：</p><p>将多边形的顶点按照y坐标进行排序，如果y坐标相同，则按照x坐标排序。</p><p>3.<strong>扫描线处理</strong>：</p><p>从y坐标最小的顶点开始，沿着y轴向上扫描。</p><p>对于每条扫描线，找到与该扫描线相交的所有多边形边。</p><p>这些边将扫描线分成若干个区间，每个区间对应多边形内部的一个水平线段。</p><p>4.<strong>边表（ET）和活动边表（AET）</strong>：</p><p>创建边表（Edge Table, ET），用于存储每条扫描线与多边形边相交的信息。</p><p>创建活动边表（Active Edge Table, AET），用于存储当前扫描线上的所有活动边。</p><p>5.<strong>处理交点</strong>：</p><p>对于每条扫描线，将所有与扫描线相交的边的交点按x坐标排序。</p><p>将交点添加到AET中，并更新ET中的边信息。</p><p>6.<strong>填充像素</strong>：</p><p>对于AET中的每一对相邻交点，填充它们之间的所有像素点。</p><p>如果多边形是闭合的，则不需要考虑交点的奇偶性；如果不是闭合的，则只填充交点为奇数个的区间。</p><p>7.<strong>更新AET</strong>：</p><p>在填充完一个区间后，更新AET，移除已经离开扫描线的边，并添加新的进入扫描线的边。</p><p>8.<strong>重复步骤</strong>：</p><p>重复步骤3到7，直到处理完所有扫描线。</p><p>9.<strong>结束</strong>：</p><p>当所有扫描线都处理完毕后，多边形填充完成。</p><p><strong>在如下图所示的坐标系中，有一空间点A绕直线L旋转θ角后到点B，试分析利用基本的平移及旋转矩阵解算B点位置的步骤。</strong></p><p><img src="image-20240705232433572.png" alt="image-20240705232433572"></p><p><img src="image-20240705232446420.png" alt="image-20240705232446420"></p><p>写出逐点比较法画线算法的原理,并编写从点（20，10）到点（60，20）的C程序。</p><p>写出DDA画直线算法的原理，并写出实现该算法的C程序</p><p><img src="clip_image015-1719382350884-8.png" alt="屏幕截图 2024-06-13 171637"><img src="clip_image017-1719382350884-9.png" alt="屏幕截图 2024-06-13 171714"></p><p>写出扫描线种子填充算法的步骤</p><p>答：</p><p>1.初始化种子点：首先，选择一个种子点作为填充过程的起点。这个种子位于需要填充的区域内部。</p><p>2.填充种子点所在的扫描线：从种子点开始，向左和向右填充种子点所在的扫描线上的像素，直到遇到边界像素。</p><p>3.记录填充区域的边界：在填充过程中，记录下填充区域的左边界和右边界，这些边界是填充过程中遇到的第一个非填充像素。</p><p>4.检查相邻的扫描线：对于当前扫描线上的填充区域，检查与它相邻的上一个扫描线和下一个扫描线。在相邻的扫描线上，从记录的左边界开始向右搜索，直到遇到边界像素或已填充的像素。</p><p>5.找到新的种子点：如果在相邻的扫描线上找到了未填充的像素，那么这个像素将成为新的种子点。将这个种子点压入一个栈中，用于后续的填充过程。</p><p>6.重复填充过程：重复步骤4和步骤5，直到栈为空，即所有的种子点都已经处理完毕。</p><p>7.结束填充：当栈为空时，填充过程结束。</p><p>试推导在笛卡尔坐标系中，空间点A（x,y,z）绕Z轴旋转θ角的旋转矩阵.</p><p>什么是正轴测投影变换？试推导正轴测投影变换的变换矩阵</p><p>写出贝塞尔曲面的定义及其矩阵表示形式</p><p>简述三维投影变换分类</p><p>写出Z_Buffer算法的基本步骤.</p><p>Phong光照明模型中，反射光是由哪几部分组成的？写出Phong模型的表达形式.</p><p>组成：</p><ol><li>环境光反射（Ambient Reflection）：这是由环境光引起的均匀照明，它模拟了光线在场景中多次反射后形成的柔和光线。环境光反射不依赖于光源的位置和方向。</li><li>漫反射（Diffuse Reflection）：这是由光源直接照射在物体表面后，由于表面粗糙不平而向各个方向散射的光线。漫反射光的强度与光源的位置和方向有关，但与观察者的位置无关。</li></ol><p>3.镜面反射（Specular Reflection）：这是由光源直接照射在物体表面后，由于表面光滑而向特定方向反射的光线。镜面反射光的强度与光源的位置、观察者的位置以及物体表面的光滑程度有关。</p><p>表达形式：<img src="clip_image019-1719382350884-10.png" alt="屏幕截图 2024-06-13 172531"></p>]]></content>
    
    
    <categories>
      
      <category>学校课程</category>
      
      <category>复习题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>复习题</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>算法设计复习题</title>
    <link href="/post/0194fff0752e/"/>
    <url>/post/0194fff0752e/</url>
    
    <content type="html"><![CDATA[<h3 id="第1章-算法概述"><a href="#第1章-算法概述" class="headerlink" title="第1章 算法概述"></a>第1章 算法概述</h3><h4 id="算法的概念及性质"><a href="#算法的概念及性质" class="headerlink" title="算法的概念及性质"></a>算法的概念及性质</h4><p>算法是解决问题的一系列清晰指令的有限序列，具有输入、输出和明确定义的操作步骤。算法应具备正确性、可行性、确定性和有穷性等性质。</p><h4 id="程序的概念"><a href="#程序的概念" class="headerlink" title="程序的概念"></a>程序的概念</h4><p>程序是由编程语言编写的一组指令，用于实现特定功能或解决特定问题的计算机软件。</p><h4 id="算法举例"><a href="#算法举例" class="headerlink" title="算法举例"></a>算法举例</h4><ul><li><strong>调度问题</strong>：如作业调度、任务分配等问题。</li><li><strong>排序算法</strong>：如冒泡排序、快速排序、归并排序等。</li></ul><h4 id="P类问题、NP类问题概念"><a href="#P类问题、NP类问题概念" class="headerlink" title="P类问题、NP类问题概念"></a>P类问题、NP类问题概念</h4><ul><li><strong>P类问题</strong>：指在多项式时间内可解决的问题。</li><li><strong>NP类问题</strong>：指可以在多项式时间内验证解的问题。NP问题不一定可以在多项式时间内求解。</li></ul><h4 id="算法复杂性的概念"><a href="#算法复杂性的概念" class="headerlink" title="算法复杂性的概念"></a>算法复杂性的概念</h4><p>算法复杂性描述了算法在解决问题时所需的计算资源。主要包括时间复杂性和空间复杂性两个方面。</p><h4 id="时间复杂性的分析"><a href="#时间复杂性的分析" class="headerlink" title="时间复杂性的分析"></a>时间复杂性的分析</h4><p>时间复杂性是指算法运行所需时间的度量，通常用大O记号来表示。常见的时间复杂度包括O(1)、O(log n)、O(n)、O(n log n)、O(n^2)等。</p><h4 id="常见的算法复杂度的大O阶"><a href="#常见的算法复杂度的大O阶" class="headerlink" title="常见的算法复杂度的大O阶"></a>常见的算法复杂度的大O阶</h4><ul><li>**O(1)**：常数时间复杂度，如哈希表的插入和查找操作。</li><li>**O(log n)**：对数时间复杂度，如二分查找。</li><li>**O(n)**：线性时间复杂度，如简单查找。</li><li>**O(n log n)**：如快速排序、归并排序等。</li><li>**O(n^2)**：平方时间复杂度，如冒泡排序、插入排序等。</li><li><h2 id="O-1-O-logn-O-n-O-nlogn-O-n-2-O-2-n-O-n"><a href="#O-1-O-logn-O-n-O-nlogn-O-n-2-O-2-n-O-n" class="headerlink" title="O(1) &lt; O(logn) &lt; O(n) &lt; O(nlogn) &lt; O(n^2) &lt; O(2^n) &lt; O(n!)"></a><strong><code>O(1) &lt; O(logn) &lt; O(n) &lt; O(nlogn) &lt; O(n^2) &lt; O(2^n) &lt; O(n!)</code></strong></h2></li></ul><h4 id="h函数的渐进表达式计算"><a href="#h函数的渐进表达式计算" class="headerlink" title="h函数的渐进表达式计算"></a>h函数的渐进表达式计算</h4><p>函数的渐进表达式用来描述函数在自变量趋向于无穷大时的增长趋势。常见的有O大O、Ω大Omega、Θ大Theta等。</p><p>希望这些回答能帮到你！如有其他问题，请继续提问。</p><h3 id="第2章-递归与分治"><a href="#第2章-递归与分治" class="headerlink" title="第2章 递归与分治"></a>第2章 递归与分治</h3><h4 id="递归的概念"><a href="#递归的概念" class="headerlink" title="递归的概念"></a>递归的概念</h4><p>递归是指一个函数在定义中调用自身的过程。递归函数通常包括两部分：基本情况（递归的结束条件）和递归情况（调用自身以解决更小的子问题）。</p><h4 id="递归方程求解"><a href="#递归方程求解" class="headerlink" title="递归方程求解"></a>递归方程求解</h4><p>递归方程用来描述递归算法的时间复杂度。通常通过递推关系式来表示，可以使用递归树或主定理来求解复杂度。</p><h4 id="经典递归实例"><a href="#经典递归实例" class="headerlink" title="经典递归实例"></a>经典递归实例</h4><ul><li><strong>求和</strong>：例如计算1到n的和。</li><li><strong>求阶乘</strong>：如计算n的阶乘，即n!。</li><li><strong>Fibonacci数列</strong>：例如计算第n个斐波那契数。</li><li><strong>整数划分问题</strong>：例如将整数n划分成若干个整数的和。</li><li><strong>汉诺塔问题</strong>：经典的递归问题，将圆盘从一根柱子移动到另一根柱子，要求小圆盘必须在大圆盘上方。</li></ul><h4 id="递归的特点及优缺点"><a href="#递归的特点及优缺点" class="headerlink" title="递归的特点及优缺点"></a>递归的特点及优缺点</h4><p><strong>特点：</strong></p><ul><li>简洁、直观，能够简化问题的表达和解决。</li><li>适用于问题的分而治之，能够自然地描述一些具有递归结构的问题。</li></ul><p><strong>优点：</strong></p><ul><li>简化复杂问题，使问题更易理解和实现。</li><li>有助于实现分治策略，使问题的分解和解决更加自然和高效。</li></ul><p><strong>缺点：</strong></p><ul><li>可能会导致堆栈溢出的问题，尤其是在递归层数很深时。</li><li>可能存在重复计算，效率较低。</li></ul><h4 id="分治法的基本思想"><a href="#分治法的基本思想" class="headerlink" title="分治法的基本思想"></a>分治法的基本思想</h4><p>分治法将原问题分解成若干个规模较小但结构与原问题相似的子问题，递归地求解这些子问题，然后合并子问题的解来得到原问题的解。</p><h4 id="分治法实例"><a href="#分治法实例" class="headerlink" title="分治法实例"></a>分治法实例</h4><ul><li><strong>二分搜索算法</strong>：在有序数组中查找特定元素。</li><li><strong>合并排序（Merge Sort）</strong>：将数组分成两半，分别排序后再合并。</li><li><strong>快速排序（Quick Sort）</strong>：选取一个基准元素，将数组分为比基准元素小和比基准元素大的两部分，然后递归地对这两部分进行排序。</li></ul><h2 id="第3章-动态规划"><a href="#第3章-动态规划" class="headerlink" title="第3章 动态规划"></a>第3章 动态规划</h2><h3 id="动态规划总体思想"><a href="#动态规划总体思想" class="headerlink" title="动态规划总体思想"></a>动态规划总体思想</h3><p>动态规划（Dynamic Programming，简称DP）是一种通过将复杂问题拆分为更简单的子问题，并存储其子问题的解，以避免重复计算，从而提高效率的算法设计方法。它通常用于解决具有重叠子问题和最优子结构性质的问题。</p><ol><li><strong>重叠子问题（Overlapping Subproblems）</strong>：原问题可以分解为多个子问题，这些子问题会重复出现。</li><li><strong>最优子结构（Optimal Substructure）</strong>：原问题的最优解可以通过其子问题的最优解构造得到。</li></ol><h3 id="动态规划基本步骤"><a href="#动态规划基本步骤" class="headerlink" title="动态规划基本步骤"></a>动态规划基本步骤</h3><ol><li><strong>定义子问题</strong>：明确要解决的子问题是什么，把一个大问题分解成若干个相同类型的小问题。</li><li><strong>确定状态（State）</strong>：用一个数组或表格来表示每个子问题的解。</li><li><strong>设置边界条件（Initialization）</strong>：初始化最简单的子问题的解。</li><li><strong>状态转移方程（Recurrence Relation）</strong>：找到子问题和原问题之间的递推关系。</li><li><strong>计算结果</strong>：根据状态转移方程，迭代计算每个子问题的解，最终得到原问题的解。</li></ol><h3 id="动态规划基本要素"><a href="#动态规划基本要素" class="headerlink" title="动态规划基本要素"></a>动态规划基本要素</h3><ol><li><strong>状态定义</strong>：描述一个子问题的解，例如 <code>dp[i]</code> 表示前 i 个元素的某种状态。</li><li><strong>状态转移方程</strong>：描述如何从一个状态转移到另一个状态，例如 <code>dp[i] = dp[i-1] + something</code>。</li><li><strong>初始状态和边界条件</strong>：为递推提供基础，例如 <code>dp[0] = 0</code> 或其他初始值。</li><li><strong>计算顺序</strong>：根据状态转移方程的依赖关系，通常是从小到大的顺序计算。</li></ol><h3 id="动态规划实例"><a href="#动态规划实例" class="headerlink" title="动态规划实例"></a>动态规划实例</h3><h4 id="1-最长公共子序列（Longest-Common-Subsequence-LCS）"><a href="#1-最长公共子序列（Longest-Common-Subsequence-LCS）" class="headerlink" title="1. 最长公共子序列（Longest Common Subsequence, LCS）"></a>1. 最长公共子序列（Longest Common Subsequence, LCS）</h4><p><strong>问题描述</strong>：给定两个字符串，找到它们的最长公共子序列的长度。</p><p><strong>状态定义</strong>：<code>dp[i][j]</code> 表示字符串 A 的前 i 个字符和字符串 B 的前 j 个字符的最长公共子序列的长度。</p><p><strong>状态转移方程</strong>：</p><ul><li>如果 <code>A[i-1] == B[j-1]</code>，则 <code>dp[i][j] = dp[i-1][j-1] + 1</code></li><li>否则，<code>dp[i][j] = max(dp[i-1][j], dp[i][j-1])</code></li></ul><p><strong>初始化</strong>：<code>dp[0][j] = 0</code> 和 <code>dp[i][0] = 0</code>，因为任何字符串和空字符串的最长公共子序列长度都是 0。</p><h4 id="2-最大子段和问题（Maximum-Subarray-Sum）"><a href="#2-最大子段和问题（Maximum-Subarray-Sum）" class="headerlink" title="2. 最大子段和问题（Maximum Subarray Sum）"></a>2. 最大子段和问题（Maximum Subarray Sum）</h4><p><strong>问题描述</strong>：给定一个整数数组，找到具有最大和的连续子数组，并返回其最大和。</p><p><strong>状态定义</strong>：<code>dp[i]</code> 表示以第 i 个元素结尾的最大子数组和。</p><p><strong>状态转移方程</strong>：</p><ul><li><code>dp[i] = max(nums[i], dp[i-1] + nums[i])</code></li></ul><p><strong>初始化</strong>：<code>dp[0] = nums[0]</code>，因为只有一个元素时，最大子数组和就是该元素本身。</p><h4 id="3-0-1-背包问题（0-1-Knapsack-Problem）"><a href="#3-0-1-背包问题（0-1-Knapsack-Problem）" class="headerlink" title="3. 0-1 背包问题（0-1 Knapsack Problem）"></a>3. 0-1 背包问题（0-1 Knapsack Problem）</h4><p><strong>问题描述</strong>：给定一个容量为 W 的背包和一组物品，每个物品有重量和价值，求解如何选择物品使得总价值最大且总重量不超过背包容量。</p><p><strong>状态定义</strong>：<code>dp[i][w]</code> 表示前 i 个物品在总重量不超过 w 时的最大价值。</p><p><strong>状态转移方程</strong>：</p><ul><li>如果不选第 i 个物品：<code>dp[i][w] = dp[i-1][w]</code></li><li>如果选第 i 个物品：<code>dp[i][w] = dp[i-1][w-weight[i]] + value[i]</code></li><li>综合起来：<code>dp[i][w] = max(dp[i-1][w], dp[i-1][w-weight[i]] + value[i])</code></li></ul><p><strong>初始化</strong>：<code>dp[0][w] = 0</code> 对所有 w，因为没有物品时，价值为 0。</p><p>这些实例展示了动态规划在不同领域中的应用，通过定义状态、确定转移方程以及初始化，可以有效地解决许多复杂问题。</p><h3 id="第4章-贪心算法"><a href="#第4章-贪心算法" class="headerlink" title="第4章 贪心算法"></a>第4章 贪心算法</h3><h4 id="贪心算法的概念"><a href="#贪心算法的概念" class="headerlink" title="贪心算法的概念"></a>贪心算法的概念</h4><p>贪心算法（Greedy Algorithm）是一种在每一步选择中都采取在当前状态下最好或最优的选择，以期望通过局部最优解达到全局最优解的算法设计方法。贪心算法不一定能保证求得全局最优解，但对于某些特定问题，它可以提供高效且正确的解。</p><h4 id="用贪心算法求解的问题需具备的两个基本要素"><a href="#用贪心算法求解的问题需具备的两个基本要素" class="headerlink" title="用贪心算法求解的问题需具备的两个基本要素"></a>用贪心算法求解的问题需具备的两个基本要素</h4><ol><li><strong>贪心选择性质（Greedy Choice Property）</strong>：在当前步骤中，选择局部最优解不会影响到后续的选择能够构成全局最优解。这意味着可以通过局部最优策略来构建全局最优解。</li><li><strong>最优子结构性质（Optimal Substructure）</strong>：一个问题的全局最优解包含其子问题的全局最优解。也就是说，问题的最优解可以由其子问题的最优解递归地构建出来。</li></ol><h4 id="贪心算法与动态规划算法的差异"><a href="#贪心算法与动态规划算法的差异" class="headerlink" title="贪心算法与动态规划算法的差异"></a>贪心算法与动态规划算法的差异</h4><ul><li><strong>选择标准</strong>：<ul><li><strong>贪心算法</strong>：在每一步选择中做出局部最优的选择，不回溯、不考虑后续可能的选择。</li><li><strong>动态规划</strong>：考虑所有可能的选择，通过比较不同选择的结果来确保全局最优解。</li></ul></li><li><strong>适用问题类型</strong>：<ul><li><strong>贪心算法</strong>：通常适用于具有贪心选择性质和最优子结构性质的问题。</li><li><strong>动态规划</strong>：适用于更广泛的问题类型，特别是那些具有重叠子问题和最优子结构性质的问题。</li></ul></li><li><strong>计算复杂度</strong>：<ul><li><strong>贪心算法</strong>：通常较简单且高效，适用于大多数实际情况。</li><li><strong>动态规划</strong>：可能需要存储子问题的解，空间和时间复杂度一般较高。</li></ul></li></ul><h4 id="贪心算法实例"><a href="#贪心算法实例" class="headerlink" title="贪心算法实例"></a>贪心算法实例</h4><h5 id="1-活动安排问题（Activity-Selection-Problem）"><a href="#1-活动安排问题（Activity-Selection-Problem）" class="headerlink" title="1. 活动安排问题（Activity Selection Problem）"></a>1. 活动安排问题（Activity Selection Problem）</h5><p><strong>问题描述</strong>：给定一组活动，每个活动有一个开始时间和结束时间。要求选择尽可能多的互不重叠的活动。</p><p><strong>贪心策略</strong>：每次选择结束时间最早且与已选活动不冲突的活动。</p><p><strong>算法描述</strong>：</p><ol><li>按照活动的结束时间从小到大排序。</li><li>选择第一个活动。</li><li>从剩余活动中选择开始时间不早于上一个选择的活动结束时间的活动。</li><li>重复步骤3直到没有可选活动。</li></ol><h5 id="2-部分背包问题（Fractional-Knapsack-Problem）"><a href="#2-部分背包问题（Fractional-Knapsack-Problem）" class="headerlink" title="2. 部分背包问题（Fractional Knapsack Problem）"></a>2. 部分背包问题（Fractional Knapsack Problem）</h5><p><strong>问题描述</strong>：给定一组物品，每个物品有重量和价值，在允许部分取物的情况下，选择装入容量为 W 的背包，使得总价值最大。</p><p><strong>贪心策略</strong>：按照单位重量的价值（value&#x2F;weight）从大到小选择物品，尽可能多地装入背包。</p><p><strong>算法描述</strong>：</p><ol><li>计算每个物品的单位重量价值，并按其从大到小排序。</li><li>依次选择物品，直到背包装满或无法再装入更多物品。</li></ol><h5 id="3-最优装载问题（Optimal-Load-Problem）"><a href="#3-最优装载问题（Optimal-Load-Problem）" class="headerlink" title="3. 最优装载问题（Optimal Load Problem）"></a>3. 最优装载问题（Optimal Load Problem）</h5><p><strong>问题描述</strong>：在一个货运航班中，如何装载货物使得总重量不超过最大承载重量且装载的货物总价值最大。</p><p><strong>贪心策略</strong>：按照单位重量的价值（value&#x2F;weight）从大到小选择货物，尽可能多地装入航班。</p><h5 id="4-哈夫曼编码（Huffman-Coding）"><a href="#4-哈夫曼编码（Huffman-Coding）" class="headerlink" title="4. 哈夫曼编码（Huffman Coding）"></a>4. 哈夫曼编码（Huffman Coding）</h5><p><strong>问题描述</strong>：给定一组字符及其对应的频率，构建一个二进制前缀码（哈夫曼码）使得编码后的字符总长度最短。</p><p><strong>贪心策略</strong>：每次选择频率最小的两个节点合并，直到所有节点合并成一棵树。</p><p><strong>算法描述</strong>：</p><ol><li>将所有字符构建成叶子节点，并按照频率构建一个优先队列。</li><li>每次从队列中取出频率最小的两个节点，合并成一个新节点，并将新节点的频率设为两个节点频率之和。</li><li>将新节点重新放入队列。</li><li>重复步骤2和3，直到队列中只剩一个节点，这个节点即为哈夫曼树的根。</li></ol><h5 id="5-最小生成树（Minimum-Spanning-Tree-MST）"><a href="#5-最小生成树（Minimum-Spanning-Tree-MST）" class="headerlink" title="5. 最小生成树（Minimum Spanning Tree, MST）"></a>5. 最小生成树（Minimum Spanning Tree, MST）</h5><p><strong>问题描述</strong>：给定一个带权无向图，找到一个树，使得树包含所有节点且边的权值和最小。</p><p><strong>常用贪心算法</strong>：Kruskal算法和Prim算法。</p><p><strong>Kruskal算法</strong>：</p><ol><li>将所有边按权重从小到大排序。</li><li>初始化一个森林（每个顶点各自为树）。</li><li>依次选择权重最小的边，若该边连接的两个顶点属于不同的树，则将其加入生成树，并合并这两个顶点所在的树。</li><li>重复步骤3，直到生成树包含所有顶点。</li></ol><p><strong>Prim算法</strong>：</p><ol><li>从任意一个顶点开始，将其标记为已访问。</li><li>在已访问顶点和未访问顶点之间选择权重最小的边，将该边和其连接的未访问顶点加入生成树。</li><li>重复步骤2，直到生成树包含所有顶点。</li></ol><h5 id="6-多机调度问题（Job-Scheduling-Problem）"><a href="#6-多机调度问题（Job-Scheduling-Problem）" class="headerlink" title="6. 多机调度问题（Job Scheduling Problem）"></a>6. 多机调度问题（Job Scheduling Problem）</h5><p><strong>问题描述</strong>：给定一组作业和多个机器，安排作业到机器上，使得所有作业完成的总时间最短。</p><p><strong>贪心策略</strong>：每次选择最短作业时间或将作业分配到当前负载最轻的机器上。</p><p><strong>算法描述</strong>：</p><ol><li>按作业时间从短到长排序。</li><li>依次将作业分配到当前负载最轻的机器上。</li></ol><p>贪心算法通过简洁有效的策略解决了许多实际问题，但并非适用于所有情况。在使用贪心算法时，需要确保问题具备贪心选择性质和最优子结构性质。</p><h1 id="试卷结构"><a href="#试卷结构" class="headerlink" title="试卷结构"></a><strong>试卷结构</strong></h1><p>试卷共4页，5大题，满分 100分， 120 分钟完卷。</p><h4 id="一、单项选择题：-每小题2分，共30分"><a href="#一、单项选择题：-每小题2分，共30分" class="headerlink" title="一、单项选择题：(每小题2分，共30分)"></a>一、<strong>单项选择题：</strong>(每小题2分，共30分)</h4><p>在下列每小题的四个备选答案中选出一个正确的答案，并将其字母标号填入下面的表格中，填入题干的括号内无效。</p><h4 id="二、判断题：-每小题1分，共10分）"><a href="#二、判断题：-每小题1分，共10分）" class="headerlink" title="二、判断题：(每小题1分，共10分）"></a>二、<strong>判断题：</strong>(每小题1分，共10分）</h4><p>以下描述正确的打“√”，错误的打“×”，并将答案填在下面的表格中。</p><h4 id="三、计算题：-每小题10分，共30分"><a href="#三、计算题：-每小题10分，共30分" class="headerlink" title="三、计算题：(每小题10分，共30分)"></a><strong>三、计算题：</strong>(每小题10分，共30分)</h4><p>函数的渐进表达式计算（递归方程求解）、解空间树（子集树或排列树）、哈夫曼编码（构造哈夫曼树及编码）</p><h4 id="四、简答题：-每小题5分，共10分"><a href="#四、简答题：-每小题5分，共10分" class="headerlink" title="四、简答题：(每小题5分，共10分)"></a>四、<strong>简答题：</strong>(每小题5分，共10分)</h4><h5 id="动态规划总体思想、基本步骤、基本要素"><a href="#动态规划总体思想、基本步骤、基本要素" class="headerlink" title="动态规划总体思想、基本步骤、基本要素"></a>动态规划总体思想、基本步骤、基本要素</h5><ul><li><p>动态规划通过将原问题分解为相对简单的子问题来解决复杂问题，通过存储子问题的解，避免重复计算，从而提高效率。其关键在于将问题分解为子问题，并确定子问题之间的递推关系，以便逐步求解原问题。</p><h3 id="基本步骤："><a href="#基本步骤：" class="headerlink" title="基本步骤："></a>基本步骤：</h3><p>（1）</p><p>（2）递归地定义最优值。 </p><p>（3）以自底向上的方式或自顶向下的记忆化方法（备忘录法）计算出最优值。 </p><p>（4）根据计算最优值时得到的信息，构造一个最优解。 </p><h3 id="基本要素："><a href="#基本要素：" class="headerlink" title="基本要素："></a>基本要素：</h3><ul><li>最优子结构</li><li>状态转移方程</li><li>边界条件</li><li>状态存储</li><li>状态压缩</li></ul></li></ul><h5 id="回溯法的概念及基本思想、应用步骤及剪枝函数"><a href="#回溯法的概念及基本思想、应用步骤及剪枝函数" class="headerlink" title="回溯法的概念及基本思想、应用步骤及剪枝函数"></a>回溯法的概念及基本思想、应用步骤及剪枝函数</h5><p>概念：回溯法（Backtracking）是一种通过试探所有可能的解来求解问题的算法</p><p>基本思想：逐步构建问题的解决方案，并在搜索过程中进行选择和回退，直到找到解或确定问题无解为止</p><p>应用步骤：</p><ul><li>定义问题1</li><li>选择状态表示</li><li>编写回溯函数<ul><li>递归参数</li><li>递归终止条件</li><li>递归主体</li></ul></li><li>执行回溯搜索</li></ul><h5 id="分支限界法与回溯法的比较"><a href="#分支限界法与回溯法的比较" class="headerlink" title="分支限界法与回溯法的比较"></a>分支限界法与回溯法的比较</h5><p><strong>分支限界法与回溯法的相同点是：</strong>都是一种在问题的解空间树T中搜索问题解的算法。</p><p><strong>不同点：</strong>（1）求解目标不同； </p><p>（2）搜索方式不同； </p><p>（3）对扩展结点的扩展方式不同； </p><p>（4）存储空间的要求不同。</p><h4 id="分支限界法的基本思想、分支限界法的两种实现方式"><a href="#分支限界法的基本思想、分支限界法的两种实现方式" class="headerlink" title="分支限界法的基本思想、分支限界法的两种实现方式"></a>分支限界法的基本思想、分支限界法的两种实现方式</h4><p>基本思想：分支限界法通常以广度优先或者以最小耗费优先的方式搜索问题的解空间树</p><p>两种实现方式：</p><p>队列式分支限界法（队列式分支限界法将活结点表组织成一个队列，并按照队列先进先出的原则选取下一个结点为当前扩展结点）</p><p>优先队列式分支限界法（优先队列式的分支限界法将活结点表组织成一个优先队列，并按照优先队列中规定的结点优先级选取优先级最高的下一个结点成为当前的扩展结点）</p><h3 id="五、算法设计题：-每小题10分，共20分"><a href="#五、算法设计题：-每小题10分，共20分" class="headerlink" title="五、算法设计题：(每小题10分，共20分)"></a><strong>五、算法设计题：</strong>(每小题10分，共20分)</h3><p>最大子段和、二分搜索算法</p><h6 id="最大子段和"><a href="#最大子段和" class="headerlink" title="最大子段和"></a>最大子段和</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">maxSubArray</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums)</span> &#123;<br>    <span class="hljs-keyword">if</span> (nums == <span class="hljs-literal">null</span> || nums.length == <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <br>    <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> nums.length;<br>    <span class="hljs-type">int</span>[] dp = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[n];<br>    dp[<span class="hljs-number">0</span>] = nums[<span class="hljs-number">0</span>];<br>    <span class="hljs-type">int</span> <span class="hljs-variable">maxSum</span> <span class="hljs-operator">=</span> dp[<span class="hljs-number">0</span>];<br>    <br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt; n; i++) &#123;<br>        dp[i] = Math.max(dp[i - <span class="hljs-number">1</span>] + nums[i], nums[i]);<br>        maxSum = Math.max(maxSum, dp[i]);<br>    &#125;<br>    <br>    <span class="hljs-keyword">return</span> maxSum;<br>&#125;<br>解释：<br>dp[i] 数组用来存储以第 i 个元素结尾的最大子段和。<br>maxSum 变量用来记录 dp 数组中的最大值，即为最终的结果。<br>时间复杂度为 O(n)，空间复杂度为 O(n)，其中 n 是数组 nums 的长度。<br>这种动态规划算法在实现上简单直观，并且能够有效地解决最大子段和问题。<br></code></pre></td></tr></table></figure><h6 id="二分搜索算法"><a href="#二分搜索算法" class="headerlink" title="二分搜索算法"></a>二分搜索算法</h6><p><img src="clip_image002-1718613963237-2.png" alt="img">                                                                 </p>]]></content>
    
    
    <categories>
      
      <category>学校课程</category>
      
      <category>复习题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>复习题</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>基于AOP实现简单日志记录</title>
    <link href="/post/a2fd8a52cae9/"/>
    <url>/post/a2fd8a52cae9/</url>
    
    <content type="html"><![CDATA[<h3 id="基于AOP实现简单日志记录"><a href="#基于AOP实现简单日志记录" class="headerlink" title="基于AOP实现简单日志记录"></a>基于AOP实现简单日志记录</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">package</span> org.example.springaoplog.log;<br><br><span class="hljs-keyword">import</span> com.fasterxml.jackson.core.JsonProcessingException;<br><span class="hljs-keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;<br><span class="hljs-keyword">import</span> org.aspectj.lang.ProceedingJoinPoint;<br><span class="hljs-keyword">import</span> org.aspectj.lang.annotation.Around;<br><span class="hljs-keyword">import</span> org.aspectj.lang.annotation.Aspect;<br><span class="hljs-keyword">import</span> org.aspectj.lang.annotation.Pointcut;<br><span class="hljs-keyword">import</span> org.aspectj.lang.reflect.MethodSignature;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><span class="hljs-keyword">import</span> org.springframework.util.StopWatch;<br><br><span class="hljs-keyword">import</span> javax.annotation.Resource;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> java.util.Date;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 日志切面</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> 14237</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@Aspect</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LogAspect</span> &#123;<br>    <span class="hljs-meta">@Pointcut</span> ( <span class="hljs-string">&quot;@annotation(org.example.springaoplog.log.Log)&quot;</span>)<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">pointcut</span><span class="hljs-params">()</span> &#123;&#125;<br><br>    <span class="hljs-meta">@Resource</span><br>    HttpServletRequest request;<br>    <span class="hljs-keyword">final</span> <span class="hljs-type">ObjectMapper</span> <span class="hljs-variable">mapper</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectMapper</span>();<br><br>    <span class="hljs-meta">@Around</span> ( <span class="hljs-string">&quot;pointcut()&quot;</span>)<br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">around</span><span class="hljs-params">(ProceedingJoinPoint pjp)</span> <span class="hljs-keyword">throws</span> JsonProcessingException &#123;<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">MethodSignature</span> <span class="hljs-variable">signature</span> <span class="hljs-operator">=</span> ((MethodSignature) pjp.getSignature());<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">Log</span> <span class="hljs-variable">annotation</span> <span class="hljs-operator">=</span> signature.getMethod().getAnnotation(Log.class);<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">StopWatch</span> <span class="hljs-variable">stopWatch</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StopWatch</span>();<br>        stopWatch.start();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">errorMsg</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br>        <span class="hljs-keyword">final</span> Object proceed;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            proceed = pjp.proceed();<br>            result = mapper.writeValueAsString(proceed);<span class="hljs-comment">//返回结果</span><br>            <span class="hljs-keyword">return</span> proceed;<br>        &#125; <span class="hljs-keyword">catch</span>(Throwable e) &#123;<br>            errorMsg = e.getLocalizedMessage();<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            stopWatch.stop();<br><br>            <span class="hljs-keyword">final</span> <span class="hljs-type">SysLog</span> <span class="hljs-variable">sysLog</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SysLog</span>()<br>                    .setId(<span class="hljs-literal">null</span>)<br>                    .setRequestMethod(request.getMethod())<br>                    .setName(annotation.value())<br>                    .setType(annotation.type().getValue())<br>                    .setOperator(<span class="hljs-string">&quot;sessionId: &quot;</span> + request.getSession().getId())<br>                    .setOperatingTime(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>())<br>                    .setIp(request.getRemoteHost())<br>                    .setUrl(request.getRequestURL().toString())<br>                    .setMethod(signature.toString())<br>                    .setArgs(mapper.writeValueAsString(pjp.getArgs()))<br>                    .setMillisecond(stopWatch.getTotalTimeMillis())<br>                    .setResult(result)<br>                    .setError(errorMsg);<br>            <span class="hljs-comment">//记录日志</span><br>            recordLog(sysLog);<br>        &#125;<br><br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 记录日志</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> log 日志</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">recordLog</span><span class="hljs-params">(SysLog log)</span> &#123;<br>        <span class="hljs-comment">//保存到数据库</span><br>        System.err.println(log);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example.springaoplog.log;<br><br><span class="hljs-keyword">import</span> java.lang.annotation.Retention;<br><span class="hljs-keyword">import</span> java.lang.annotation.RetentionPolicy;<br><br><span class="hljs-meta">@Retention</span> ( RetentionPolicy.RUNTIME)<br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> Log &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 日志类型</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> &#123;<span class="hljs-doctag">@link</span> LogType &#125;</span><br><span class="hljs-comment">     */</span><br>    LogType <span class="hljs-title function_">type</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> LogType.DEFAULT;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 日志名称</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> &#123;<span class="hljs-doctag">@link</span> String &#125;</span><br><span class="hljs-comment">     */</span><br>    String <span class="hljs-title function_">value</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> <span class="hljs-string">&quot;&quot;</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example.springaoplog.log;<br><br><span class="hljs-keyword">import</span> lombok.AllArgsConstructor;<br><span class="hljs-keyword">import</span> lombok.Getter;<br><br><span class="hljs-meta">@Getter</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">enum</span> <span class="hljs-title class_">LogType</span> &#123;<br>    DEFAULT(<span class="hljs-string">&quot;默认&quot;</span>),<br>    SYSTEM(<span class="hljs-string">&quot;系统日志&quot;</span>),<br>    BUSINESS(<span class="hljs-string">&quot;业务日志&quot;</span>),<br>    OPERATE(<span class="hljs-string">&quot;操作日志&quot;</span>),<br>    TEST(<span class="hljs-string">&quot;测试日志&quot;</span>);<br>    <span class="hljs-keyword">final</span> String value;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example.springaoplog.log;<br><br><span class="hljs-keyword">import</span> lombok.Data;<br><span class="hljs-keyword">import</span> lombok.experimental.Accessors;<br><br><span class="hljs-keyword">import</span> java.util.Date;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 系统日志</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> inyxin</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@Accessors</span> ( chain = <span class="hljs-literal">true</span>)<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SysLog</span> &#123;<br>    <span class="hljs-comment">/** 日志ID */</span><br>    <span class="hljs-keyword">private</span> Integer id;<br>    <span class="hljs-comment">/** 日志名字 */</span><br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-comment">/** 日志类型 */</span><br>    <span class="hljs-keyword">private</span> String type;<br>    <span class="hljs-comment">/** 请求路径 */</span><br>    <span class="hljs-keyword">private</span> String url;<br>    <span class="hljs-comment">/** 请求方式 */</span><br>    <span class="hljs-keyword">private</span> String requestMethod;<br>    <span class="hljs-comment">/** 操作者 */</span><br>    <span class="hljs-keyword">private</span> String operator;<br>    <span class="hljs-comment">/** 方法 */</span><br>    <span class="hljs-keyword">private</span> String method;<br>    <span class="hljs-comment">/** 参数 */</span><br>    <span class="hljs-keyword">private</span> String args;<br>    <span class="hljs-comment">/** 远程IP */</span><br>    <span class="hljs-keyword">private</span> String ip;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 操作时间</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> Date operatingTime;<br>    <span class="hljs-comment">/** 异常信息 */</span><br>    <span class="hljs-keyword">private</span> String error;<br>    <span class="hljs-comment">/** 结果 */</span><br>    <span class="hljs-keyword">private</span> String result;<br>    <span class="hljs-comment">/** 方法执行时间 毫秒 */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">long</span> millisecond;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><p>测试:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Copyright 2013-2018 the original author or authors.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);</span><br><span class="hljs-comment"> * you may not use this file except in compliance with the License.</span><br><span class="hljs-comment"> * You may obtain a copy of the License at</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> *      https://www.apache.org/licenses/LICENSE-2.0</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * Unless required by applicable law or agreed to in writing, software</span><br><span class="hljs-comment"> * distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span><br><span class="hljs-comment"> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span><br><span class="hljs-comment"> * See the License for the specific language governing permissions and</span><br><span class="hljs-comment"> * limitations under the License.</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">package</span> org.example.springaoplog.demos.web;<br><br><span class="hljs-keyword">import</span> org.example.springaoplog.log.Log;<br><span class="hljs-keyword">import</span> org.example.springaoplog.log.LogType;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Controller;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.ModelAttribute;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestParam;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> &lt;a href=&quot;mailto:chenxilzx1@gmail.com&quot;&gt;theonefx&lt;/a&gt;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BasicController</span> &#123;<br><br>    <span class="hljs-comment">// http://127.0.0.1:8080/hello?name=lisi</span><br>    <span class="hljs-meta">@RequestMapping</span> ( <span class="hljs-string">&quot;/hello&quot;</span>)<br>    <span class="hljs-meta">@ResponseBody</span><br>    <span class="hljs-meta">@Log</span> (<br>            value = <span class="hljs-string">&quot;Hello&quot;</span>,<br>            type = LogType.TEST<br>    )<br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">hello</span><span class="hljs-params">(</span><br><span class="hljs-params">            <span class="hljs-meta">@RequestParam</span> (</span><br><span class="hljs-params">                    name = <span class="hljs-string">&quot;name&quot;</span>,</span><br><span class="hljs-params">                    defaultValue = <span class="hljs-string">&quot;unknown user&quot;</span></span><br><span class="hljs-params">            )</span> String name) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Hello &quot;</span> + name;<br>    &#125;<br><br>    <span class="hljs-comment">// http://127.0.0.1:8080/errortest</span><br>    <span class="hljs-meta">@RequestMapping</span> ( <span class="hljs-string">&quot;/errortest&quot;</span>)<br>    <span class="hljs-meta">@ResponseBody</span><br>    <span class="hljs-meta">@Log</span> (<br>            value = <span class="hljs-string">&quot;异常测试&quot;</span>,<br>            type = LogType.TEST<br>    )<br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">errortest</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-number">1</span> / <span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;12321&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// http://127.0.0.1:8080/user</span><br>    <span class="hljs-meta">@RequestMapping</span> ( <span class="hljs-string">&quot;/user&quot;</span>)<br>    <span class="hljs-meta">@ResponseBody</span><br>    <span class="hljs-meta">@Log</span> ( value = <span class="hljs-string">&quot;查询用户&quot;</span>)<br>    <span class="hljs-keyword">public</span> User <span class="hljs-title function_">user</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br>        user.setName(<span class="hljs-string">&quot;theonefx&quot;</span>);<br>        user.setAge(<span class="hljs-number">666</span>);<br>        <span class="hljs-keyword">return</span> user;<br>    &#125;<br><br><br>    <span class="hljs-comment">// http://127.0.0.1:8080/save_user?name=newName&amp;age=11</span><br>    <span class="hljs-meta">@RequestMapping</span> ( <span class="hljs-string">&quot;/save_user&quot;</span>)<br>    <span class="hljs-meta">@ResponseBody</span><br>    <span class="hljs-meta">@Log</span> (<br>            value = <span class="hljs-string">&quot;保存用户&quot;</span>,<br>            type = LogType.OPERATE<br>    )<br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">saveUser</span><span class="hljs-params">(User u)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;user will save: name=&quot;</span> + u.getName() + <span class="hljs-string">&quot;, age=&quot;</span> + u.getAge();<br>    &#125;<br><br>    <span class="hljs-comment">// http://127.0.0.1:8080/html</span><br>    <span class="hljs-meta">@RequestMapping</span> ( <span class="hljs-string">&quot;/html&quot;</span>)<br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">html</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;index.html&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@ModelAttribute</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">parseUser</span><span class="hljs-params">(</span><br><span class="hljs-params">            <span class="hljs-meta">@RequestParam</span> (</span><br><span class="hljs-params">                    name = <span class="hljs-string">&quot;name&quot;</span>,</span><br><span class="hljs-params">                    defaultValue = <span class="hljs-string">&quot;unknown user&quot;</span></span><br><span class="hljs-params">            )</span> String name<br>            ,<br>            <span class="hljs-meta">@RequestParam</span> (<br>                    name = <span class="hljs-string">&quot;age&quot;</span>,<br>                    defaultValue = <span class="hljs-string">&quot;12&quot;</span><br>            ) Integer age, User user) &#123;<br>        user.setName(<span class="hljs-string">&quot;zhangsan&quot;</span>);<br>        user.setAge(<span class="hljs-number">18</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>输出:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">SysLog(id=<span class="hljs-literal">null</span>, name=查询用户, type=默认, url=http:<span class="hljs-comment">//127.0.0.1:8080/user, requestMethod=GET, operator=sessionId: 2F552A00DA410EEE3047B4AEE36927B1, method=User org.example.springaoplog.demos.web.BasicController.user(), args=[], ip=127.0.0.1, operatingTime=Fri Jun 14 10:02:11 CST 2024, error=, result=&#123;&quot;name&quot;:&quot;theonefx&quot;,&quot;age&quot;:666&#125;, millisecond=7)</span><br>SysLog(id=<span class="hljs-literal">null</span>, name=查询用户, type=默认, url=http:<span class="hljs-comment">//10.120.1.193:8080/user, requestMethod=GET, operator=sessionId: 39EA319EFCC022E1973A1C9DA452DAE2, method=User org.example.springaoplog.demos.web.BasicController.user(), args=[], ip=10.120.1.193, operatingTime=Fri Jun 14 10:06:46 CST 2024, error=, result=&#123;&quot;name&quot;:&quot;theonefx&quot;,&quot;age&quot;:666&#125;, millisecond=0)</span><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
      <category>Java</category>
      
      <category>Spring</category>
      
    </categories>
    
    
    <tags>
      
      <tag>AOP</tag>
      
      <tag>Log</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MapStruct 对象转换框架</title>
    <link href="/post/3d9faf4a4bcd/"/>
    <url>/post/3d9faf4a4bcd/</url>
    
    <content type="html"><![CDATA[<h1 id="MapStruct-对象转换框架"><a href="#MapStruct-对象转换框架" class="headerlink" title="MapStruct 对象转换框架"></a>MapStruct 对象转换框架</h1><h2 id="导入依赖"><a href="#导入依赖" class="headerlink" title="导入依赖"></a>导入依赖</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml">        <span class="hljs-tag">&lt;<span class="hljs-name">mapstruct.version</span>&gt;</span>1.4.1.Final<span class="hljs-tag">&lt;/<span class="hljs-name">mapstruct.version</span>&gt;</span><br><br><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mapstruct<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mapstruct<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;mapstruct.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mapstruct<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mapstruct-processor<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;mapstruct.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>原理与 <code>lomback</code> 类似&#96; , 都是通过自动生成代码;</p><h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><h3 id="普通使用"><a href="#普通使用" class="headerlink" title="普通使用"></a>普通使用</h3><h5 id="定义映射接口"><a href="#定义映射接口" class="headerlink" title="定义映射接口"></a>定义映射接口</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">GoodsInfoMapper</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 无状态且线程安全</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-type">GoodsInfoMapper</span> <span class="hljs-variable">INSTANCE</span> <span class="hljs-operator">=</span> Mappers.getMapper(GoodsInfoMapper.class);<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">GoodsInfoPO</span> <span class="hljs-variable">goodsInfoPO</span> <span class="hljs-operator">=</span> GoodsInfoMapper.INSTANCE.goodsInfoDtoToPo(goodsInfoDTO);<br></code></pre></td></tr></table></figure><h3 id="在-Spring-中使用"><a href="#在-Spring-中使用" class="headerlink" title="在 Spring 中使用"></a>在 Spring 中使用</h3><h5 id="定义映射接口-1"><a href="#定义映射接口-1" class="headerlink" title="定义映射接口"></a>定义映射接口</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Mapper(componentModel = &quot;spring&quot;)</span> <span class="hljs-comment">// 设置为 spring</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">GoodsInfoMapper</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 无状态且线程安全</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-type">GoodsInfoMapper</span> <span class="hljs-variable">INSTANCE</span> <span class="hljs-operator">=</span> Mappers.getMapper(GoodsInfoMapper.class);<br>&#125;<br></code></pre></td></tr></table></figure><p>有了 <code>@Mapper(componentModel = &quot;spring)</code> 这个后.生成的实现类上会自动加上  <code>@Component</code> 注解</p><h4 id="Mapping"><a href="#Mapping" class="headerlink" title="@Mapping"></a>@Mapping</h4><p><code>@Mapping</code> 注解是 MapStruct 框架中的一个关键注解，用于定义两个 bean 之间的字段映射关系。它可以应用在 Mapper 接口的方法上，指定源（source）字段到目标（target）字段的映射关系。</p><h3 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Mapper</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">CarMapper</span> &#123;<br><br>    <span class="hljs-meta">@Mapping(source = &quot;make&quot;, target = &quot;manufacturer&quot;)</span><br>    CarDto <span class="hljs-title function_">carToCarDto</span><span class="hljs-params">(Car car)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>在上述示例中，<code>@Mapping(source = &quot;make&quot;, target = &quot;manufacturer&quot;)</code> 表示将 <code>Car</code> 对象的 <code>make</code> 字段映射到 <code>CarDto</code> 对象的 <code>manufacturer</code> 字段上。</p><h3 id="常见属性"><a href="#常见属性" class="headerlink" title="常见属性"></a>常见属性</h3><ul><li><p><strong>source</strong>：源对象的字段名。</p></li><li><p><strong>target</strong>：目标对象的字段名。</p></li><li><p><strong>qualifiedByName</strong>：通过一个命名转换器来转换字段值。</p></li><li><p><strong>defaultValue</strong>：指定目标字段的默认值。</p></li><li><p><strong>ignore</strong>：忽略某个字段，不进行映射。</p></li><li><p><strong>expression</strong>：使用 SpEL 表达式定义映射规则。</p><p><code>This attribute can not be used together with source(), defaultValue(), defaultExpression() or expression().</code></p></li></ul><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><ol><li><strong>简单映射</strong></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Mapping(source = &quot;name&quot;, target = &quot;fullName&quot;)</span><br>PersonDto <span class="hljs-title function_">personToPersonDto</span><span class="hljs-params">(Person person)</span>;<br></code></pre></td></tr></table></figure><p>这个示例将 <code>Person</code> 对象的 <code>name</code> 字段映射到 <code>PersonDto</code> 对象的 <code>fullName</code> 字段。</p><ol><li><strong>使用转换器</strong></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs jaVA"><span class="hljs-meta">@Mapping(source = &quot;birthDate&quot;, target = &quot;birthDate&quot;, dateFormat = &quot;dd-MM-yyyy&quot;)</span><br>PersonDto <span class="hljs-title function_">personToPersonDto</span><span class="hljs-params">(Person person)</span>;<br></code></pre></td></tr></table></figure><p>这个示例中，<code>dateFormat</code> 属性指定了日期格式，MapStruct 会自动将 <code>Person</code> 对象的 <code>birthDate</code> 字段按照指定的格式转换为 <code>PersonDto</code> 对象的 <code>birthDate</code> 字段。</p><ol><li><strong>忽略字段</strong></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-meta">@Mapping(target = &quot;id&quot;, ignore = true)</span><br>PersonDto <span class="hljs-title function_">personToPersonDto</span><span class="hljs-params">(Person person)</span>;<br></code></pre></td></tr></table></figure><p>这个示例中，<code>ignore = true</code> 表示忽略 <code>PersonDto</code> 对象的 <code>id</code> 字段，不进行映射。</p><h3 id="高级用法"><a href="#高级用法" class="headerlink" title="高级用法"></a>高级用法</h3><ul><li><strong>多字段映射</strong>：可以同时映射多个字段，通过多个 <code>@Mapping</code> 注解实现。</li><li><strong>复杂类型映射</strong>：支持复杂对象类型，如集合、嵌套对象等。</li><li><strong>条件映射</strong>：通过 SpEL 表达式在 <code>@Mapping</code> 的 <code>expression</code> 属性中定义条件，根据条件动态进行映射。</li></ul><p><code>@Mapping</code> 注解使得 MapStruct 在生成映射代码时具有灵活性和可配置性，能够应对多种复杂的映射需求。</p>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MapStruct</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ElasticSearch</title>
    <link href="/post/352024ded5b8/"/>
    <url>/post/352024ded5b8/</url>
    
    <content type="html"><![CDATA[<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="docker-安装"><a href="#docker-安装" class="headerlink" title="docker 安装"></a>docker 安装</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker run -d \<br>        --name es \<br>        -e <span class="hljs-string">&quot;ES_JAVA_OPTS=-Xms512m -Xmx512m&quot;</span> \<br>        -e <span class="hljs-string">&quot;discovery.type=single-node&quot;</span> \<br>        -v es-data:/usr/share/elasticsearch/data \<br>        -v es-plugins:/usr/share/elasticsearch/plugins \<br>        -v es-logs:/usr/share/elasticsearch/logs \<br>        --privileged \ --network es-net \<br>        -p 9200:9200 \<br>        -p 9300:9300 \<br>elasticsearch:7.12.1<br></code></pre></td></tr></table></figure><h3 id="docker-compose-yml"><a href="#docker-compose-yml" class="headerlink" title="docker-compose.yml"></a>docker-compose.yml</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">services:</span><br>  <span class="hljs-attr">es:</span><br>    <span class="hljs-attr">container_name:</span> <span class="hljs-string">es</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">elasticsearch:7.12.1</span><br>    <span class="hljs-attr">environment:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;discovery.type=single-node&quot;</span> <span class="hljs-comment"># 非集群模块</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;ES_JAVA_OPTS=-Xms512m -Xmx512m&quot;</span><br>    <span class="hljs-attr">ports:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;9200:9200&quot;</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;9300:9300&quot;</span><br>    <span class="hljs-attr">volumes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;es-data:/usr/share/elasticsearch/data&quot;</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;es-plugins:/usr/share/elasticsearch/plugins&quot;</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;es-logs:/usr/share/elasticsearch/logs&quot;</span><br>    <span class="hljs-attr">networks:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">1panel-network</span><br><span class="hljs-attr">networks:</span><br>  <span class="hljs-attr">1panel-network:</span><br>    <span class="hljs-attr">external:</span> <span class="hljs-literal">true</span><br><span class="hljs-attr">volumes:</span><br>  <span class="hljs-attr">es-logs:</span><br>  <span class="hljs-attr">es-data:</span><br>  <span class="hljs-attr">es-plugins:</span><br></code></pre></td></tr></table></figure><h3 id="ELK-compose"><a href="#ELK-compose" class="headerlink" title="ELK compose"></a>ELK compose</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">networks:</span><br>  <span class="hljs-attr">1panel-network:</span><br>    <span class="hljs-attr">external:</span> <span class="hljs-literal">true</span><br><span class="hljs-attr">volumes:</span><br>  <span class="hljs-attr">es-logs:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">es-log</span><br>  <span class="hljs-attr">es-data:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">es-data</span><br>  <span class="hljs-attr">es-plugins:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">es-plugins</span><br><span class="hljs-attr">services:</span><br>  <span class="hljs-attr">elasticsearch:</span><br>    <span class="hljs-attr">container_name:</span> <span class="hljs-string">elk_elasticsearch</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">elasticsearch:7.12.1</span><br>    <span class="hljs-attr">environment:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;discovery.type=single-node&quot;</span> <span class="hljs-comment"># 非集群模块</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;ES_JAVA_OPTS=-Xms512m -Xmx512m&quot;</span><br>    <span class="hljs-attr">ports:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;9200:9200&quot;</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;9300:9300&quot;</span><br>    <span class="hljs-attr">volumes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;es-data:/usr/share/elasticsearch/data&quot;</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;es-plugins:/usr/share/elasticsearch/plugins&quot;</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;es-logs:/usr/share/elasticsearch/logs&quot;</span><br>    <span class="hljs-attr">networks:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">1panel-network</span><br>  <span class="hljs-attr">kibana:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">kibana:7.12.1</span><br>    <span class="hljs-attr">container_name:</span> <span class="hljs-string">elk_kibana</span><br>    <span class="hljs-attr">restart:</span> <span class="hljs-string">always</span><br>    <span class="hljs-attr">depends_on:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">elasticsearch</span> <span class="hljs-comment">#kibana在elasticsearch启动之后再启动</span><br>    <span class="hljs-attr">environment:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">ELASTICSEARCH_URL=http://elasticsearch:9200</span> <span class="hljs-comment">#设置访问elasticsearch的地址</span><br>    <span class="hljs-attr">ports:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-number">5601</span><span class="hljs-string">:5601</span><br>    <span class="hljs-attr">networks:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">1panel-network</span><br>  <span class="hljs-attr">logstash:</span><br>      <span class="hljs-attr">image:</span> <span class="hljs-string">logstash:7.7.0</span><br>      <span class="hljs-attr">container_name:</span> <span class="hljs-string">elk_logstash</span><br>      <span class="hljs-attr">restart:</span> <span class="hljs-string">always</span><br>      <span class="hljs-attr">volumes:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">/opt/1panel/docker/compose/elasticsearch/logstash-springboot.conf:/usr/share/logstash/pipeline/logstash.conf</span> <span class="hljs-comment">#挂载logstash的配置文件</span><br>      <span class="hljs-attr">depends_on:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">elasticsearch</span> <span class="hljs-comment">#kibana在elasticsearch启动之后再启动</span><br>      <span class="hljs-attr">links:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">elasticsearch:es</span> <span class="hljs-comment">#可以用es这个域名访问elasticsearch服务</span><br>      <span class="hljs-attr">ports:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-number">4560</span><span class="hljs-string">:4560</span><br>      <span class="hljs-attr">networks:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">1panel-network</span><br></code></pre></td></tr></table></figure><h3 id="部署地址"><a href="#部署地址" class="headerlink" title="部署地址:"></a>部署地址:</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">ES : http:<span class="hljs-regexp">//</span><span class="hljs-number">172.19</span>.<span class="hljs-number">143.22</span>:<span class="hljs-number">9200</span>/<br>Kibanna http:<span class="hljs-regexp">//</span><span class="hljs-number">172.19</span>.<span class="hljs-number">143.22</span>:<span class="hljs-number">5601</span><span class="hljs-regexp">/app/</span>dev_tools<span class="hljs-comment">#/console</span><br></code></pre></td></tr></table></figure><p><a href="http://172.19.143.22:9200/">ES</a></p><p><a href="http://172.19.143.22:5601/app/dev_tools#/console">KibanaDev Tools - Elastic </a></p><h2 id="IK分词器插件安装"><a href="#IK分词器插件安装" class="headerlink" title="IK分词器插件安装"></a>IK分词器插件安装</h2><h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><p><a href="https://github.com/infinilabs/analysis-ik/tags?after=v7.12.1">IK分词器插件Tags · infinilabs&#x2F;analysis-ik (github.com)</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">将对于版本的插件 如 <span class="hljs-number">7.12</span><span class="hljs-number">.1</span> 版本的ik <span class="hljs-built_in">zip</span>解压 放在 es 的plugins目录下<br></code></pre></td></tr></table></figure><h3 id="分词测试"><a href="#分词测试" class="headerlink" title="分词测试"></a>分词测试</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs json">POST /_analyze<br><span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;analyzer&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;ik_smart&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;text&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;这个到秦始皇就是非好像是被那种高层吧高层想消灭他，然后就用那个他的软肋，就因为它已经变成掌控了掌控他有个软肋是他婆娘。复生者，对，但是掌控可以影响啊在宾馆里面是吧？嗯，对，但是。会影响他的那个秦始皇然后反正之后就相当于是自爆我靠晕了自己，把自己给灭了。用腿狼。不用推导与他人。自己是秦始皇，然后他本来是是天外的那种修行者然后到地球来寻找突破之法然后地球灵气不够，他传不回去了，然后反正秦始皇那些秦始皇就是它几千年后他被人挖了起来，走了。&quot;</span><br><span class="hljs-punctuation">&#125;</span><br><br></code></pre></td></tr></table></figure><h2 id="索引库"><a href="#索引库" class="headerlink" title="索引库"></a>索引库</h2><h3 id="Mapping"><a href="#Mapping" class="headerlink" title="Mapping"></a>Mapping</h3><ul><li>type <ul><li>字符串 : <code>text</code>(可分词)   <code>keyword</code>(精确值 , 不可分词, 如IP, 地址, 品牌)</li><li>数值 : <code>long integer short byte  double float number</code></li><li>布尔 : <code>boolean</code></li><li>日期 : <code>date</code></li><li>对象 : <code>object</code></li></ul></li><li>index : 是否创建索引 , 默认值 <code>true</code></li><li>analyzer : 使用哪种分词器</li><li>properties : 该字段的子字段</li></ul><h3 id="索引库-的CRUD"><a href="#索引库-的CRUD" class="headerlink" title="索引库 的CRUD"></a>索引库 的CRUD</h3><ul><li><p>创建索引库</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs json">PUT /索引库<br><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;mappings&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;field1&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;text&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;analyzer&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;ik_smart&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs json">PUT /inyxin<br><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;mappings&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;properties&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;keyword&quot;</span><br>            <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;age&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;integer&quot;</span><br>            <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;address&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;properties&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                    <span class="hljs-attr">&quot;city&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                        <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;text&quot;</span><br>                    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>                    <span class="hljs-attr">&quot;details&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                        <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;text&quot;</span><br>                    <span class="hljs-punctuation">&#125;</span><br>                <span class="hljs-punctuation">&#125;</span><br>            <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;description&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;text&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;analyzer&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;ik_smart&quot;</span><br>            <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br><br></code></pre></td></tr></table></figure></li><li><p>查询索引库</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">GET</span> /索引库<br></code></pre></td></tr></table></figure></li><li><p>修改索引库 <code>只支持新增字段 </code> </p><p>如果字段已经存在 , 则会报错</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">PUT <span class="hljs-regexp">/索引库/</span>_mapping<br></code></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs json">PUT /inyxin/_mapping<br><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;properties&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;username&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;keyword&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;index&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;true&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure></li><li><p>删除索引库</p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gauss"><span class="hljs-keyword">DELETE</span> /索引库<br></code></pre></td></tr></table></figure></li></ul><h2 id="文档的CRUD"><a href="#文档的CRUD" class="headerlink" title="文档的CRUD"></a>文档的CRUD</h2><ul><li><p>新增</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk">PUT <span class="hljs-regexp">/索引库/</span>_doc/文档ID<br>&#123;<br>文档数据<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs json">PUT /inyxin/_doc/<span class="hljs-number">1</span><br><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;inyxin&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;username&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;inyxin&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;age&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;20&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;description&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;确实是描述&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;address&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;city&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;四川·达州&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;details&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;四川文理学院·南坝校区&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>添加成功后响应</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;_index&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;inyxin&quot;</span><span class="hljs-punctuation">,</span>  索引库名<br>  <span class="hljs-attr">&quot;_type&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;_doc&quot;</span><span class="hljs-punctuation">,</span>文档名<br>  <span class="hljs-attr">&quot;_id&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;1&quot;</span><span class="hljs-punctuation">,</span>文档ID<br>  <span class="hljs-attr">&quot;_version&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;result&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;created&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;_shards&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;total&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">2</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;successful&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;failed&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;_seq_no&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;_primary_term&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><br><span class="hljs-punctuation">&#125;</span><br><br></code></pre></td></tr></table></figure></li><li><p>读取</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">GET</span> /索引库/_doc/文档ID<br></code></pre></td></tr></table></figure><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">GET</span> /inyxin/_doc/1<br></code></pre></td></tr></table></figure><p>查询结果</p><p><code>_source</code> : 原始文档</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;_index&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;inyxin&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;_type&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;_doc&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;_id&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;1&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;_version&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;_seq_no&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;_primary_term&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;found&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;_source&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;name&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;inyxin&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;username&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;inyxin&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;age&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;20&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;description&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;确实是描述&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;address&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;city&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;四川·达州&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;details&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;四川文理学院·南坝校区&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure></li><li><p>修改</p><ul><li><p><code> 全量修改 (覆盖修改)</code> </p><p>若文档ID已存在 , 则会先删除旧的文档, 在进行新增 ,</p><p>否则 就是添加一个新的文档</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">PUT <span class="hljs-regexp">/索引库/</span>_doc/文档ID  同新增<br>&#123;&#125;<br></code></pre></td></tr></table></figure></li><li><p><code>增量修改 (局部修改)</code></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs json">UPDATE  /索引库/_update/文档ID<br><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;doc&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;YINIXN&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;age&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">21</span><br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure></li></ul></li><li><p>删除</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-keyword">DELETE</span> <span class="hljs-regexp">/索引库/</span>_doc/<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
      <category>中间件</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ElasticSearch</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux启动脚本</title>
    <link href="/post/fe20cd40b669/"/>
    <url>/post/fe20cd40b669/</url>
    
    <content type="html"><![CDATA[<h2 id="实现用户登录后执行特定启动脚本"><a href="#实现用户登录后执行特定启动脚本" class="headerlink" title="实现用户登录后执行特定启动脚本"></a>实现用户登录后执行特定启动脚本</h2><h3 id="1-使用-bash-profile-或-bashrc"><a href="#1-使用-bash-profile-或-bashrc" class="headerlink" title="1. 使用 .bash_profile 或 .bashrc"></a>1. 使用 <code>.bash_profile</code> 或 <code>.bashrc</code></h3><p>如果使用的是 Bash shell，可以将启动脚本添加到用户主目录下的 <code>.bash_profile</code> 或 <code>.bashrc</code> 文件中。</p><h4 id="bash-profile"><a href="#bash-profile" class="headerlink" title=".bash_profile"></a>.bash_profile</h4><p><code>.bash_profile</code> 在用户登录时运行一次。适用于登录 shell。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">bashCopy Code# 编辑用户主目录下的 .bash_profile 文件<br>nano ~/.bash_profile<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">在文件末尾添加要执行的脚本</span><br>/path/to/your/script.sh<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">保存并退出</span><br></code></pre></td></tr></table></figure><h4 id="bashrc"><a href="#bashrc" class="headerlink" title=".bashrc"></a>.bashrc</h4><p><code>.bashrc</code> 在每次打开一个新的 shell 时运行。适用于非登录 shell。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">bashCopy Code# 编辑用户主目录下的 .bashrc 文件<br>nano ~/.bashrc<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">在文件末尾添加要执行的脚本</span><br>/path/to/your/script.sh<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">保存并退出</span><br></code></pre></td></tr></table></figure><h3 id="2-使用-profile"><a href="#2-使用-profile" class="headerlink" title="2. 使用 .profile"></a>2. 使用 <code>.profile</code></h3><p>某些 Linux 发行版和 shell（如 Dash）使用 <code>.profile</code> 文件。该文件在用户登录时运行。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sh">bashCopy Code<span class="hljs-comment"># 编辑用户主目录下的 .profile 文件</span><br>nano ~/.profile<br><br><span class="hljs-comment"># 在文件末尾添加要执行的脚本</span><br>/path/to/your/script.sh<br><br><span class="hljs-comment"># 保存并退出</span><br></code></pre></td></tr></table></figure><h3 id="3-使用-etc-profile-和-etc-profile-d"><a href="#3-使用-etc-profile-和-etc-profile-d" class="headerlink" title="3. 使用 /etc/profile 和 /etc/profile.d"></a>3. 使用 <code>/etc/profile</code> 和 <code>/etc/profile.d</code></h3><p>对于全系统范围内的配置，可以编辑 <code>/etc/profile</code> 文件，或在 <code>/etc/profile.d</code> 目录下创建一个新的脚本。</p><h4 id="etc-profile"><a href="#etc-profile" class="headerlink" title="&#x2F;etc&#x2F;profile"></a>&#x2F;etc&#x2F;profile</h4><p>在所有用户登录时运行。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sh">bashCopy Code<span class="hljs-comment"># 编辑 /etc/profile 文件（需要root权限）</span><br>sudo nano /etc/profile<br><br><span class="hljs-comment"># 在文件末尾添加要执行的脚本</span><br>/path/to/your/script.sh<br><br><span class="hljs-comment"># 保存并退出</span><br></code></pre></td></tr></table></figure><h4 id="etc-profile-d"><a href="#etc-profile-d" class="headerlink" title="&#x2F;etc&#x2F;profile.d"></a>&#x2F;etc&#x2F;profile.d</h4><p>在 <code>/etc/profile.d</code> 目录下创建一个新的脚本文件（必须以 <code>.sh</code> 结尾）。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sh">bashCopy Code<span class="hljs-comment"># 创建一个新的脚本文件（需要root权限）</span><br>sudo nano /etc/profile.d/myscript.sh<br><br><span class="hljs-comment"># 添加要执行的内容</span><br>/path/to/your/script.sh<br><br><span class="hljs-comment"># 保存并退出</span><br></code></pre></td></tr></table></figure><h3 id="4-使用-xinitrc-或-xsession"><a href="#4-使用-xinitrc-或-xsession" class="headerlink" title="4. 使用 .xinitrc 或 .xsession"></a>4. 使用 <code>.xinitrc</code> 或 <code>.xsession</code></h3><p>如果使用图形界面并希望在 X 会话启动时运行脚本，可以使用 <code>.xinitrc</code> 或 <code>.xsession</code> 文件。</p><h4 id="xinitrc"><a href="#xinitrc" class="headerlink" title=".xinitrc"></a>.xinitrc</h4><p>适用于使用 <code>startx</code> 启动 X 会话的用户。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sh">bashCopy Code<span class="hljs-comment"># 编辑用户主目录下的 .xinitrc 文件</span><br>nano ~/.xinitrc<br><br><span class="hljs-comment"># 在文件末尾添加要执行的脚本</span><br>/path/to/your/script.sh<br><br><span class="hljs-comment"># 保存并退出</span><br></code></pre></td></tr></table></figure><h4 id="xsession"><a href="#xsession" class="headerlink" title=".xsession"></a>.xsession</h4><p>适用于使用显示管理器（如 GDM、LightDM）启动 X 会话的用户。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sh">bashCopy Code<span class="hljs-comment"># 编辑用户主目录下的 .xsession 文件</span><br>nano ~/.xsession<br><br><span class="hljs-comment"># 在文件末尾添加要执行的脚本</span><br>/path/to/your/script.sh<br><br><span class="hljs-comment"># 保存并退出</span><br></code></pre></td></tr></table></figure><p>选择合适的方法取决于具体需求和系统环境。通常情况下，对于单个用户和命令行环境，修改 <code>.bash_profile</code> 或 <code>.bashrc</code> 是最常用的方法。</p>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>default</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Docker</title>
    <link href="/post/8a8dcb035543/"/>
    <url>/post/8a8dcb035543/</url>
    
    <content type="html"><![CDATA[<h2 id="镜像"><a href="#镜像" class="headerlink" title="镜像"></a>镜像</h2><ul><li><p><code>docker version</code> 显示 docekr 的详细信息</p></li><li><p><code>docker info</code> 显示 docker 的系统信息</p></li><li><p><code>docker --help</code> docker 的命令帮助手册</p></li><li><p><code>docker search &#123;关键字&#125;</code> 搜索镜像</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker search nginx <span class="hljs-comment">#搜索nginx镜像</span><br>docker search openjdk <span class="hljs-comment">#搜索openjdk镜像</span><br></code></pre></td></tr></table></figure></li><li><p><code>docker pull &#123;镜像名[标签]&#125;</code> 拉取镜像</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker pull nginx <span class="hljs-comment">#拉取 nginx镜像</span><br>docker pull openjdk:latest <span class="hljs-comment">#拉取 openjdk镜像</span><br></code></pre></td></tr></table></figure></li><li><p><code>docker images</code> 查看已经下载的镜像</p></li><li><p><code>docker rmi &#123;镜像名或镜像ID&#125;</code> 删除镜像</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker rmi nginx <span class="hljs-comment"># 删除镜像名为nginx的镜像</span><br>docker rmi e235nd <span class="hljs-comment"># 根据镜像ID删除</span><br></code></pre></td></tr></table></figure></li><li><p><code>docker tag &#123;原来的镜像名[:标签]&#125; &#123;新的镜像名[:标签]&#125;</code> 复制镜像并修改名称</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker tag SOURCE_IMAGE[:TAG] TARGET_IMAGE[:TAG]<br><span class="hljs-comment">#SOURCE_IMAGE 是要标记的现有镜像的名称或 ID。</span><br><span class="hljs-comment">#TARGET_IMAGE 是为现有镜像指定的新标签的名称。</span><br><span class="hljs-comment">#TAG 是可选的标签，用于指定版本或其他特定标识符。</span><br>例如:<br>docker tag nginx inyxin/nginx:beta  <br></code></pre></td></tr></table></figure></li><li><p><code>docker load -i &#123;镜像的tar&#125;</code>  导入镜像</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker load -i /root/docker-centos-httpd.tar<br></code></pre></td></tr></table></figure></li><li><p><code>docker save -o &#123;镜像的tar&#125; &#123;镜像名&#125;</code>  导出镜像</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker save -o xxx.tar 镜像名<br>docker save -o my_image.tar my_image <br></code></pre></td></tr></table></figure></li></ul><h2 id="容器"><a href="#容器" class="headerlink" title="容器"></a>容器</h2><ul><li><p><code>docker run [参数] &#123;镜像&#125; [COMMAND] [ARG...]</code> <strong>启动容器 (重点)</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#语法</span><br>docker run [OPTIONS] IMAGE [COMMAND] [ARG...]<br><span class="hljs-comment">#[OPTIONS]</span><br>-d, --detach：在后台运行容器。<br>--name：为容器指定一个名称。<br>-p, --publish：将容器端口映射到宿主机端口。<br>-v, --volume：挂载宿主机目录到容器内部。<br>-e, --<span class="hljs-built_in">env</span>：设置环境变量。<br>--network：连接容器到指定的网络。<br>--restart：在容器退出时指定重启策略。<br>--<span class="hljs-built_in">rm</span>：容器退出时自动删除。<br>-it：交互式操作，通常与 -i（标准输入）和 -t（终端）一起使用。<br><span class="hljs-comment"># [COMMAND] [ARG...]</span><br><span class="hljs-comment">#可以覆盖默认的命令和参数。例如，你可以执行以下命令来覆盖默认的命令：</span><br>docker run my_image <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Hello, Docker!&quot;</span><br><span class="hljs-comment">#在这个例子中，echo &quot;Hello, Docker!&quot; 将覆盖镜像中定义的默认命令，容器将输出 Hello, Docker! 而不是 Hello, World!。</span><br></code></pre></td></tr></table></figure></li><li><p><code>docker build [OPTIONS]</code> 创建镜像</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker build [OPTIONS]<br><span class="hljs-comment">#[OPTIONS]</span><br>-f : 指定dockerfile文件路径 , 默认就是当前目录的 Dockerfile 文件<br>-t : 构建后的镜像名以及标签<br><span class="hljs-comment">#[EXAMPLE]</span><br>docker build -t inyxin/openjdk:1.8 <br></code></pre></td></tr></table></figure></li><li><p><code>docker logs &#123;容器ID&#125;</code>  查看容器日志</p></li><li><p><code>docker rename &#123;旧名字&#125; &#123;新名字&#125;</code> 容器重命名</p></li><li><p><code>docker ps [-a]</code>  查看正在运行的容器 [ -a 查看全部容器 ] </p></li><li><p><code>docekr kill &#123;容器名 或 容器ID&#125;</code> 杀死一个容器</p></li><li><p><code>docker rm &#123;容器名 或 容器ID&#125;</code> 删除容器</p></li></ul><p>[^{容器名 或 容器 ID}]: 以下简称 {容器ID}</p><ul><li><p><code>docker history &#123;容器ID&#125;</code>  查看 docker 镜像的变更历史</p></li><li><p><code>docker start &#123;容器ID&#125;</code> 启动一个容器</p></li><li><p><code>docker restart &#123;容器ID&#125;</code>  重启容器</p></li><li><p><code>docker stop</code> 停止容器</p></li><li><p><code>doceker image inspect &#123;容器ID&#125;</code>  查看容器内源数据</p></li><li><p><code>docker cp &#123;容器ID&#125;:路径 主机路径</code> 从容器内拷贝文件到主机</p></li><li><p><code>docker exec -it &#123;容器名ID&#125; /bin/bash</code> 进入容器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker <span class="hljs-built_in">exec</span> -it 1Panel-minio-UuPy /bin/bash<br></code></pre></td></tr></table></figure></li><li><p><code>docker commit -m=&quot;提交的描述信息&quot;  -a=&quot;作者&quot;  &#123;容器id&#125;  &#123;目标镜像名:[TAG]&#125;</code></p></li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker run \<br>--name inyxin-minio \ <br>-v <span class="hljs-string">&quot;/opt/1panel/apps/minio/minio/data:/data&quot;</span> \ <br>-v <span class="hljs-string">&quot;/opt/1panel/apps/minio/minio/certs:/root/.minio/certs&quot;</span> \<br>-p <span class="hljs-string">&quot;9001:9001&quot;</span> \ <br>-p <span class="hljs-string">&quot;9000:9000&quot;</span> \<br>--restart always \ <br>-e MINIO_ROOT_PASSWORD=<span class="hljs-string">&quot;1423716216@qq.com&quot;</span> \ <br>-e MINIO_ROOT_USER=<span class="hljs-string">&quot;1423716216@qq.com&quot;</span> \<br>-e MINIO_SERVER_URL=<span class="hljs-string">&quot;http://127.0.0.1:9000&quot;</span> \<br>-e MINIO_BROWSER=on \<br>-e MINIO_BROWSER_LOGIN_ANIMATION=on \<br>-e MINIO_BROWSER_REDIRECT_URL=<span class="hljs-string">&quot;http://127.0.0.1:9001&quot;</span> \<br>-e MINIO_BROWSER_SESSION_DURATION=12h \<br>-e PATH=/opt/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin \<br>-e container=oci \<br>-e MINIO_ACCESS_KEY_FILE=access_key \<br>-e MINIO_SECRET_KEY_FILE=secret_key \<br>-e MINIO_ROOT_USER_FILE=access_key \<br>-e MINIO_ROOT_PASSWORD_FILE=secret_key \<br>-e MINIO_KMS_SECRET_KEY_FILE=kms_master_key \<br>-e MINIO_UPDATE_MINISIGN_PUBKEY=RWTx5Zr1tiHQLwG9keckT0c45M3AGeHD6IvimQHpyRywVWGbP1aVSGav \<br>-e MINIO_CONFIG_ENV_FILE=config.env \<br>minio/minio <br><br></code></pre></td></tr></table></figure><h2 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 指定基础镜像，例如 node:14。这是 Dockerfile 的第一条指令，定义了新镜像是基于哪个已有镜像创建的。</span><br>FROM &lt;base_image&gt;<br><br><span class="hljs-comment"># 设置作者信息 (可选)</span><br>LABEL maintainer=<span class="hljs-string">&quot;&lt;your_name&gt; &lt;your_email&gt;&quot;</span><br><br><span class="hljs-comment"># 设置工作目录。所有后续的 COPY, ADD, RUN 等指令都将在这个目录下执行。例如 WORKDIR /usr/src/app</span><br>WORKDIR /usr/src/app<br><br><span class="hljs-comment"># 复制文件到镜像中</span><br>COPY &lt;<span class="hljs-built_in">source</span>&gt; &lt;destination&gt;<br><br><span class="hljs-comment"># 下载并安装依赖包</span><br>RUN &lt;<span class="hljs-built_in">command</span>&gt;<br><br><span class="hljs-comment"># 设置环境变量 (可选)</span><br>ENV &lt;key&gt;=&lt;value&gt;<br><br><span class="hljs-comment"># 暴露端口 (可选)</span><br>EXPOSE &lt;port&gt;<br><br><span class="hljs-comment"># 运行容器启动时的命令 ,与 CMD 类似，但 ENTRYPOINT 不会被 docker run 提供的参数覆盖。例如：</span><br>ENTRYPOINT [<span class="hljs-string">&quot;&lt;command&gt;&quot;</span>]<br><br><span class="hljs-comment"># 指定默认参数 (可选) 指定容器启动时要执行的命令。例如，CMD [&quot;npm&quot;, &quot;start&quot;]。注意，CMD 只会有一个生效，如果存在多个 CMD 指令，只有最后一个会被执行。</span><br>CMD [<span class="hljs-string">&quot;&lt;args&gt;&quot;</span>]<br></code></pre></td></tr></table></figure><p>通过 &#96;docker build -t {镜像: 标签} 即可构建</p><h2 id=""><a href="#" class="headerlink" title=""></a></h2><h2 id="存储卷"><a href="#存储卷" class="headerlink" title="存储卷"></a>存储卷</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">Usage:</span>  <span class="hljs-string">docker</span> <span class="hljs-string">volume</span> <span class="hljs-string">COMMAND</span><br><br><span class="hljs-string">Manage</span> <span class="hljs-string">volumes</span><br><br><span class="hljs-attr">Commands:</span><br>  <span class="hljs-string">create</span>      <span class="hljs-string">Create</span> <span class="hljs-string">a</span> <span class="hljs-string">volume</span><br>  <span class="hljs-string">inspect</span>     <span class="hljs-string">Display</span> <span class="hljs-string">detailed</span> <span class="hljs-string">information</span> <span class="hljs-string">on</span> <span class="hljs-string">one</span> <span class="hljs-string">or</span> <span class="hljs-string">more</span> <span class="hljs-string">volumes</span><br>  <span class="hljs-string">ls</span>          <span class="hljs-string">List</span> <span class="hljs-string">volumes</span><br>  <span class="hljs-string">prune</span>       <span class="hljs-string">Remove</span> <span class="hljs-string">unused</span> <span class="hljs-string">local</span> <span class="hljs-string">volumes</span><br>  <span class="hljs-string">rm</span>          <span class="hljs-string">Remove</span> <span class="hljs-string">one</span> <span class="hljs-string">or</span> <span class="hljs-string">more</span> <span class="hljs-string">volumes</span><br></code></pre></td></tr></table></figure><h2 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">Usage:</span>  <span class="hljs-string">docker</span> <span class="hljs-string">network</span> <span class="hljs-string">COMMAND</span><br><br><span class="hljs-string">Manage</span> <span class="hljs-string">networks</span><br><br><span class="hljs-attr">Commands:</span><br>  <span class="hljs-string">connect</span>     <span class="hljs-string">Connect</span> <span class="hljs-string">a</span> <span class="hljs-string">container</span> <span class="hljs-string">to</span> <span class="hljs-string">a</span> <span class="hljs-string">network</span><br>  <span class="hljs-string">create</span>      <span class="hljs-string">Create</span> <span class="hljs-string">a</span> <span class="hljs-string">network</span><br>  <span class="hljs-string">disconnect</span>  <span class="hljs-string">Disconnect</span> <span class="hljs-string">a</span> <span class="hljs-string">container</span> <span class="hljs-string">from</span> <span class="hljs-string">a</span> <span class="hljs-string">network</span><br>  <span class="hljs-string">inspect</span>     <span class="hljs-string">Display</span> <span class="hljs-string">detailed</span> <span class="hljs-string">information</span> <span class="hljs-string">on</span> <span class="hljs-string">one</span> <span class="hljs-string">or</span> <span class="hljs-string">more</span> <span class="hljs-string">networks</span><br>  <span class="hljs-string">ls</span>          <span class="hljs-string">List</span> <span class="hljs-string">networks</span><br>  <span class="hljs-string">prune</span>       <span class="hljs-string">Remove</span> <span class="hljs-string">all</span> <span class="hljs-string">unused</span> <span class="hljs-string">networks</span><br>  <span class="hljs-string">rm</span>          <span class="hljs-string">Remove</span> <span class="hljs-string">one</span> <span class="hljs-string">or</span> <span class="hljs-string">more</span> <span class="hljs-string">networks</span><br></code></pre></td></tr></table></figure><h2 id="DockerCompose"><a href="#DockerCompose" class="headerlink" title="DockerCompose"></a>DockerCompose</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">Usage:</span>  <span class="hljs-string">docker</span> <span class="hljs-string">compose</span> [<span class="hljs-string">OPTIONS</span>] <span class="hljs-string">COMMAND</span><br><br><span class="hljs-string">Define</span> <span class="hljs-string">and</span> <span class="hljs-string">run</span> <span class="hljs-string">multi-container</span> <span class="hljs-string">applications</span> <span class="hljs-string">with</span> <span class="hljs-string">Docker</span><br><br><span class="hljs-attr">Options:</span><br>      <span class="hljs-string">--all-resources</span>              <span class="hljs-string">Include</span> <span class="hljs-string">all</span> <span class="hljs-string">resources,</span> <span class="hljs-string">even</span> <span class="hljs-string">those</span> <span class="hljs-string">not</span> <span class="hljs-string">used</span> <span class="hljs-string">by</span> <span class="hljs-string">services</span><br>      <span class="hljs-string">--ansi</span> <span class="hljs-string">string</span>                <span class="hljs-string">Control</span> <span class="hljs-string">when</span> <span class="hljs-string">to</span> <span class="hljs-string">print</span> <span class="hljs-string">ANSI</span> <span class="hljs-string">control</span> <span class="hljs-string">characters</span> <span class="hljs-string">(&quot;never&quot;|&quot;always&quot;|&quot;auto&quot;)</span> <span class="hljs-string">(default</span> <span class="hljs-string">&quot;auto&quot;</span><span class="hljs-string">)</span><br>      <span class="hljs-string">--compatibility</span>              <span class="hljs-string">Run</span> <span class="hljs-string">compose</span> <span class="hljs-string">in</span> <span class="hljs-string">backward</span> <span class="hljs-string">compatibility</span> <span class="hljs-string">mode</span><br>      <span class="hljs-string">--dry-run</span>                    <span class="hljs-string">Execute</span> <span class="hljs-string">command</span> <span class="hljs-string">in</span> <span class="hljs-string">dry</span> <span class="hljs-string">run</span> <span class="hljs-string">mode</span><br>      <span class="hljs-string">--env-file</span> <span class="hljs-string">stringArray</span>       <span class="hljs-string">Specify</span> <span class="hljs-string">an</span> <span class="hljs-string">alternate</span> <span class="hljs-string">environment</span> <span class="hljs-string">file</span><br>  <span class="hljs-string">-f,</span> <span class="hljs-string">--file</span> <span class="hljs-string">stringArray</span>           <span class="hljs-string">Compose</span> <span class="hljs-string">configuration</span> <span class="hljs-string">files</span><br>      <span class="hljs-string">--parallel</span> <span class="hljs-string">int</span>               <span class="hljs-string">Control</span> <span class="hljs-string">max</span> <span class="hljs-string">parallelism,</span> <span class="hljs-number">-1</span> <span class="hljs-string">for</span> <span class="hljs-string">unlimited</span> <span class="hljs-string">(default</span> <span class="hljs-number">-1</span><span class="hljs-string">)</span><br>      <span class="hljs-string">--profile</span> <span class="hljs-string">stringArray</span>        <span class="hljs-string">Specify</span> <span class="hljs-string">a</span> <span class="hljs-string">profile</span> <span class="hljs-string">to</span> <span class="hljs-string">enable</span><br>      <span class="hljs-string">--progress</span> <span class="hljs-string">string</span>            <span class="hljs-string">Set</span> <span class="hljs-string">type</span> <span class="hljs-string">of</span> <span class="hljs-string">progress</span> <span class="hljs-string">output</span> <span class="hljs-string">(auto,</span> <span class="hljs-string">tty,</span> <span class="hljs-string">plain,</span> <span class="hljs-string">quiet)</span> <span class="hljs-string">(default</span> <span class="hljs-string">&quot;auto&quot;</span><span class="hljs-string">)</span><br>      <span class="hljs-string">--project-directory</span> <span class="hljs-string">string</span>   <span class="hljs-string">Specify</span> <span class="hljs-string">an</span> <span class="hljs-string">alternate</span> <span class="hljs-string">working</span> <span class="hljs-string">directory</span><br>                                   <span class="hljs-string">(default:</span> <span class="hljs-string">the</span> <span class="hljs-string">path</span> <span class="hljs-string">of</span> <span class="hljs-string">the,</span> <span class="hljs-string">first</span> <span class="hljs-string">specified,</span> <span class="hljs-string">Compose</span> <span class="hljs-string">file)</span><br>  <span class="hljs-string">-p,</span> <span class="hljs-string">--project-name</span> <span class="hljs-string">string</span>        <span class="hljs-string">Project</span> <span class="hljs-string">name</span><br><br><span class="hljs-attr">Commands:</span><br>  <span class="hljs-string">attach</span>      <span class="hljs-string">Attach</span> <span class="hljs-string">local</span> <span class="hljs-string">standard</span> <span class="hljs-string">input,</span> <span class="hljs-string">output,</span> <span class="hljs-string">and</span> <span class="hljs-string">error</span> <span class="hljs-string">streams</span> <span class="hljs-string">to</span> <span class="hljs-string">a</span> <span class="hljs-string">service&#x27;s</span> <span class="hljs-string">running</span> <span class="hljs-string">container</span><br>  <span class="hljs-string">build</span>       <span class="hljs-string">Build</span> <span class="hljs-string">or</span> <span class="hljs-string">rebuild</span> <span class="hljs-string">services</span><br>  <span class="hljs-string">config</span>      <span class="hljs-string">Parse,</span> <span class="hljs-string">resolve</span> <span class="hljs-string">and</span> <span class="hljs-string">render</span> <span class="hljs-string">compose</span> <span class="hljs-string">file</span> <span class="hljs-string">in</span> <span class="hljs-string">canonical</span> <span class="hljs-string">format</span><br>  <span class="hljs-string">cp</span>          <span class="hljs-string">Copy</span> <span class="hljs-string">files/folders</span> <span class="hljs-string">between</span> <span class="hljs-string">a</span> <span class="hljs-string">service</span> <span class="hljs-string">container</span> <span class="hljs-string">and</span> <span class="hljs-string">the</span> <span class="hljs-string">local</span> <span class="hljs-string">filesystem</span><br>  <span class="hljs-string">create</span>      <span class="hljs-string">Creates</span> <span class="hljs-string">containers</span> <span class="hljs-string">for</span> <span class="hljs-string">a</span> <span class="hljs-string">service</span><br>  <span class="hljs-string">down</span>        <span class="hljs-string">Stop</span> <span class="hljs-string">and</span> <span class="hljs-string">remove</span> <span class="hljs-string">containers,</span> <span class="hljs-string">networks</span><br>  <span class="hljs-string">events</span>      <span class="hljs-string">Receive</span> <span class="hljs-string">real</span> <span class="hljs-string">time</span> <span class="hljs-string">events</span> <span class="hljs-string">from</span> <span class="hljs-string">containers</span><br>  <span class="hljs-string">exec</span>        <span class="hljs-string">Execute</span> <span class="hljs-string">a</span> <span class="hljs-string">command</span> <span class="hljs-string">in</span> <span class="hljs-string">a</span> <span class="hljs-string">running</span> <span class="hljs-string">container</span><br>  <span class="hljs-string">images</span>      <span class="hljs-string">List</span> <span class="hljs-string">images</span> <span class="hljs-string">used</span> <span class="hljs-string">by</span> <span class="hljs-string">the</span> <span class="hljs-string">created</span> <span class="hljs-string">containers</span><br>  <span class="hljs-string">kill</span>        <span class="hljs-string">Force</span> <span class="hljs-string">stop</span> <span class="hljs-string">service</span> <span class="hljs-string">containers</span><br>  <span class="hljs-string">logs</span>        <span class="hljs-string">View</span> <span class="hljs-string">output</span> <span class="hljs-string">from</span> <span class="hljs-string">containers</span><br>  <span class="hljs-string">ls</span>          <span class="hljs-string">List</span> <span class="hljs-string">running</span> <span class="hljs-string">compose</span> <span class="hljs-string">projects</span><br>  <span class="hljs-string">pause</span>       <span class="hljs-string">Pause</span> <span class="hljs-string">services</span><br>  <span class="hljs-string">port</span>        <span class="hljs-string">Print</span> <span class="hljs-string">the</span> <span class="hljs-string">public</span> <span class="hljs-string">port</span> <span class="hljs-string">for</span> <span class="hljs-string">a</span> <span class="hljs-string">port</span> <span class="hljs-string">binding</span><br>  <span class="hljs-string">ps</span>          <span class="hljs-string">List</span> <span class="hljs-string">containers</span><br>  <span class="hljs-string">pull</span>        <span class="hljs-string">Pull</span> <span class="hljs-string">service</span> <span class="hljs-string">images</span><br>  <span class="hljs-string">push</span>        <span class="hljs-string">Push</span> <span class="hljs-string">service</span> <span class="hljs-string">images</span><br>  <span class="hljs-string">restart</span>     <span class="hljs-string">Restart</span> <span class="hljs-string">service</span> <span class="hljs-string">containers</span><br>  <span class="hljs-string">rm</span>          <span class="hljs-string">Removes</span> <span class="hljs-string">stopped</span> <span class="hljs-string">service</span> <span class="hljs-string">containers</span><br>  <span class="hljs-string">run</span>         <span class="hljs-string">Run</span> <span class="hljs-string">a</span> <span class="hljs-string">one-off</span> <span class="hljs-string">command</span> <span class="hljs-string">on</span> <span class="hljs-string">a</span> <span class="hljs-string">service</span><br>  <span class="hljs-string">scale</span>       <span class="hljs-string">Scale</span> <span class="hljs-string">services</span><br>  <span class="hljs-string">start</span>       <span class="hljs-string">Start</span> <span class="hljs-string">services</span><br>  <span class="hljs-string">stats</span>       <span class="hljs-string">Display</span> <span class="hljs-string">a</span> <span class="hljs-string">live</span> <span class="hljs-string">stream</span> <span class="hljs-string">of</span> <span class="hljs-string">container(s)</span> <span class="hljs-string">resource</span> <span class="hljs-string">usage</span> <span class="hljs-string">statistics</span><br>  <span class="hljs-string">stop</span>        <span class="hljs-string">Stop</span> <span class="hljs-string">services</span><br>  <span class="hljs-string">top</span>         <span class="hljs-string">Display</span> <span class="hljs-string">the</span> <span class="hljs-string">running</span> <span class="hljs-string">processes</span><br>  <span class="hljs-string">unpause</span>     <span class="hljs-string">Unpause</span> <span class="hljs-string">services</span><br>  <span class="hljs-string">up</span>          <span class="hljs-string">Create</span> <span class="hljs-string">and</span> <span class="hljs-string">start</span> <span class="hljs-string">containers</span><br>  <span class="hljs-string">version</span>     <span class="hljs-string">Show</span> <span class="hljs-string">the</span> <span class="hljs-string">Docker</span> <span class="hljs-string">Compose</span> <span class="hljs-string">version</span> <span class="hljs-string">information</span><br>  <span class="hljs-string">wait</span>        <span class="hljs-string">Block</span> <span class="hljs-string">until</span> <span class="hljs-string">the</span> <span class="hljs-string">first</span> <span class="hljs-string">service</span> <span class="hljs-string">container</span> <span class="hljs-string">stops</span><br>  <span class="hljs-string">watch</span>       <span class="hljs-string">Watch</span> <span class="hljs-string">build</span> <span class="hljs-string">context</span> <span class="hljs-string">for</span> <span class="hljs-string">service</span> <span class="hljs-string">and</span> <span class="hljs-string">rebuild/refresh</span> <span class="hljs-string">containers</span> <span class="hljs-string">when</span> <span class="hljs-string">files</span> <span class="hljs-string">are</span> <span class="hljs-string">updated</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringBoot自定义 Starter</title>
    <link href="/post/1a90966c398a/"/>
    <url>/post/1a90966c398a/</url>
    
    <content type="html"><![CDATA[<p>适用于将独立模块,封装成spring-boot-stater 自动配置的模块</p><h3 id="1-创建-Maven-项目"><a href="#1-创建-Maven-项目" class="headerlink" title="1. 创建 Maven 项目"></a>1. 创建 Maven 项目</h3><p>创建一个普通的 Maven 项目 <code>custom-example-starter</code>。</p><h3 id="2-导入-Spring-Boot-相关依赖"><a href="#2-导入-Spring-Boot-相关依赖" class="headerlink" title="2. 导入 Spring Boot 相关依赖"></a>2. 导入 Spring Boot 相关依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">java.version</span>&gt;</span>17<span class="hljs-tag">&lt;/<span class="hljs-name">java.version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">project.build.sourceEncoding</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">project.reporting.outputEncoding</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">spring-boot.version</span>&gt;</span>3.0.2<span class="hljs-tag">&lt;/<span class="hljs-name">spring-boot.version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-autoconfigure<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>provided<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependencyManagement</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-dependencies<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;spring-boot.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">type</span>&gt;</span>pom<span class="hljs-tag">&lt;/<span class="hljs-name">type</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>import<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencyManagement</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="3-声明需要配置的属性和配置名前缀"><a href="#3-声明需要配置的属性和配置名前缀" class="headerlink" title="3. 声明需要配置的属性和配置名前缀"></a>3. 声明需要配置的属性和配置名前缀</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * admin 属性</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@ConfigurationProperties(prefix = &quot;custom.user.admin&quot;)</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AdminProperties</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">Integer</span> <span class="hljs-variable">id</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">String</span> <span class="hljs-variable">username</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;admin&quot;</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">String</span> <span class="hljs-variable">password</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;password&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-创建自定义配置类，并配置-Bean"><a href="#4-创建自定义配置类，并配置-Bean" class="headerlink" title="4. 创建自定义配置类，并配置 Bean"></a>4. 创建自定义配置类，并配置 Bean</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@EnableConfigurationProperties(AdminProperties.class)</span><br><span class="hljs-meta">@ComponentScan(&quot;com.example.utils&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserAutoConfiguration</span> &#123;<br>    <span class="hljs-meta">@Bean</span><br>    User <span class="hljs-title function_">admin</span><span class="hljs-params">(AdminProperties adminProperties)</span> &#123;<br>        System.err.println(<span class="hljs-string">&quot;adminProperties: &quot;</span> + adminProperties);<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br>        user.setId(adminProperties.getId());<br>        user.setUsername(adminProperties.getUsername());<br>        user.setPassword(adminProperties.getPassword());<br>        <span class="hljs-keyword">return</span> user;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="5-导入指定的配置类"><a href="#5-导入指定的配置类" class="headerlink" title="5. 导入指定的配置类"></a>5. 导入指定的配置类</h3><p>创建文件：<code>resources/META-INF/spring/org.springframework.boot.autoconfigure.AutoConfiguration.imports</code>，并添加以下内容：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">com<span class="hljs-selector-class">.example</span><span class="hljs-selector-class">.utils</span>.UserAutoConfiguration<br></code></pre></td></tr></table></figure><p>SpringBoot 2.7前后配置有所差异</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs stylus">示例 <br>原spring.factories文件<br>org<span class="hljs-selector-class">.springframework</span><span class="hljs-selector-class">.boot</span><span class="hljs-selector-class">.autoconfigure</span>.EnableAutoConfiguration=\<br>com<span class="hljs-selector-class">.xxx</span><span class="hljs-selector-class">.iot</span><span class="hljs-selector-class">.common</span><span class="hljs-selector-class">.config</span><span class="hljs-selector-class">.SaTokenConfigure</span>,\<br>com<span class="hljs-selector-class">.xxx</span><span class="hljs-selector-class">.iot</span><span class="hljs-selector-class">.common</span><span class="hljs-selector-class">.config</span><span class="hljs-selector-class">.SecurityProperties</span><br><br>在resource/META-INF目录下新建spring目录，并添加org<span class="hljs-selector-class">.springframework</span><span class="hljs-selector-class">.boot</span><span class="hljs-selector-class">.autoconfigure</span><span class="hljs-selector-class">.AutoConfiguration</span>.imports文件<br>com<span class="hljs-selector-class">.xxx</span><span class="hljs-selector-class">.iot</span><span class="hljs-selector-class">.common</span><span class="hljs-selector-class">.config</span><span class="hljs-selector-class">.SaTokenConfigure</span><br>com<span class="hljs-selector-class">.xxx</span><span class="hljs-selector-class">.iot</span><span class="hljs-selector-class">.common</span><span class="hljs-selector-class">.config</span>.SecurityProperties<br></code></pre></td></tr></table></figure><h3 id="6-在其他-Spring-Boot-项目中引用此模块直接使用-Bean"><a href="#6-在其他-Spring-Boot-项目中引用此模块直接使用-Bean" class="headerlink" title="6. 在其他 Spring Boot 项目中引用此模块直接使用 Bean"></a>6. 在其他 Spring Boot 项目中引用此模块直接使用 Bean</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">ConfigurableApplicationContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> SpringApplication.run(Main.class, args);<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> context.getBean(User.class);<br>        System.out.println(<span class="hljs-string">&quot;user = &quot;</span> + user);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="7-在-YAML-文件中修改默认值"><a href="#7-在-YAML-文件中修改默认值" class="headerlink" title="7. 在 YAML 文件中修改默认值"></a>7. 在 YAML 文件中修改默认值</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">custom:</span><br><span class="hljs-attr">user:</span><br><span class="hljs-attr">admin:</span><br><span class="hljs-attr">id:</span> <span class="hljs-number">22</span><br><span class="hljs-attr">username:</span> <span class="hljs-string">inyxin</span><br></code></pre></td></tr></table></figure><p>通过以上步骤，你就创建了一个自定义的 Spring Boot Starter，并能在其他项目中直接使用对应的 Bean。</p>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
      <category>Java</category>
      
      <category>Spring</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>Spring</tag>
      
      <tag>SpringBoot</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>电力巡检实训项目</title>
    <link href="/post/52efb45fb389/"/>
    <url>/post/52efb45fb389/</url>
    
    <content type="html"><![CDATA[<h2 id="角色"><a href="#角色" class="headerlink" title="角色"></a>角色</h2><ul><li><p>超级管理员</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">维护整个系统的正常运行,不参与任何用户的业务<br></code></pre></td></tr></table></figure></li><li><p>线路管理员</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">对于线路进行管理, 巡检任务的指定, 分配, 审核以及消缺任务的指定, 分配和审核<br></code></pre></td></tr></table></figure></li><li><p>巡检员 </p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gcode">执行巡检任务并返回回执信息 <span class="hljs-comment">(巡检回执)</span><br></code></pre></td></tr></table></figure></li><li><p>消缺员</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gcode">执行消缺任务 , 消除线路中的缺陷, 并反馈回执信息 <span class="hljs-comment">(消缺回执)</span><br></code></pre></td></tr></table></figure></li></ul><h2 id="RBAC"><a href="#RBAC" class="headerlink" title="RBAC"></a>RBAC</h2><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs diff">电力巡检系统应该设计一个RBAC权限模型, 来控制角色的操作<br><span class="hljs-deletion">-用户表(user)</span><br><span class="hljs-deletion">-用户角色表(user_role)</span><br><span class="hljs-deletion">-角色表(role)</span><br><span class="hljs-deletion">-角色资源表(role_resource)  </span><br><span class="hljs-deletion">-资源表(reource)</span><br></code></pre></td></tr></table></figure><p>可以基于 <code>Spring MVC</code> 中的 <code>拦截器</code> 或者使用 <code>AOP</code> 实现简单的权限控制效果</p>]]></content>
    
    
    <categories>
      
      <category>default</category>
      
    </categories>
    
    
    <tags>
      
      <tag>default</tag>
      
    </tags>
    
  </entry>
  
  
  
  
  
  
  <entry>
    <title>about</title>
    <link href="/"/>
    <url>/</url>
    
    <content type="html"><![CDATA[<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">这里写关于页的正文，支持 Markdown, <span class="hljs-selector-tag">HTML</span><br></code></pre></td></tr></table></figure>]]></content>
    
  </entry>
  
  
  
  <entry>
    <title>categories</title>
    <link href="/"/>
    <url>/</url>
    
    <content type="html"><![CDATA[]]></content>
    
  </entry>
  
  
  
  <entry>
    <title>tags</title>
    <link href="/"/>
    <url>/</url>
    
    <content type="html"><![CDATA[]]></content>
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/"/>
    <url>/</url>
    
    <content type="html"><![CDATA[!(function() {  /** 计时起始时间，自行修改 **/  var start = new Date("2024/07/04 00:00:00");  function update() {    var now = new Date();    now.setTime(now.getTime()+250);    days = (now - start) / 1000 / 60 / 60 / 24;    dnum = Math.floor(days);    hours = (now - start) / 1000 / 60 / 60 - (24 * dnum);    hnum = Math.floor(hours);    if(String(hnum).length === 1 ){      hnum = "0" + hnum;    }    minutes = (now - start) / 1000 /60 - (24 * 60 * dnum) - (60 * hnum);    mnum = Math.floor(minutes);    if(String(mnum).length === 1 ){      mnum = "0" + mnum;    }    seconds = (now - start) / 1000 - (24 * 60 * 60 * dnum) - (60 * 60 * hnum) - (60 * mnum);    snum = Math.round(seconds);    if(String(snum).length === 1 ){      snum = "0" + snum;    }    document.getElementById("timeDate").innerHTML = "本站安全运行&nbsp"+dnum+"&nbsp天";    document.getElementById("times").innerHTML = hnum + "&nbsp小时&nbsp" + mnum + "&nbsp分&nbsp" + snum + "&nbsp秒";  }  update();  setInterval(update, 1000);})();]]></content>
    
  </entry>
  
  
  
  <entry>
    <title>friends</title>
    <link href="/"/>
    <url>/</url>
    
    <content type="html"><![CDATA[]]></content>
    
  </entry>
  
  
  
</search>
